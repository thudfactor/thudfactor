---
import Experiment from "@layouts/Experiment.astro";
---

<style>
	#canvas {
		/* font-size: 32px; */
		position: absolute;
		inset: 0;
		background-color: whitesmoke;

		> * {
			position: absolute;
			inset: 0;
			margin: auto;
		}

		#gameOver {
			visibility: hidden;
		}

		&.game-over #gameOver {
			visibility: visible;
		}
	}

	.position {
		position: absolute;
		transition:
			left 0.3s ease-out,
			top 0.3s ease-out;

		.player,
		.zombie,
		.rubble {
			position: absolute;
			translate: -50% -50%;
		}
	}

	#board {
		width: 20rem;
		height: 20rem;
		background-color: tan;
		overflow: hidden;
	}

	#gameOver {
		width: 20rem;
		height: 20rem;
		background-color: hsl(0deg 70% 30% / 0.8);
		color: white;
		display: grid;
		place-content: center;
	}

	.zombie {
		line-height: 1;
		width: 1rem;
		height: 1rem;
	}

	.player {
		display: grid;
		width: 3rem;
		height: 3rem;
		grid-template-rows: 1fr 1fr 1fr;
		grid-template-columns: 1fr 1fr 1fr;
		transform-origin: 1.5rem 1.5rem;

		.sprite {
			grid-row: 2;
			grid-column: 2;
		}

		button {
			appearance: none;
			background-color: transparent;
			border-width: 0;
			transform-origin: 0.5rem 0.5rem;
			background-color: lightgreen;
			border-radius: 0.5rem;

			&.s {
				grid-row: 3;
				grid-column: 2;
				rotate: 180deg;
			}

			&.e {
				grid-row: 2;
				grid-column: 3;
				rotate: 90deg;
			}

			&.w {
				grid-row: 2;
				grid-column: 1;
				rotate: -90deg;
			}

			&.nw {
				grid-row: 1;
				grid-column: 1;
				rotate: -45deg;
			}

			&.ne {
				grid-row: 1;
				grid-column: 3;
				rotate: 45deg;
			}

			&.sw {
				grid-row: 3;
				grid-column: 1;
				rotate: -135deg;
			}

			&.se {
				grid-row: 3;
				grid-column: 3;
				rotate: 135deg;
			}
		}

		> * {
			width: 1rem;
			height: 1rem;
			line-height: 1rem;
		}
	}
</style>

<Experiment title="Zombies">
	<template id="player-template">
		<div data-position="9,9" class="position">
			<div class="player">
				<div class="sprite">ü§∑‚Äç</div>
				<button data-direction="0,-1" class="n">‚¨ÜÔ∏é</button>
				<button data-direction="0,1" class="s">‚¨ÜÔ∏é</button>
				<button data-direction="1,0" class="e">‚¨ÜÔ∏é</button>
				<button data-direction="-1,0" class="w">‚¨ÜÔ∏é</button>
				<button data-direction="-1,-1" class="nw">‚¨ÜÔ∏é</button>
				<button data-direction="-1,1" class="sw">‚¨ÜÔ∏é</button>
				<button data-direction="1,-1" class="ne">‚¨ÜÔ∏é</button>
				<button data-direction="1,1" class="se">‚¨ÜÔ∏é</button>
			</div>
		</div>
	</template>

	<template id="zombie-template">
		<div data-position="-1,-1" class="position">
			<div class="zombie">üßü</div>
		</div>
	</template>

	<template id="rubble-template">
		<div data-position="-1,-1" class="position">
			<div class="rubble">üí©</div>
		</div>
	</template>

	<div id="canvas">
		<div id="controls">
			<button onclick="lastStand(event)">Last Stand</button>
			<button onclick="teleport(event)">Teleport <span class="left">2</span></button>
			<button onclick="disintegrate(event)">Disintegrator <span class="left">2</span></button>
		</div>
		<div id="board"></div>
		<div id="gameOver">
			You are zombie chow. Score: <span id="score"></span>
			<button onclick="reset()">Play Again</button>
		</div>
	</div>
</Experiment>

<script>
	const NUM_ZOMBIES = 10;
	const canvas = document.querySelector("#canvas");
	const board = document.querySelector("#board");
	let gameIsOver = false;
	let score = 0;

	let player;
	let zombies;
	let zombiePositions = [];
	let rubble = [];

	function updateButtonCount(btn) {
		const leftIndicator = btn.querySelector(".left");
		const newLeft = +leftIndicator.innerText - 1;
		leftIndicator.innerText = newLeft;
		if (newLeft === 0) {
			btn.setAttribute("disabled", "true");
		}
	}

	function teleport(e) {
		updateButtonCount(e.target);
		const [x, y] = randomPosition();
		player.dataset.position = `${x},${y}`;
		setPosition(player);
	}

	function lastStand(e) {}

	function disintegrate(e) {
		updateButtonCount(e.target);
	}

	function randomPosition() {
		const x = Math.floor(Math.random() * 20);
		const y = Math.floor(Math.random() * 20);
		return [x, y];
	}

	function initialize() {
		placePlayer();
		placeZombies();
		player.addEventListener("click", navigationHandler);
		updateUI();
	}

	function placePlayer() {
		const [x, y] = randomPosition();
		const playerTemplate = document.querySelector("#player-template").cloneNode(true).content;
		board.appendChild(playerTemplate);
		player = board.querySelector(".position:has(.player)");
		player.dataset.position = `${x},${y}`;
		setPosition(player);
	}

	function placeRubble(pos) {
		const rubbleTemplate = document.querySelector("#rubble-template").cloneNode(true).content;
		board.appendChild(rubbleTemplate);
		const rubbleNode = document.querySelector('.position[data-position="-1,-1"]:has(.rubble)');
		rubbleNode.dataset.position = pos;
		rubble.push(rubbleNode);
		setPosition(rubbleNode);
	}

	function placeZombies() {
		for (let i = 0; i < NUM_ZOMBIES; i++) {
			const zombieTemplate = document.querySelector("#zombie-template").cloneNode(true).content;
			const z = board.appendChild(zombieTemplate);
		}
		zombies = board.querySelectorAll(".position:has(.zombie)");
		zombies.forEach(z => {
			let collided;
			do {
				const [x, y] = randomPosition();
				const startingPos = `${x},${y}`;
				collided = zombiePositions.includes(startingPos);
				if (!collided) {
					z.dataset.position = startingPos;
				} else {
					console.log("collide");
				}
			} while (collided);
			setPosition(z);
		});
	}

	function setPosition(sprite) {
		const [x, y] = stringToPos(sprite.dataset.position);

		sprite.style.setProperty("left", `${x + 0.5}rem`);
		sprite.style.setProperty("top", `${y + 0.5}rem`);
	}

	function stringToPos(posString) {
		const pos = posString.split(",").map(v => +v);
		return pos;
	}

	function checkPlayerCollision(playerPos) {
		const collided = document.querySelectorAll(
			`.position[data-position="${player.dataset.position}"]:has(.zombie)`
		);
		gameIsOver = collided.length > 0;
	}

	function checkZombieCollision() {
		zombies.forEach(z => {
			if (!z.parentNode) return; // Zombie has already been removed;
			const zPos = z.dataset.position;
			const collidedWithRubble = document.querySelector(
				`.position[data-position="${zPos}"]:has(.rubble)`
			);
			const collidedWithZombies = document.querySelectorAll(
				`.position[data-position="${zPos}"]:has(.zombie)`
			);
			if (collidedWithRubble) {
				score += 1;
				console.log("CollidedWithRubble");
				board.removeChild(z);
			} else if (collidedWithZombies.length > 1) {
				console.log("CollidedWithZombies");
				placeRubble(zPos);
				score += collidedWithZombies.length;
				collidedWithZombies.forEach(zr => board.removeChild(zr));
			}
		});
	}

	function navigationHandler(event) {
		const clicked = event.target;
		if (!clicked.matches("button")) return;
		const newPlayerPos = movePlayer(clicked.dataset.direction);
		moveZombies(newPlayerPos);
		checkPlayerCollision(newPlayerPos);
		checkZombieCollision();
		updateUI();
	}

	function movePlayer(vec) {
		const d = stringToPos(vec);
		const p = stringToPos(player.dataset.position);
		const updatePos = [d[0] + p[0], d[1] + p[1]];
		player.dataset.position = `${updatePos[0]},${updatePos[1]}`;
		setPosition(player);
		return updatePos;
	}

	function moveZombies(playerPos) {
		const [px, py] = playerPos;
		zombies.forEach(z => {
			const [zx, zy] = stringToPos(z.dataset.position);
			let dx = px - zx;
			let dy = py - zy;
			if (dx !== 0) {
				dx = dx > 0 ? 1 : -1;
			}
			if (dy !== 0) {
				dy = dy > 0 ? 1 : -1;
			}
			const updatePos = [dx + zx, dy + zy];
			z.dataset.position = `${updatePos[0]},${updatePos[1]}`;
			setPosition(z);
		});
	}

	function reset() {
		board.replaceChildren();
		score = 0;
		gameIsOver = false;
		initialize();
	}

	function updateUI() {
		if (gameIsOver) {
			document.querySelector("#score").innerText = score;
			canvas.classList.add("game-over");
		} else {
			canvas.classList.remove("game-over");
		}
	}

	initialize();
</script>
