const _astro_dataLayerContent = [["Map",1,2,9,10,824,825,858,859],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.9.3","content-config-digest","2d86f3d433f6092a","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://www.thudfactor.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"server\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":false,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"experimentalDefaultStyles\":true},\"devToolbar\":{\"enabled\":false},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[[null,{}]],\"rehypePlugins\":[],\"remarkRehype\":{\"handlers\":{}},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"csp\":false},\"legacy\":{\"collections\":false}}","posts",["Map",11,12,21,22,38,39,59,60,75,76,91,92,107,108,123,124,139,140,155,156,226,227,248,249,264,265,279,280,299,300,315,316,332,333,352,353,370,371,386,387,418,419,477,478,506,507,515,516,530,531,540,541,577,578,586,587,595,596,635,636,655,656,671,672,691,692,700,701,743,744,758,759,774,775,791,792,808,809],"2025/07/02-links",{id:11,data:13,body:17,filePath:18,digest:19,deferredRender:20},{title:14,description:15,date:16},"Thudfactor link roundup #1","In this first link roundup, I share posts about metrics, AI psychology, and accessibility that caught my attention this last week.",["Date","2025-07-02T10:59:39.000Z"],"We all need better ways to keep track of our bookmarks. Here are the things I read I continued to think about long afterwards.\n\nThese link roundups are likely to be somewhat scattershot and themes will no doubt change from installment to installment. I'm going to try not to link to paywalled stuff unless I can also provide a gift link.\n\n### Cool\n\n[1980s computer books from Usborne](https://usborne.com/us/books/computer-and-coding-books)\n: Usborne has several fun-looking computer programming books geared towards the children of the 1980s, including general programming education & game listings. None of these books look familiar _specifically_, but I would have loved to have some of these when I was a kid.\n\n### Politics\n\n[The Lie of 'Self-Reliance' in Appalachia: How It's Used to Keep Us Down](https://appalachianmemories.org/2025/06/26/the-lie-of-self-reliance-in-appalachia-how-its-used-to-keep-us-down/)\n: Propaganda is alive and well, and one of the best ways to deny people help is to convince them that asking for help is failure. While this is deeply ingrained in the culture here in Appalachia, it's by no means unique to the region nor limited to a specific economic class. You can see echoes of this on \"Why Employees Work While Sick,\" linked further below.\n\n### Accessibility\n\n[Making Scannable Web Pages for Assistive Technology](https://coforma.io/perspectives/making-scannable-web-pages-for-assistive-technology)\n: We've had quite a few tools released recently that promise automatic code generation, but they often fail when it comes to semantic markup. Unfortunately, so do we humans. Jarad Cunha's deep dive into how to make web pages scannable in screen readers is a big help, and I'll be applying many of these suggestions to personal and professional projects currently under my hand.\n\n_Paid Course:_ [Sara Soueidan's Practical Accessibility](https://practical-accessibility.today/)\n: I've been working my way through Sara's accessibility course over the last week or so and learning a lot. Much of it is stuff I _should_ have known before. Sara's course is paid but well worth the price. (This is an unsolicited recommendation and _not_ an affiliate link.)\n\n### Working with AI\n\n[Generative AI Runs on Gambling Addiction](https://pivot-to-ai.com/2025/06/05/generative-ai-runs-on-gambling-addiction-just-one-more-prompt-bro/)\n: This isn't precisely the metaphor I've been using. In my experience, generative AI feels a lot like _Civilization VI_ and other 4X games. \"Just one more turn!\" But I'm not a gambler, and David Gerard's metaphor is probably more relatable.\n\n[After months of coding with LLMs, I'm going back to using my brain](https://albertofortin.com/writing/coding-with-ai)\n: Alberto Fortin, an experienced developer who's been using generative AI for a long time, explains how he over-extended AI's usefulness as a coding partner, and how to better think of using the tool. There's also a [companion webcast with Zed Industries](https://www.youtube.com/watch?v=DOQmhkLGcuY).\n\n### Business Topics\n\n_Gift Link:_ [Why Employees Work While Sick—and How Leaders Can Stop It](https://hbr.org/2025/06/research-why-employees-work-while-sick-and-how-leaders-can-stop-it?giftToken=8607343311751456132835)\n: Perhaps your reaction was like mine: \"people are told to work sick, just stop telling them.\" But this investigates _why_ people who _are_ allowed to take sick leave often don't. Or worse, take the sick leave but continue to push through it. This is a more subtle problem.\n\n[Why Engineers Hate Their Managers (And What to Do About It)](https://terriblesoftware.org/2025/06/24/why-engineers-hate-their-managers-and-what-to-do-about-it/)\n: I've had good managers and bad managers, and most of the ones in-between at least were struggling with unreasonable expectations and arbitrary constraints out of their control -- and were just bad at communicating those things. Matheus Lima's post is a plea for empathy on both sides.\n\n[How Tech Loses Out](https://berthub.eu/articles/posts/how-tech-loses-out/)\n: A transcript of Bert Hubert's talk about companies hollowing out their innovation capabilities by outsourcing _all_ of the production efforts. \"I used to sell software, and now I sell services, because no one can buy my software anymore, because none of these\ntelecommunications companies are technical companies anymore.\"\n\n[MTTR: Bullshit Masquerading as Operational Efficiency](https://medium.com/@Hatchman76/mttr-bullshit-masquerading-as-operational-efficiency-bc06fda12207)\n: Andrew Hatch's deep dive into why \"Mean Time to Recovery,\" a common metric for measuring incidence response effectiveness, is not particularly useful. This specific topic is a bit out of my wheelhouse, but it's a good discussion of why \"throw a bunch of numbers in a spreadsheet and get a pretty chart\" is of dubious value.","src/content/posts/2025/07/02-links.mdx","8be8d97679c1e97f",true,"2025/02/catch-up",{id:21,data:23,body:33,filePath:34,assetImports:35,digest:37,deferredRender:20},{title:24,description:25,date:26,cover:27},"Playing catch-up","Where my head is at after a three-month hiatus",["Date","2025-02-08T15:23:23.000Z"],{src:28,alt:29,description:30,attribution:31},"__ASTRO_IMAGE_sampler.png","Three knit swatches. The top is a stockinette swatch knit in the round. Bottom left is a yellow swatch in broken rib, and bottom right is a flat-knit stockinette swatch.","Knitting does an excellent job keeping hands from doomscrolling, but it also keeps them from blogging.",{name:32},"John Williams","Friends, it has been a long and pretty distressing three months, but you've lived through them too. I did a pretty good job in 2024 of posting at least once a month through July, but then things got extra complicated. I didn't mention it at the time, but one of my cats passed away at the end of August, and then the second just two weeks ago. In between we adopted two kittens from the county, and they are doing just fine.\n\nIn late October, just before the election here in the US, I picked up knitting needles again for the first time in many years. I've been pretty obsessed with knitting as a way of replacing by obsession with news.\n\nMy adventures with Vim ([part I](http://localhost:4321/posts/2024/05/vim-1/), [part II](https://thudfactor.com/posts/2024/05/vim-1/)) have been stalled; there are a few UI things I just couldn't get around, and the tool was not quite as stable as I had hoped. Not crashy, you understand, just often very different each time I opened it. Plugins would update and move things around or break other things I was using and … well, plugin architectures are great in theory.\n\nI use NeoVim inside VSCode, though, and learning Vim motions makes me feel a lot faster, at least.\n\nI guess I didn't learn my lesson from the Vim experiments, though, because just yesterday I installed Ubuntu on my rarely-used Windows laptop. [FOSS](https://en.wikipedia.org/wiki/Free_and_open-source_software) seems to be the only real solution for those of us sick of being marketed at and having our private information sold.\n\nSimilar thinking led me to leave Facebook for good at the end of January. I'd had an arms-length relationship with Meta for a few years, really, but ultimately the value Facebook was providing was not sufficient for the price they were asking. This leaves me without even the occasional outlet for my random moments of thinking in writing, since I've tried to keep Thudfactor developer-centric and [FilmHydra](https://wwww.filmhydra.com) movie-focused. So I guess I might do more personal writing from time to time here as well.","src/content/posts/2025/02/catch-up/index.mdx",[36],"sampler.png","d35b2e4e84ed97e9","2019/11/humanities",{id:38,data:40,body:54,filePath:55,assetImports:56,digest:58,deferredRender:20},{title:41,description:42,date:43,cover:44},"What studying the humanities taught me about software development","At its heart, “Agile” is just the technology industry learning how to work like artists.",["Date","2019-05-11T22:56:35.000Z"],{src:45,alt:46,description:47,attribution:48},"__ASTRO_IMAGE_patrick-tomasso-books.jpg","Open books spread out on a table.","Some application development has more in common with artistic creative work than it does engineering.",{name:49,link:50,license:51},"Patrick Tomasso","https://unsplash.com/photos/open-book-lot-Oaqk7qqNh_c",{name:52,link:53},"Unsplash","https://unsplash.com/license","_This article was originally published on the [NewCity weblog](https://www.insidenewcity.com/blog)._\n\nBack in my computer science days, I took a programming class where the professor decided to assign us a project to show us how real-world programming gets done (or ought to get done).\n\n1. We discussed the problem we were trying to solve in extreme detail\n2. The professor dictated the precise toolset we were supposed to use\n3. We were required to create and turn in a series of planning documents before we ever wrote any code.\n4. Then we were supposed to use those planning documents to write the program\n\n…which should be super easy because we’d done all the planning up front — so it should just be a mechanical process from there, right?\n\nFriends, I didn’t just fail that project. I failed that class.\n\nA semester later I changed my major to English, and the coursework had a different approach for projects:\n\n1. I’d decide what my writing project would be.\n2. I’d go research the topic to get a better understanding of what I was supposed to address.\n3. Then I’d write a rough draft, and …\n\nOK, here’s a funny thing about writing. You have this idea in your head, but the task of putting it on paper forces you to think slowly and carefully about it. Sometimes I never got past the first draft before I changed my mind about what I was trying to say. Thinking in detail about a problem often changes our understanding of it.\n\nBut once I was comfortable with what I was trying to say, the work was still not mechanical. Every word you write is a decision. So for most writers, the process is always:\n\n1. Write\n2. Revise\n3. Repeat\n\nUp until the deadline. (There has to be a deadline. Otherwise, you don’t know when to stop.)\n\nI was much more comfortable with this way of working. This felt natural to me. I could get ideas out of my head, see they were wrong, fix them, and move on.\n\nAlmost any writing advice you read will say the same thing: Get your ideas on paper first. Get the words out where you can stare at them, glare at them, and throw them away if they don’t work. Don’t care if it’s graceless; grace can come later. Write the perfect sentence in the next draft.\n\nHere’s the thing about that computer science class: not many people passed it, and one of the problems we had was no matter how hard we looked at the problem space or made plans, the project kept changing underneath us. The professor “forgot” details, or made decisions in one week that contradicted the previous week’s decisions, throwing all the plans into disarray. It was frustrating and discouraging, but we were assured that’s what the “real world” was like.\n\nBut as much as I was distressed by the changing requirements, I was frustrated by my own lack of understanding. Was my own plan solid? Would it work? All these tools, all these processes, all these ideas — they were new to me. How did I know my plan would work before I did it?\n\nThere was no way.\n\nBut a paper — I might not have known before I started writing precisely what words I was going to use (and how many of each). Or even which sources I was going to cite. But I knew in broad strokes what I needed to accomplish. And it was just a matter of wrestling each project into shape, one revision at a time.\n\nAnd when I graduated with an English degree and found myself in the technology industry anyway, I took that exploratory, write/revise process with me to work. That was 1996, the Web was brand new as a communications medium, and we were all figuring everything out on the fly. So I could get away with that.\n\nMy computer science professor was right, though — real-world programming, full of specification documents and entity relationship diagrams and UML charts — often involved a significant amount of planning up front, and then the expectation that this planning would make the execution easy-peasy.\n\nBut that process is only as good as the plan. When you forget details, or have new thoughts, or change your mind, or even the problem-space changes mid-execution, it can be tough to recover unless you have a lot of skill and the liberty to make use of it.\n\nIn fact, I’d say every project I’ve been involved in that was planned exhaustively up-front came out quite a bit different in the end than anyone expected — and it got there through a last-minute mad scramble to get everything merely functional. In other words, it ended up “write/revise” anyway — but with everyone working in crisis mode, just trying to get the project done.\n\nI am not the only person to have noticed this. In the intervening years, programmers have come to understand that while there’s a significant degree of engineering in code, there’s also a lot of creative work and exploration. Plans work great when you know the problem, you know the tools, you can describe everything clearly, and you know nothing will change.\n\nMost programming work isn’t like that. Any interesting software project involves a continuous process of transmuting the unknown into the known. You can’t do that with plans; plans only tell you what you think might happen. You can only find the truth by doing the work.\n\nCraftspeople, musicians, artists, and writers have known this for millennia. It’s no surprise to me that we’re learning this about software as well.","src/content/posts/2019/11/humanities/index.mdx",[57],"patrick-tomasso-books.jpg","7c0207f362ff1625","2025/03/ai-checkin",{id:59,data:61,body:70,filePath:71,assetImports:72,digest:74,deferredRender:20},{title:62,description:63,date:64,cover:65},"18 months (or so) with AI","A check-in on the AI front, both technically and culturally",["Date","2025-03-02T13:34:07.000Z"],{src:66,alt:67,description:68,attribution:69},"__ASTRO_IMAGE_./mill.jpg","An old sawmill with a water wheel sits in front of a bunch of trees. The wood is very weathered, the sun bright, and it is mid-summer.","Mabry Mill, milepost 176 on the Blue Ridge Parkway. Staff at this small living-history museum demonstrated much of the labor required for daily life just 120 years ago. Although we might think of much of the work as \"manual,\" even without technology the mill represented a significant degree of mechanization and labor-saving technology.",{name:32},"import Pullquote from \"@components/ContentItems/Pullquote/index.astro\";\nimport AlertCallout from \"@components/AlertCallout.astro\";\nimport ArticleFigure from \"@components/ContentItems/ArticleFigure/index.astro\";\n\nIt seemed like a good time to do a check-in on where my head is at with generative AI these days, especially since my country's right wing seems to think most government employees can now be [replaced with AI](https://www.cio.com/article/3828445/musks-plan-to-replace-government-workers-with-ai-could-create-chaos.html). (I don't know if they actually believe that — it's hard to tell what MAGA believes and what is merely pretext — but it's what some of them are telling their constituents.) This impulse is what a lot of us expected, of course. Some folks just can't resist the opportunity to rid their organizations of troublesome, expensive humans and replace them with theoretically more compliant, less needy computers. There are, of course, plenty of voices claiming that AI helps but can't replace humans, so jobs won't be lost… but that's a hard argument to make to anyone paying attention.\n\nI remain frustrated by a lot of arguments suggesting we all refuse to use AI _because_ it threatens to replace our jobs, especially since so many jobs have disappeared over pretty much the [entire history of automation](https://www.thudfactor.com/posts/2024/04/looms/). It's especially frustrating coming from web workers who've replaced skilled press operators, typesetters — most of the printing industry.\n\nAt a minimum that's a lack of awareness. At worst, there's a classist assumption that so-called _professional_ jobs are supposed to be exempt from automation. That's the \"I don't want AI to write my emails, I want it to clean my bathroom\" argument. Your job, but not _my_ job.\n\n<ArticleFigure\n\timage={import(\"./knit.jpg\")}\n\talt=\"Closeup of a three-color handknit swatch in alternating triangular patches of yellow, green, and turquoise.\"\n>\n\tHandknitting, once a critical life skill, has largely been supplanted by automated, mechanical\n\tmanufacture of clothes and fabric goods. The hobby that remains is a passtime -- and an often\n\texpensive one, at that.\n</ArticleFigure>\n\nThe past teaches us that those who resist useful automation can't really stop it, and much of our lives are shaped by the results of this process. That's just about everything around us — the clothes we're wearing, the toast we had with breakfast, even the music we listen to. So I've felt it necessary to engage with AI lest my profession move on without me.\n\nThe question for me remains: is this a _useful_ technology? Because the useless, or the not sufficiently useful, technology tends to disappear with barely a whimper.\n\nRemember all the \"metaverse\" hype? VR, and VR presence, was supposed to change every facet of our lives -- especially the lives of office workers. And yet: did Meta ever invest in moving their own workforce into their product? Did they make virtual office buildings where all the Meta employees sat around virtually typing at virtual desks with [legless avatars](https://www.wired.com/story/fake-metaverse-good-real-metaverse-bad/)?\n\nNo, Meta did not. Instead, Zuck insisted that physical presence at work was vital, and he ordered everyone back to the office.\n\n## Turning off Copilot suggestions\n\nIn the ensuing eighteen months I've used GitHub's Copilot mostly as an advanced code-completion tool. In other words, like a typing assistant. My conclusions haven't changed very much from [my first impressions](https://www.thudfactor.com/posts/2023/06/copilot/), except about a month ago I turned the code suggestions _off_.\n\n<Pullquote>Copilot would suggest packages to import that I did not have.</Pullquote>\n\nOne big reason I turned _off_ the Copilot suggestions was that they often seemed to take the place of code completion offered by IntelliSense — a non-generative AI tool that nevertheless has a much better understanding of the code I am working with. I could count on IntelliSense helping me fill out a JavaScript \"import\" statement accurately, but Copilot would suggest packages to import that I did not have (or often never heard of). It's possible that there's a workaround for this, but after a certain point -- and in the interest of [removing a splinter](https://jordanseiler.xyz/posts/2025-02-07-splinters/) -- I just turned it off entirely.\n\nBy that point I had already turned it off entirely in CSS files because Copilot would often suggest old practices, bad practices, or vast swathes of design choices completely unrelated to the design I was working with.\n\nIn places where Copilot was offering code suggestions in areas where I felt less capable, I caught myself accepting the code uncritically without ever really questioning what was going on. In the past, I would have looked something up and learned something in the process. But falling into [vibe coding](https://arstechnica.com/ai/2025/03/is-vibe-coding-with-ai-gnarly-or-reckless-maybe-some-of-both/?utm_brand=arstechnica&utm_social-type=owned&utm_source=mastodon&utm_medium=social) made me worry that I was speeding up my own obsolescence.\n\nThe other problem I had with Copilot's suggestions is it would often suggest things that weren't quite what I had in mind. Sometimes the suggestions were as good as or better than what I was doing, but sometimes they were worse or wrong. Having these suggestions happen constantly kept feeling like an interruption. After several months, and an experiment with turning off the suggestions altogether, I realized that the creeping frustration and impatience I'd been experiencing at work was the result of having my concentration and attention constantly interrupted. It was the same frustration I've had with pair programming and [open offices](https://www.thudfactor.com/posts/2024/10/colocation/).\n\n## How others around me are using Copilot\n\n<Pullquote position=\"left\">\n\tKnowing how Copilot gets its data makes me more than a little leery.\n</Pullquote>\n\nWhen I asked my colleagues recently how _they_ were using AI, I discovered many of them had turned off the Copilot suggestions as well. \"I use it instead of Ruby documentation,\" one of them said, \"because Ruby documentation is awful.\" Another highlights bits of code and asks Copilot what it's doing, or sometimes has it suggest improvements to code and tests. I am experimenting with both of these things, but knowing how Copilot gets its data and seeing the atrocious CSS it repeats makes me more than a little leery.\n\nIt's a weird situation. You need it most for coding tasks outside your usual domain — but that's also the environment where you are least capable of judging and correcting the results. I'm still experimenting with it, though, but results are mixed.\n\nAn example. Struggling with coding GitHub Actions, I asked Copilot for help. It confidently gave me wrong answers that _seemed right at the time_ and involved logic, not syntax errors. Since I felt less confident with Actions, I spent more time looking for errors in my own code and didn't realize that Copilot was simply wrong until much later.\n\n## Generative AI is both easy and hard\n\nThere is a more-or-less canned response to \"this AI keeps giving me wrong answers:\" You have to learn how to ask it _properly_. There's cognitive dissonance here. On the one hand AI is easy: you just ask it questions in a natural language, then it generates stuff for you. On the other hand, you have to carefully craft your prompts in a specific way, sometimes iterating over them, in order to get reasonable results.\n\nI'm not sure the AI boosters realize this, but it feels a bit like a bait-and-switch. \"Just talk to it normal. Also take my $300 class on how to write prompts.\"\n\n<Pullquote>“Just talk to it normal. Also take my $300 class on how to write prompts.”</Pullquote>\n\nOne developer I know who works a lot with developing AI assistants described a strategy by which\n_multiple_ \"agents\" coordinate in the background, each specialized to a specific task, and sometimes\noffloading work to more traditional programming to get the correct answer. Building this kind of\nthing is non-trivial and requires a great deal of understanding about how the AI works. The end\nresult, while better, is still not entirely reliable.\n\n<AlertCallout>\n\tA friend of mine _has_ found a really useful purpose for generative image AI: creating paintings\n\tof Jesus smoking blunts. If that's not a good use of resources, is anything?\n</AlertCallout>\n\nIt's also basically a department full of experts, except none of them insist on health insurance.\n\nThe truth here is that AI is difficult to get a specific result out of, and the more reliable, repeatable, and complex the results need to be the more difficult the process becomes. AI is easiest and most cost-effective when you don't care about the quality of the result. The moment you do care, things get a lot more complicated. That's where another risk sits.\n\n## You are delegating (even if you don't know it)\n\nIt requires a lot of compute power and — for the moment at least — reliance on third-party services that are often priced based on incremental amounts of usage.\n\nBusiness products built on this technology strike me as particularly susceptible to business and pricing decisions outside a developer's control. AI compute time is inexpensive now, but if and when people get locked into the technology the [inevitable enshittification](https://en.wikipedia.org/wiki/Enshittification) risks degrading many products all at once, putting business plans and probably even lives at risk. Building on AI at the moment feels like becoming an Instagram influencer, or maybe an Uber driver -- you are entirely dependent on the whims of a larger company that is only helpful to you until they gain enough power to exploit you. The _real_ value of AI is not how it makes programming more efficient, it's how it puts compute power under contract once again.\n\n<Pullquote>\n\tThe fact they threaten their staffs with replacement by AI makes arguments that AI is there to\n\thelp, not replace, ring hollow.\n</Pullquote>\n\nThe big names in the Generative AI space have either already established patterns of exploiting consumer dependence on their products or are bankrolled by companies that have established that pattern. We know already that their customer's interests are not their primary concern. The fact that they threaten their staffs with replacement by AI makes arguments that AI is there to help, not replace, ring hollow.\n\nI can't shake the feeling that using GenAI for programming puts independent programming at risk in much the same way that the digital marketplace does an [end-run around long-established ownership rights](https://www.404media.co/the-digital-packrat-manifesto/). People building products and businesses on top of AI services need to be aware that they are integrating companies with already established monopolistic aspirations _much_ more tightly than they might expect.\n\n## Artifacts and process\n\nI'm participating in this blogging exercise because writing is important to me as a thinking tool. The process helps me order my thoughts. Re-reading them again later helps me see where my thinking has changed or been confirmed. I could have asked AI to do it, but getting it to reflect my thoughts accurately would (for me) be much more difficult than just doing the writing. This is important not just for academic and creative writing but for business writing as well -- the act of writing forces processing information in an orderly way, and if you delegate that work to an assistant or a robot, you don't get the advantage of it.\n\nThis is especially true with note-taking. Having an AI take notes for you in a meeting is a bit like hiring someone else to lift weights for you. The notes get written, but the power of note-taking lies in using your head to reprocess and rephrase the information and your actual hand to mechanically write it down. (See also: Sönke Ahrens, [_How to Take Smart Notes_](https://www.soenkeahrens.de/en/takesmartnotes)).\n\nI wouldn't go so far as to say \"it's not the destination, it's the journey\" -- I like getting where I want to be quite a bit. But most work benefits from the human effort involved doing it, not just the fact of it being done. This is true for many tasks that might seem mundane, tedious, or uncreative, and attempts to standardize or automate the process, with AI or otherwise, tends to harm the end product.\n\n---\n\nA year-and-a-half on, I'd have to describe myself as ambivalent, approaching hostile, to generative AI in its current form. It's easy to get garbage out of, but difficult to get a quality artifact. As a work partner I've found it only marginally helpful. It risks extending the reach of monopolists, and robs the people using it of much of the value of doing work in the first place. Most of the value proposition of AI comes not from augmenting human effort -- it's not there yet -- but replacing bothersome humans who might inconveniently care more about their own work than the people who ask them to do it.\n\nBut I still feel like I need to engage with it, because maybe I am wrong. But also, all of us have to live and function in the world as it is, not the world that we wish it to be. I literally cannot afford to shun generative AI, as much as I would like to.","src/content/posts/2025/03/ai-checkin/index.mdx",[73],"./mill.jpg","ac1946ce87b804a4","2025/02/the-last-kindle",{id:75,data:77,body:86,filePath:87,assetImports:88,digest:90,deferredRender:20},{title:78,description:79,date:80,cover:81},"The last Kindle","Confessions of a data-hoarder in the midst of late capitalism.",["Date","2025-02-27T12:24:28.000Z"],{src:82,alt:83,description:84,attribution:85},"__ASTRO_IMAGE_./great-books.jpg","A bookshelf showing a complete set of the Great Books of the Western World, a wooden jack-o-lantern, and a ceramic lamp shaped like a pair of siamese cats. Off to the side you can see a couple of media shelves with variety of DVDs.","Books and other media at my parent's house many years ago. I grew up with the set of Great Books of the Western World here. They made multiple moves with us, including several overseas trips. Most of the volumes were never opened.",{name:32},"import ArticleFigure from \"@components/ContentItems/ArticleFigure/index.astro\";\n\nI bought my last Kindle book on February 12. It was Hunter S. Thompson's _Fear and Loathing in Las Vegas_. I didn't know it was my last Kindle book at the time; shortly afterwards I saw a post on social media from someone saying they went to download one of their books from the website and there was a notice saying Amazon was dropping support for that functionality.\n\nI'm not precisely sure when I bought my first book from Kindle, but I know it was sometime in 2007. It was Richard Dawkins's _The God Delusion_. I've never finished the book because there's a bit in there where Dawkins explains that he doesn't need to _know_ anything about religions other than Islam or Christianity because they are all lies, and at that point I realized he was full of shit and I didn't need to read anything else he had to say either. (Some arguments are a double-edged sword.)\n\n<ArticleFigure\n\timage={import(\"./dozing-cat.jpg\")}\n\talt=\"An orange and white cat sleeps in a box in front of a bookshelf.He is laying on his back, with all four feet curled up.\"\n>\n\tIt's entirely possible that _stuff_ serves as a proxy for those in life who we cannot hold onto,\n\tand as protection against the moment when we'll have to let go. If so, stuff does a poor job.\n</ArticleFigure>\n\nI just checked, and I don't actually have that book backed up anywhere. Which is no great loss. I do\nhave about 1400 others, though, downloaded and indexed and backed up, along with a quarter-century\nof Audible purchases, digital versions of all of my CDs (in FLAC) as well as the digital purchases\nI've made over the years, and a sizable portion of my movie library. That digital movie library is a\nreflection of my physical collection, which literally surrounds me in my office here at home.\n\nAmazon was once a great and innovative force in the ebook world, but long after it became obvious that they were a bad actor and an exploitative company I continued to buy from them. Part of it was ecosystem lock-in, part of it was convenience. Kindle DRM has been pretty easy to work around, and the syncing across multiple devices -- and sometimes with the audiobook version! -- was pretty hard to let go of. But making it more difficult to manage my own copy is a dealbreaker for me, no matter how disruptive or inconvenient it is.\n\nThe collector's mindset is stronger in me than any other concern.\n\n## An opportunity to reflect\n\nThis disruption in my patterns of consumption and hoarding has forced me to think a bit, though. While talking about breaking ties with Kindle, I told a friend of mine: \"If 95% of my media library disappeared, it probably wouldn't make any difference. I just don't know which 5% would.\"\n\nIt's not as easy as weeding these collections out; things that are not important to me today, I've learned, can be very important to me tomorrow. I have a deep concern that I will not be able to lay hands on something again when I want it, and feel a considerable amount of satisfaction when I can produce some oddity from my bookshelf. Libraries and rentals don't do this for me because I have to _give those back._ And the DRMed, digital, licensed, quote-unquote purchase (that isn't really) is even _worse_ because these things disappear silently… and you don't know it's gone until you go looking for it.\n\n<ArticleFigure\n\timage={import(\"./i-collect-art.jpg\")}\n\tposition=\"right\"\n\talt=\"A drawing of a man in profile, with a cut-away skull. Above the head it reads: what do you spend your money on? Text in the brain-case, representing thoughts, says: Blu-rays of movies that I haven't seen with an average IMDb score of 5 or lower. Text in a word bubble, representing speech, says: I collect art.\"\n>\n\tAn entirely too-accurate drawing of me.\n</ArticleFigure>\n\nI'm always disappointed when I go get a movie off my shelf and discover disc-rot has set in, but knowing something in my library has disappeared because someone decided I shouldn't have it anymore is intolerable.\n\nA lot of other collectors know what I am talking about, but I am beginning to recognize this mindset is pathological. Many of these books, albums, and movies I will never engage with again. Many of them I've never engaged with the first time. If they are physical goods, they take up space in my house. I worry about them getting damp, getting damaged, getting sun-bleached. If they are digital goods, storing them costs time and money. I get to worry about hardware failures, redundant backups, databases, delivery systems.\n\nPhysical or not, these goods _weigh_ on me. They take up space in my head, if not my house. They are ether-clutter. It is brain pollution. I need to stop. I need to revisit the media I already own. And yet…\n\nAnd yet.\n\nI pre-ordered a new book today.","src/content/posts/2025/02/the-last-kindle/index.mdx",[89],"./great-books.jpg","8647ea6263ae7d91","2025/03/fairy-tale",{id:91,data:93,body:102,filePath:103,assetImports:104,digest:106,deferredRender:20},{title:94,description:95,date:96,cover:97},"A Fairy-Tale about Capitalism","A story that illustrates what we were all told about capitalism, and most of us still feel to be true. Even if we know better.",["Date","2025-03-12T13:19:30.000Z"],{src:98,alt:99,description:100,attribution:101},"__ASTRO_IMAGE_./sound.jpg","Sunset over a large, mostly still body of water. The sun is already below the horzion, so the water is dark and the sky is fairly dark as well. There are a few wisps of clouds near the horizon that lighten the burt orange of the sky there.","The sun sets over the Albemarle Sound in North Carolina.",{name:32},"import Pullquote from \"@components/ContentItems/Pullquote/index.astro\";\n\nOnce upon a time, a Businessman saw people struggling with a daily task. It doesn't matter what task, but maybe it was \"making a to-do list.\" The Businessman thought to himself, \"I can make the best to-do lists in the world! I should just make my system available to everyone for a price. They will get better to-do lists, and I can buy the Fanciest Keurig Machine In the World, everybody wins!\"\n\nAnd so he did that, and it was a very good way to make to-do-lists, and everyone liked it and the Businessman got rich.\n\n<Pullquote>Everyone liked it and the Businessman got rich. But then…</Pullquote>\n\nBut then one day an Entrepreneur came along and said \"I know how to make better to-do lists, but the Businessman won't make these changes because he is making enough money. But I can make my own version, _and_ I can lower the price. Then I will get at least some of the money the Businessman was making.\n\nAnd the Entrepreneur did, and he took some of the Businessman's customers and got new ones also, who liked that the Entrepreneur's to-do lists used cursive while the Businessman's was boring old Helvetica.\n\n\"Oh no,\" thought the Businessman, \"even though I already have The Fanciest Keurig Machine In the World, there may some day be a fancier one. I will want that, too. I better keep making money.\" So he added a way to change fonts, then he got some of the Entrepreneur's customers and some new ones besides.\n\nAnd so, through competition, the Businessman and the Entrepreneur kept making their products better and better. They both made money, and bought fancier and fancier Keurigs. Meanwhile, everyone else's to-do lists had never been better, and they all lived happily ever after.","src/content/posts/2025/03/fairy-tale/index.mdx",[105],"./sound.jpg","eec7327ed19c0441","2025/06/p5-instance-mode",{id:107,data:109,body:118,filePath:119,assetImports:120,digest:122,deferredRender:20},{title:110,description:111,date:112,cover:113},"P5.js in Instance Mode","Working with the JavaScript implementation of Processing in a way that cooperates with other JavaScript / frameworks is a little tricky.",["Date","2025-06-15T10:59:39.000Z"],{src:114,alt:115,description:116,attribution:117},"__ASTRO_IMAGE_./paw.jpg","A grey cat's paw dangles from above the frame. You can see one small claw.","Cheery the kitten, asleep in her cat tree, gives me a great opportunity to photograph a foot.",{name:32},"import SimpleDemo from \"@components/animations/SimpleDemo/index.astro\";\n\nFor the uninitiated, [P5](https://p5js.org/) is a JavaScript implementation of the [Processing](https://processing.org/) programming language. For the Very Olds among us, Processing is a bit like [Logo](<https://en.wikipedia.org/wiki/Logo_(programming_language)>). That is: a simple language geared towards producing art.\n\nEvery so often I give P5 a poke or two because I find generative art (the non-AI kind) fascinating. Usually I do this on CodePen ([here's a fractal tree](https://codepen.io/elfinjohn/pen/eYxBeEL)), but I really want to roll it into this site.\n\nHowever, P5 is written with the basic learner in mind and there's a lot of stuff set up with the expectation that you're just going to set up a P5-exclusive project and go. It uses a classic mode of JavaScript development, putting everything in a global space and depending on correct sequencing of source-file downloads. Which is nice, but it means the simple approach is hostile to integration with other frameworks, build tools, and JavaScript.\n\nFortunately, P5 has an \"instance mode\" and a `npm` package, but getting these to work required a bit of digging. I don't _think_ either is mentioned in the official documentation. You have to go look up [instance mode](https://github.com/processing/p5.js/wiki/Global-and-instance-mode) in their wiki.\n\n## OK, what I did\n\nThis site is built using [Astro](https://astro.build/), but I think this process is going to be pretty similar if you have some sort of build process. This assumes you have an existing node project.\n\nAdd to your project with [NPM](https://www.npmjs.com/package/p5) or similar; for example: `npm i p5`. You can then import into your source files with `import p5 from \"p5\"`.\n\nI use TypeScript[^1], so at this point my project started barking at me about missing types, but the error message was a new one on me:\n\n```text\nCould not find a declaration file for module 'p5'. '[...]/node_modules/p5/dist/app.js' implicitly has an 'any' type.\n\nThere are types at '[...]//node_modules/p5/types/p5.d.ts', but this result could not be resolved when respecting package.json \"exports\". The 'p5' library may need to update its package.json or typings.\n```\n\nI solved this by adding a separate type project (`npm i --save-dev @types/p5`). It seems to work, but there's probably a better way.\n\nWhen you `import p5 from \"p5\"` you get a class you can instantiate:\n\n```js\nimport p5 from \"p5\"\n\nconst sketch = new p5((p5) => { [...] })\n```\n\nThe constructor accepts a single argument function that you can then use to call all of P5's methods. It will also take a second argument: an element to use as a render target.\n\nHere's a simple, complete example:\n\n```js\nimport p5 from \"p5\";\n\n// For clarity's sake, I like to store the sketch in a variable\nconst sketch = (p: p5) => {\n  p.setup = () => {\n    p.createCanvas(200, 200);\n    p.background(128);\n  };\n\n  p.draw = () => {\n    p.stroke(\"rebeccapurple\");\n    p.strokeWeight(50);\n    p.point(100, 100);\n  };\n};\n\nconst target = document.getElementById(\"Target\");\n\nif (target) {\n  new p5(sketch, target);\n}\n```\n\nThat will get you this:\n\n<SimpleDemo />\n\nIn \"global\" mode, P5 looks for `window.setup()` and `window.draw()` functions. It's not going to find those, so it will then switch to \"instance\" mode and run the `setup()` and `draw()` functions defined on the P5 instance created by the constructor.\n\nThere's no need to kick off the animation. P5 will start automatically, just as it does in global mode.\n\n## Working with Classes\n\nIf you want to follow [Daniel Shiffman's advice](https://natureofcode.com/random/#the-random-walker-class) and turn your animation elements into separate classes, you'll need to pass the P5 instance to your class constructors for them to have access:\n\n```js\nclass Walker {\n\n\tconstructor(p) {\n\t\tthis.x = p.width / 2;\n\t\tthis.y = p.height / 2;\n\t\tthis.p = p;\n\t}\n\n\tshow() {\n\t\tthis.p.stroke(255);\n\t\tthis.p.strokeWeight(10);\n\t\tthis.p.point(this.x, this.y);\n\t}\n\n  [...]\n}\n```\n\nShiffman doesn't do this in his examples because he still has P5 running in global mode, so all of the P5 functions are defined in the global space.\n\nAnyway, I hope this helps someone, somewhere, assuming a search engine chooses to show my website at any point. 🤣\n\n[^1]: I know I said [I don't like TypeScript](/posts/2025/06/i-like-javascript/) but it helps in a complex codebase.","src/content/posts/2025/06/p5-instance-mode/index.mdx",[121],"./paw.jpg","e32a2c9198ad24e8","2025/04/why-scrum-fails",{id:123,data:125,body:134,filePath:135,assetImports:136,digest:138,deferredRender:20},{title:126,description:127,date:128,cover:129},"Why scrum fails","Scrum seems like it works. I've seen it work; it's working for me now. Why do so many people think it's a failure?",["Date","2025-04-30T10:19:30.000Z"],{src:130,alt:131,description:132,attribution:133},"__ASTRO_IMAGE_./new-growth.jpg","A branch of a shrub with a newly sprouted green leaf; the leaf and the branch are encased in ice","New growth cut short by an ice storm, which not only stops the growth but destroys the progress already made.",{name:32},"import Blockquote from \"@components/ContentItems/Blockquote.astro\";\nimport Pullquote from \"@components/ContentItems/Pullquote/index.astro\";\nimport AlertCallout from \"@components/AlertCallout.astro\";\n\nAbout five years ago I joined a team of developers who were already pretty advanced in their use of scrum, and in the past five years they have only become better at it. In my opinion, the team has correctly identified some flaws in the scrum framework and found adaptations to work around those. The other engineering team in the company _also_ uses scrum; they have for many years. They are also good at it, and it is very effective for them.\n\nIn theory, scrum can work anywhere the work is primarily analytical and creative. In practice, many organizations struggle and fail to implement scrum. My previous job at a digital agency _also_ tried a scrum transformation; after several years of trying to make the process work I eventually realized that the business was unlikely to ever succeed at it.\n\nI don't think this is because scrum doesn't work. Scrum just optimizes for delivering a quality product rapidly, and that is not a problem most companies are looking to solve. Worse than that, \"delivering a quality product rapidly\" might actually be _contrary_ to a business's actual goal. This goal -- making boatloads of money for a select few -- rewards work that is just good enough to earn another round of funding or get over a specific competitive hump.\n\n<Pullquote>People should be left alone to do the things they are good at.</Pullquote>\n\nThis puts significant downward pressure on excellence. Instead, it encourages maximizing employee output while minimizing investment. It creates an adversarial relationship between the company and its employees, an environment that cannot tolerate giving scrum teams autonomy or treating engineering teams like partners in an enterprise. But without these, scrum is doomed.\n\nThat's why scrum so often fails.\n\n<AlertCallout>\n\n    This article was largely inspired by Bubs Meany's post [\"Weaponization of Scrum? In MY department? It's more likely than you think…\"](https://undistinguished.com/?myart=20250308010316_potpourri_4359b0e5878d4672) It's a good read for a very different perspective.\n\n</AlertCallout>\n\n## Scrum requires autonomy…\n\nTo understand how and why, we need to revisit scrum values, the parts poor scrum implementations either gloss over or never prioritize. Key to scrum success is the idea that people should mostly be left alone to do the work they are good at. For example, product owners decide what work gets done because they understand the business goals and purpose. But the team doing the work is in control of how work gets done and at what pace.\n\nThese three items from [\"Principles Behind the Agile Manifesto\"](https://agilemanifesto.org/principles.html) come at the notion sideways:\n\n<Blockquote note=\"Principles four, seven, and eight\">\n\n- Business people and developers must work together daily throughout the project.\n- Working software is the primary measure of progress.\n- Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.\n\n</Blockquote>\n\nbut are more explicit here (emphasis mine):\n\n<Blockquote note=\"Principles five, eleven, and twelve\">\n\n- Build projects around motivated individuals. Give them the environment and support they need, and _trust them_ to get the job done.\n- The best architectures, requirements, and designs emerge from _self-organizing teams_.\n- At regular intervals, _the team reflects_ on how to become more effective, then tunes and adjusts its behavior accordingly.\n\n</Blockquote>\n\nPrinciple four argues against fire-and-forget management (work is not directed, it is cooperative). Seven argues against abstract metrics. Eight is explicit about avoiding overwork and disruption. Principles five, eleven, and twelve state directly that the team should be trusted to _manage itself_, identifying both problems and solutions on their own.\n\n[The Scrum Guide](https://scrumguides.org/scrum-guide.html) interprets these principles this way:\n\n<Blockquote note=\"Scrum Values\">\n\n    The Scrum Team and its stakeholders are open about the work and the challenges. Scrum Team members respect each other to be capable, independent people, and are respected as such by the people with whom they work… The decisions that are made, the steps taken, and the way Scrum is used should reinforce these values, not diminish or undermine them.\n\n</Blockquote>\n\nFurthermore,\n\n<Blockquote note=\"The Scrum Team\">\n\n    The Scrum Team is responsible for all product-related activities from stakeholder collaboration, verification, maintenance, operation, experimentation, research and development, and anything else that might be required. They are structured and empowered by the organization to manage their own work.\n\n</Blockquote>\n\nScrum envisions a largely autonomous production team. They work together with, but _crucially not under the control of_, the business side of the operation. It is a collaborative culture, not a top-down authoritarian structure.[^1]\n\n## …that corporations aren't willing to grant\n\nIt seems to me that most scrum failures happen because the organization cannot tolerate this sharing of authority. They refuse to empower and collaborate with the team, retaining command-and-control structures as well as common carrot-and-stick leadership approaches that depersonalize team members and sometimes set them up against each other.\n\n<Pullquote position=\"right\">\n\tScrum without empowerment is not scrum; agile without autonomy is not agile.\n</Pullquote>\n\nExamples of these kinds of behaviors are:\n\n- Tracking individual team member's contributions to velocity\n- Insisting on steadily increasing velocity (\"make the number go up\")\n- _Assigning_ specific scrum tasks or velocity goals to team members\n- Publicly rewarding \"top\" individuals while taking punitive action against \"low\" performers, such as personal improvement plans (PIPs) or culling \"low\" performers on a predictable basis.\n- Assigning specific stories to a sprint without team input, then mandating all stories be completed\n- Planning multiple sprints ahead, and committing the team to producing on that schedule\n- Frequently re-organizing teams[^2]\n\nMany things about Scrum can be tweaked or adjusted, but the freedom for teams to do the work their way is sacrosanct. Scrum without empowerment is not scrum; agile without autonomy is not agile. This is _not_ a surprise to anyone or any business that has gone through basic scrum training; this principle receives considerable attention in both the Certified Scrum Master and Certified Product Owner training materials. Companies adopting scrum but refusing to adapt to scrum's most crucial prerequisite has puzzled me for years.\n\nMy CSM training typically framed the cultural shift required as an issue of trust: stakeholders don't think scrum can actually deliver, so you need to deliver value rapidly and _prove_ the process works. That seems like a reasonable approach if the stakeholders are actually interested in delivering a good product.\n\nBut of course they are, right? We are raised to believe this drive is so fundamental to capitalism it hardly seems right to question it.\n\n<Pullquote position=\"left\">Often the illusion of quality is far more profitable.</Pullquote>\n\nBut this assumption is not true of many companies. Corporate leadership cannot admit this out loud, though, because much of buying and selling rests on the assumption that \"[quality is job one](https://www.youtube.com/watch?v=lKMKZ54HDKY).\"\n\nThe capitalism we are taught to believe in, and is reflected in most professional training, is [fairy-tale capitalism](https://www.thudfactor.com/posts/2025/03/fairy-tale/). We assume our business is trying to compete by creating quality goods and services. Everyone on a production team is therefore dedicated to producing that.\n\nBut for many companies, excellence is only useful for a specific circumstance and a limited period of time. Often the _illusion_ of it is far more profitable. At this point, team self-determination is not only less useful, it actively works against the extraction of wealth and its concentration in the investor class.\n\n## Real-world capitalism\n\nFairy-tale capitalism suggests that good products are ensured through the operations of a free market, and competition helps bring prices down. Real-world capitalism, especially when unconstrained, is more complex. There are many paths to profit, largely created through a parallel marketplace where a business's \"customers\" aren't really the customers. Instead, they are an asset that can be exploited and traded just like any other.\n\n- Entrepreneurs can get rich by creating a company that is attractive to investors; income can be generated through salaries, bonuses, or other pathways paid out of this investment.\n- Or they can get rich by _selling_ that company to a competing company, who will often shut it down\n- Or by draining the company of all value as rapidly as possible, then liquidating its assets.\n- Or they can _sell_ customer data and attention through an advertising marketplace\n- Or any combination of the above\n\nA company's founders may have _once_ cared about the company they started, but in the hands of competition or investors interests shift to exploitation. The work is sure to suffer -- especially if owners are willing to accept the ultimate destruction of the company in exchange for short-term gain.\n\nThese strategies are extractive: the purpose is to squeeze as much extra cash out of the product as possible before exiting entirely. Some small businesses essentially start in an extractive mode, with the founders intending to scale fast, then sell out.[^3] The purpose here is never _really_ to build a product attractive to consumers, it's to build a product whose consumers are attractive to another investor. Long-term, strategic investments in a product (for example, in code stability) are not as useful to the business's real purpose as flashy new features.\n\n<Pullquote>\n\n    Authoritarian, top-down scrum is _fantastic_ at creating an atmosphere of paranoia.\n\n</Pullquote>\n\nIn other extractive modes, the employees are only valuable as a means of keeping the company afloat with as minimal investment as possible, so the maximum amount of profits can be siphoned off into investor pockets.\n\nScrum emphasizes the need for strategic thinking and empowered employees. The former is arguably wasted investment, and the latter is uncomfortably close to unionization. In these circumstances, _functioning_ scrum is not just a waste, it's a threat.\n\nAuthoritarian, top-down scrum, on the other hand, is _fantastic_ at extracting labor output, discouraging long-term thinking, and creating an atmosphere of paranoia.\n\nBest of all, what gets the blame? Scrum.\n\n## What does this mean for scrum practitioners?\n\nScrum practitioners need to come to grips with a few things. The first is that scrum really _isn't_ going to work for many companies. At least, not the way we would hope. I have some suggestions for how to tell if a company is a good candidate for, but those I'll have to save for another post.\n\nWe also need to recognize that scrum boosterism runs smack up against the lived experience of people who've been in bad scrum environments. These concerns are not easily dismissed, and the damage poor implementations have done not just to scrum is significant. If we want to continue working with scrum -- at least, under that terminology -- we have to find a way to address these people where they are.\n\nWe should recognize that scrum is political. Scrum is not just about how to do work well; it's about how to do work safely, collaboratively, and in a manner that respects people as people. Both the agile values and derived scrum values assume that workers are _partners_ in success and deserve to work reasonable hours for fair pay, while actively discouraging abusive and extractive labor practices. As such it has more in common with [a revitalized labor movement](https://ethanmarcotte.com/books/you-deserve-a-tech-union/) than it does management training.\n\n<Pullquote position=\"left\">Scrum is political.</Pullquote>\n\nAgility also stands in stark contrast to hustle culture and the work hard / lean in culture espoused by places like Google, Amazon, and Facebook. The real-world effect of these cultures is to push people towards burnout but without providing any tangible benefit. Many workers have stories of long nights spent and family sacrifices made in the service of company priorities, only to find themselves escorted out of the door when the business needs to juice its earnings report.\n\nFinally, executives _really_ need to be on board with the process, because they have to loosen their grip on how the work gets done. Instead, too many scrum teams end up with the added _responsibility_ of figuring things out on-the-fly, but lack the autonomy to execute. The crucial culture shift that needs to happen is more often at the management level than the team level.\n\nThe agile values are not optional. They are key to making this work, assuming we all agree that quality products delivered in a reasonable time is the definition of \"work.\"\n\nThat's not always a correct assumption.\n\n## Footnotes\n\n[^1]: There's an unfortunate ambiguity in scrum jargon here in the title of \"scrum master.\" Some businesses (not to mention scrum masters) parse the word \"master\" to be equivalent to \"boss,\" but the mastery meant here is mastery of scrum principles and processes, not authority over the team members themselves.\n\n[^2]: One individual I spoke with who says he's _never_ seen functional scrum has primarily worked on scrum teams as a contractor, but companies that rely on contract labor in their scrum teams have already failed at scrum implementation.\n\n[^3]: If you want to avoid getting entangled in such a business, avoid joining any company founded by a self-proclaimed \"serial entrepreneur.\"","src/content/posts/2025/04/why-scrum-fails/index.mdx",[137],"./new-growth.jpg","459cf9a8cf366c19","2025/06/i-like-javascript",{id:139,data:141,body:150,filePath:151,assetImports:152,digest:154,deferredRender:20},{title:142,description:143,date:144,cover:145},"I ❤️ JavaScript","Despite considerable hatred of JavaScript in some corners of the web standards community, JavaScript is still a crucial part of the platform.",["Date","2025-06-12T10:59:39.000Z"],{src:146,alt:147,description:148,attribution:149},"__ASTRO_IMAGE_./meerkat.jpg","A meerkat stands upright on a rock, watching the skies","A meerkat on lookout, standing on top of a rock and watching the sky. Taken at the Greensboro Science Center in North Carolina, May 2025.",{name:32},"A few months ago, an interesting question came across my social media feed.[^1] \"How does a web page that doesn’t weigh 50 KB (compressed) consume 68 MB RAM?\"\n\nAn almost immediate response: \"JavaScript frameworks have led to web developers who can't write HTML. Loading up needless frameworks to support ads and tracking to say 'Hello World!'\"\n\nAn interesting hypothesis; shame there's no way to test that… oh, wait, I can just open up dev tools and discover…\n\nThere was no JavaScript. Or ads. Or, for that matter, images. It was all just HTML and CSS.\n\nThere are a few lessons in this.\n\n1. When someone asks \"why is this happening,\" it's always worth a look before opening your mouth.\n2. Before you sneer at a web developer's work, check to see if you are speaking to that developer.[^2]\n3. Web browsers use a surprising amount of memory just to display even basic web pages.\n\nBut really, many people hate on JavaScript _reflexively_. I've started taking that into account in these conversations. Sometimes I think it's because they don't know JavaScript themselves, and hating it gives them a moral high-ground to defend their continued ignorance.\n\nSometimes I think that's ungenerous.\n\nBut just in case: it's _ok_ to just use HTML and CSS if you are not interested in JavaScript personally. And if you use it sparingly, the web is better for it.\n\nWhat's _not_ OK is this: developing for the web using JavaScript and _not_ understanding HTML and CSS. Those are the foundational technologies, and JavaScript is supposed to cooperate with and augment them. If you're using them to replace or abstract away HTML or CSS [you are doing it wrong](/posts/2024/07/domain-shift/).\n\n---\n\nI think it's important that people place blame where it belongs, and I can't think of an example where the language is at fault. Instead, it's snobbery, laziness, and greed.\n\nFor example:\n\n<dl>\n\t<dt>Snobbery</dt>\n\t<dd>\"CSS isn't programing, and it's a terrible language.\"</dd>\n\t<dt>Laziness</dt>\n\t<dd>\"CSS is so hard to understand. Protect me, JavaScript!\"</dd>\n\t<dt>Greed</dt>\n\t<dd>\"Why should I hire experts? I can replace four of them with one full-stack developer.\"</dd>\n\t<dd>\"New features fast! 10x Developer! Sleep when you're dead! *Vibe code!*\"</dd>\n</dl>\n\nThese human failings lead to a lot of bad code, caused by using the wrong tool, using the tool _incorrectly_, or not slowing down enough to make good decisions or learn how to use the tool.\n\nAnything that takes the place of direct contact with code plays to all three. That includes AI, but also the lengthy list of \"no code\" web building solutions. Figma Sites is the most recent example.\n\nOf these, \"greed\" is the worst; it encourages and rewards the other two. When you go into a company and see terrible JavaScript doing things much better left to other tools, don't think \"ugh, JavaScript.\" Think: what have these poor people been having to put up with?\n\n---\n\nThat's not to say that languages don't deserve criticism. JavaScript has its faults, and there are many places it should not be used, and purposes for which it is not suited. Absent context, using JavaScript is not bad.\n\nMuch the same thing can be said for frameworks; React is old. It served a purpose quite well in 2013, and it has not (perhaps) caught up with what CSS and HTML can do in 2025. But I'll take a well-documented, thoughtful, and carefully maintained framework _every day_ over a bespoke vanilla JavaScript application that has little documentation, no testing, and no internal consistency.\n\nYes, even if it's React.\n\nI do love JavaScript. I write it every day[^3]. But I love it for what it can do that HTML and CSS can't do. I love it for its portability and how accessible it is to learn. I love that you can be functional, object-oriented, or even procedural with JavaScript.\n\nIt works so well with HTML and CSS, though. Use those more. I am running to use new CSS (anchor-based positioning) or HTML (dialogs and popovers).\n\nI love JavaScript, but any day I can replace it with HTML or CSS is a _good day_.\n\n[^1]: I tend not link to Mastodon conversations because they are ephemeral and sometimes involve people who would prefer not to have their content widely indexed or distributed.\n\n[^2]: Based on personal experience, I find it a lot more effective to be _behind_ someone before you talk behind their back.\n\n[^3]: Well, I write Typescript. Which I like less.","src/content/posts/2025/06/i-like-javascript/index.mdx",[153],"./meerkat.jpg","a85ec52960086f89","2023/07/resize",{id:155,data:157,body:166,filePath:167,assetImports:168,digest:170,rendered:171},{title:158,subtitle:159,description:160,date:161,cover:162},"User-initiated element resizing in CSS","How I learned to love the resize property, then hate it again","CSS offers a browser-native way to make elements resizable, but it comes with a lot of limitations.",["Date","2023-07-04T00:00:00.000Z"],{src:163,alt:164,description:165},"__ASTRO_IMAGE_./super-genius.png","Still from a Coyote / Road Runner cartoon. The Coyote holds a business card saying Wile E. Coyote Super Genius","Not every elegant solution is the correct one.","We’ve been working on a project at work that is growing a fairly elaborate user interface heavily informed by desktop applications like Photoshop. What used to be straightforward `div`s now need to be moved around, closed, minimized, and resized.\n\nThe typical way to handle resizing is to create a `mousedown` event handler on a resize control, then listen to subsequent `mousemove` and `mouseup` events. Or, if you’re really on top of things, you can use the newer [`pointer events`](https://caniuse.com/?search=pointer).\n\nOr you can do what I did. I attached a `resize` CSS property to the element that needed resizing.\n\n## Benefits of CSS’s `resize`\n\nThe benefits to this approach were pretty attractive:\n\n### You don’t have to do math\n\nThe math seems straightforward, but there’s a lot to keep track of. You need to pick the right coordinate space, for starters. Pointer events provide `screen`, `client`, `page`, `offset`, and `layer.` These are all subtly different, and it’s likely that none of them will actually map to the coordinate space you need: that of your item’s containing element.\n\nThe `mousemove` and `pointermove` events both expose `movementX` and `movementY` properties, which report the distance the pointer has moved between events. This _seems_ like it would resolve the coordinate space conversion problem, but MDN warns that [we can’t rely on consistent browser implementation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementX).\n\nAnother complexity you need to keep track of is adjusting the math from the _pointer’s_ position and the _actual window bounds_. The pointer is going to fall somewhere inside the resize handle. If you don't control for that you are going to get some weird snapping behavior.\n\nThe CSS `resize` handles all of that for us, which is a relief.\n\n### You don’t have to manage events\n\nAnd there are a lot of events to manage. My process here is to attach `move` and `up` events on `down`, then detach the `move` and `up` events on `up` so they are not continuously firing. And since I am working in a React environment, I also need to clean these events up when the component that owns them is removed and/or re-rendered to avoid memory leaks or rapidly multiplying event listeners handling the same event.\n\n### Browser-native resizing is smooth right out of the box\n\nNative resizing doesn’t seem to be affected by paint / layout sluggishness, so it seems to work faster than handling it myself.\n\n## Drawbacks of CSS’s `resize`\n\nIn short: the CSS `resize` solution is easier, significantly less code, and more performant. What’s not to love? Quite a lot, as it turns out.\n\n### You only get one handle, and you don’t get to choose\n\nThe resize handle is located in the lower right corner of the element you are resizing, so you can really only make the item larger by dragging this handle. There are many typical cases where this works, but there are a lot of instances where this is unhelpful.\n\nTwo that spring immediately:\n\n* The element has any `translate()` transformations applied to it\n* The right and/or bottom edges are at the boundaries of the layout already\n\nThe first thing my designer asked was “can we resize from the lower left corner, too?” This is a perfectly reasonable ask, given that our windows are modeled after application or operating system windows.\n\nIt would be nice to be able to resize from all edges. But at a minimum, I need at least the lower left and lower right corners.\n\n### You can’t delegate an element to be resized\n\nTo apply the CSS resize I had to shrink-wrap all of the containing elements around the specific one I applied the resize element to. That’s because the resized element gets inline “height” and “width” styles applied. This broke my layout logic a bit, which was frustrating.\n\nI thought I could get around this by listening to resizing events and moving those values elsewhere as needed, but…\n\n### There are no resizing events specific to the CSS `resize`\n\nIdeally, we’d have “start,” “stop,” and “resizing” events so I could change behavior or tie other side-effect logic to resizing an element. The CSS resize strategy doesn’t provide any of those. Instead, you need to rely on the [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver). That makes distinguishing between user-driven resizes and resizes that result from other events — minimizing or closing the window, for example, or content size changes — pretty darn tricky. And since the `ResizeObserver` only reports that an element’s size has changed, you still need to interpret “resizing has started” and “resizing has ended” on your own.\n\n### You can’t manage the resize handle’s appearance\n\nThe second thing my designer asked was “can we make that handle larger?” It’s the size and shape that it is. _Maybe_ you can change how it looks through CSS props? If you can, I haven’t found any.\n\n## Back to the drawing board for me\n\nGiven all of these limitations, I’ve had to abandon the native resize. I don’t regret the effort — it’s best to do through CSS and HTML what you can, rather than take control of these behaviors yourself — but the CSS `resize` seems to fit only a narrow use case, and it’s not suitable for other interactive implementations. It _might_ be possible to work around those limitations, but that puts all of the benefits of using the native code at risk.","src/content/posts/2023/07/resize/index.md",[169],"./super-genius.png","068253aae459bc78",{html:172,metadata:173},"<p>We’ve been working on a project at work that is growing a fairly elaborate user interface heavily informed by desktop applications like Photoshop. What used to be straightforward <code>div</code>s now need to be moved around, closed, minimized, and resized.</p>\n<p>The typical way to handle resizing is to create a <code>mousedown</code> event handler on a resize control, then listen to subsequent <code>mousemove</code> and <code>mouseup</code> events. Or, if you’re really on top of things, you can use the newer <a href=\"https://caniuse.com/?search=pointer\"><code>pointer events</code></a>.</p>\n<p>Or you can do what I did. I attached a <code>resize</code> CSS property to the element that needed resizing.</p>\n<h2 id=\"benefits-of-csss-resize\">Benefits of CSS’s <code>resize</code></h2>\n<p>The benefits to this approach were pretty attractive:</p>\n<h3 id=\"you-dont-have-to-do-math\">You don’t have to do math</h3>\n<p>The math seems straightforward, but there’s a lot to keep track of. You need to pick the right coordinate space, for starters. Pointer events provide <code>screen</code>, <code>client</code>, <code>page</code>, <code>offset</code>, and <code>layer.</code> These are all subtly different, and it’s likely that none of them will actually map to the coordinate space you need: that of your item’s containing element.</p>\n<p>The <code>mousemove</code> and <code>pointermove</code> events both expose <code>movementX</code> and <code>movementY</code> properties, which report the distance the pointer has moved between events. This <em>seems</em> like it would resolve the coordinate space conversion problem, but MDN warns that <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementX\">we can’t rely on consistent browser implementation</a>.</p>\n<p>Another complexity you need to keep track of is adjusting the math from the <em>pointer’s</em> position and the <em>actual window bounds</em>. The pointer is going to fall somewhere inside the resize handle. If you don’t control for that you are going to get some weird snapping behavior.</p>\n<p>The CSS <code>resize</code> handles all of that for us, which is a relief.</p>\n<h3 id=\"you-dont-have-to-manage-events\">You don’t have to manage events</h3>\n<p>And there are a lot of events to manage. My process here is to attach <code>move</code> and <code>up</code> events on <code>down</code>, then detach the <code>move</code> and <code>up</code> events on <code>up</code> so they are not continuously firing. And since I am working in a React environment, I also need to clean these events up when the component that owns them is removed and/or re-rendered to avoid memory leaks or rapidly multiplying event listeners handling the same event.</p>\n<h3 id=\"browser-native-resizing-is-smooth-right-out-of-the-box\">Browser-native resizing is smooth right out of the box</h3>\n<p>Native resizing doesn’t seem to be affected by paint / layout sluggishness, so it seems to work faster than handling it myself.</p>\n<h2 id=\"drawbacks-of-csss-resize\">Drawbacks of CSS’s <code>resize</code></h2>\n<p>In short: the CSS <code>resize</code> solution is easier, significantly less code, and more performant. What’s not to love? Quite a lot, as it turns out.</p>\n<h3 id=\"you-only-get-one-handle-and-you-dont-get-to-choose\">You only get one handle, and you don’t get to choose</h3>\n<p>The resize handle is located in the lower right corner of the element you are resizing, so you can really only make the item larger by dragging this handle. There are many typical cases where this works, but there are a lot of instances where this is unhelpful.</p>\n<p>Two that spring immediately:</p>\n<ul>\n<li>The element has any <code>translate()</code> transformations applied to it</li>\n<li>The right and/or bottom edges are at the boundaries of the layout already</li>\n</ul>\n<p>The first thing my designer asked was “can we resize from the lower left corner, too?” This is a perfectly reasonable ask, given that our windows are modeled after application or operating system windows.</p>\n<p>It would be nice to be able to resize from all edges. But at a minimum, I need at least the lower left and lower right corners.</p>\n<h3 id=\"you-cant-delegate-an-element-to-be-resized\">You can’t delegate an element to be resized</h3>\n<p>To apply the CSS resize I had to shrink-wrap all of the containing elements around the specific one I applied the resize element to. That’s because the resized element gets inline “height” and “width” styles applied. This broke my layout logic a bit, which was frustrating.</p>\n<p>I thought I could get around this by listening to resizing events and moving those values elsewhere as needed, but…</p>\n<h3 id=\"there-are-no-resizing-events-specific-to-the-css-resize\">There are no resizing events specific to the CSS <code>resize</code></h3>\n<p>Ideally, we’d have “start,” “stop,” and “resizing” events so I could change behavior or tie other side-effect logic to resizing an element. The CSS resize strategy doesn’t provide any of those. Instead, you need to rely on the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\"><code>ResizeObserver</code></a>. That makes distinguishing between user-driven resizes and resizes that result from other events — minimizing or closing the window, for example, or content size changes — pretty darn tricky. And since the <code>ResizeObserver</code> only reports that an element’s size has changed, you still need to interpret “resizing has started” and “resizing has ended” on your own.</p>\n<h3 id=\"you-cant-manage-the-resize-handles-appearance\">You can’t manage the resize handle’s appearance</h3>\n<p>The second thing my designer asked was “can we make that handle larger?” It’s the size and shape that it is. <em>Maybe</em> you can change how it looks through CSS props? If you can, I haven’t found any.</p>\n<h2 id=\"back-to-the-drawing-board-for-me\">Back to the drawing board for me</h2>\n<p>Given all of these limitations, I’ve had to abandon the native resize. I don’t regret the effort — it’s best to do through CSS and HTML what you can, rather than take control of these behaviors yourself — but the CSS <code>resize</code> seems to fit only a narrow use case, and it’s not suitable for other interactive implementations. It <em>might</em> be possible to work around those limitations, but that puts all of the benefits of using the native code at risk.</p>",{headings:174,localImagePaths:207,remoteImagePaths:208,frontmatter:209,imagePaths:225},[175,179,183,186,189,192,195,198,201,204],{depth:176,slug:177,text:178},2,"benefits-of-csss-resize","Benefits of CSS’s resize",{depth:180,slug:181,text:182},3,"you-dont-have-to-do-math","You don’t have to do math",{depth:180,slug:184,text:185},"you-dont-have-to-manage-events","You don’t have to manage events",{depth:180,slug:187,text:188},"browser-native-resizing-is-smooth-right-out-of-the-box","Browser-native resizing is smooth right out of the box",{depth:176,slug:190,text:191},"drawbacks-of-csss-resize","Drawbacks of CSS’s resize",{depth:180,slug:193,text:194},"you-only-get-one-handle-and-you-dont-get-to-choose","You only get one handle, and you don’t get to choose",{depth:180,slug:196,text:197},"you-cant-delegate-an-element-to-be-resized","You can’t delegate an element to be resized",{depth:180,slug:199,text:200},"there-are-no-resizing-events-specific-to-the-css-resize","There are no resizing events specific to the CSS resize",{depth:180,slug:202,text:203},"you-cant-manage-the-resize-handles-appearance","You can’t manage the resize handle’s appearance",{depth:176,slug:205,text:206},"back-to-the-drawing-board-for-me","Back to the drawing board for me",[],[],{title:158,subtitle:159,date:210,categories:211,tags:213,description:160,cover:214,egbert:215},["Date","2023-07-04T00:00:00.000Z"],[212],"CSS","post",{src:169,alt:164,description:165},{titles:216,summaries:220,sentiment:224},[217,218,219],"Exploring CSS's Resize Property: Benefits and Drawbacks","CSS's Resize Property: A Blessing and a Curse","Unveiling the Pros and Cons of CSS's Resize Property",[221,222,223],"Discover the benefits and drawbacks of using CSS's resize property for handling element resizing in your web projects.","Learn about the advantages and limitations of CSS's resize property and its impact on user interface design.","Uncover the pros and cons of incorporating CSS's resize property into your web development workflow.","The sentiment of the post is mixed. The author initially highlights the benefits of using CSS's `resize` property for handling element resizing, such as avoiding complex math and event management, as well as achieving smooth resizing. However, they also discuss the drawbacks, including the inability to choose the resize handle's location, the need to shrink-wrap containing elements, the lack of specific resizing events, and the inability to customize the appearance of the resize handle. Despite the limitations, the author acknowledges the value of CSS and HTML in handling behaviors whenever possible. Overall, the post provides a balanced assessment of the CSS `resize` property.",[],"2023/06/article-typography",{id:226,data:228,body:243,filePath:244,assetImports:245,digest:247,deferredRender:20},{title:229,subtitle:230,description:231,date:232,cover:233},"Article typography","Font size, line height & line width","Three CSS typography properties to improve your site’s readability",["Date","2023-06-17T00:00:00.000Z"],{src:234,alt:235,description:236,attribution:237},"__ASTRO_IMAGE_./original-movable-type.jpg","A page set with moveable lead type","What we used to do with metal slugs and spacers, we do today with HTML and CSS.",{name:238,link:239,license:240},"Purdman1 / Flickr.","https://www.flickr.com/photos/purdman1/2875431305/",{name:241,link:242},"CC BY 2.0","https://creativecommons.org/licenses/by/2.0/","import AlertCallout from \"@components/AlertCallout.astro\";\nimport ArticleFigure from \"@components/ContentItems/ArticleFigure/index.astro\";\nimport ExampleScanLength from \"./ExampleScanLength.astro\";\nimport ExampleLineHeight from \"./ExampleLineHeight.astro\";\n\n“Thud factor” is academic slang for how loud your thesis sounds when it’s thrown downstairs. When I first registered this domain in (let me check…) August of 2000 (‼️) my intent was to fill up the site with a whole bunch of text. I did actually do that once upon a time, but one thing I never really got right was the typography.\n\nThat’s unfortunate because getting the basics of typography right is not that difficult and there are quite a few excellent examples to emulate. I am still learning, still working on this site. But here’s some stuff about the basics.\n\n## What to focus on first\n\nTypography is a true _Alice_-sized rabbit-hole and getting distracted by minutia is a real risk. But you can get most of what you need to improve readability right away by working with three basic values. These are:\n\n- Font size: the vertical size of the letters\n- Line width: how many letters can fit on a line\n- Line height: the combined font size and the distance between the lines.\n\nNotice that the font choice — the fun decision — isn’t in this list. It’s important, but it’s not vital. People can read comfortably if you use the default type and get font size, line length, and line height right. But it doesn't matter how awesome the font is if you get those three details of using the font wrong.\n\nNot that getting it right is hard! Once you know where to focus first, you can start with reasonable recommendations from centuries of typography best practices. Then, use your own eyeballs to tweak things at the margins until you’re happy.\n\nLet’s talk about those three basic values, then.\n\n## Font size\n\nFont size is a good place to start because it affects line length. The two important questions to ask about font size in web development is “how big?” and “what unit?” My typical practice is to set the size as a percentage of the default browser size. You can do this literally with percentages in the root element…\n\n```css\n::root {\n\tfont-size: 120%;\n}\n```\n\nor in CSS selectors using the `rem` unit…\n\n```css\np {\n\tfont-size: 1.2rem;\n}\n```\n\nThe former sets the _default_ size of fonts throughout the document to 120% of the browser default. The latter sets the font size of the selector’s content to 120% of the root font size. Changing the root font size is a real sledgehammer of a tool, though — anything else that depends on `rem` or `em` sizing will _start_ from this higher or lower value.\n\n<AlertCallout>\n\tRead more about the [root element](https://developer.mozilla.org/en-US/docs/Web/CSS/:root) and\n\t[rem unit](https://blog.logrocket.com/using-em-vs-rem-css/).\n</AlertCallout>\n\nA lot of people suggest sticking with the default font size for your main article content. That’s a good place to start, but don’t feel shy about bumping it up a bit. Many of my favorite web sites do, too.\n\n### What about those other units?\n\nIf you’re used to using word processors or doing print design, you might be more accustomed to using point size. A “point” is a unit of measurement common in traditional printing. 12 points make a “pica,” and there are 6 picas to an inch. This is fine in style rules intended for print media, and you can certainly use them in your print stylesheets like so:\n\n```css\n@media print {\n\tp {\n\t\tfont-size: 12pt;\n\t}\n}\n```\n\nIn CSS-land, points and units like `pt`, `in`, `mm` are called “absolute units” and are not particularly useful in the screen context. [Elad Shechter explains why at _Smashing Magazine_](https://www.smashingmagazine.com/2021/07/css-absolute-units/). Simply, though, browsers don’t know how _physically_ large your monitor is, so they can’t represent those sizes accurately.\n\nWhat about pixels? Well, they _were_ the universal screen unit. Computed values in your web development panel often translate to pixel units for this reason. But the typical size and meaning of “pixel” has changed a lot over the years.\n\nOne pixel was one screen dot for most people for a long time. As part of the desktop publishing revolution, early Mac displays intentionally made `1px = 1pt = 1/72in`. Later, as display technology improved and screen dots could be made smaller, the rule of thumb became `1px = 1/96in`. Now, with some displays running between 220 to 300 pixels per inch, it's not a reliable measure of size anymore.\n\nNow, the W3C defines both “device pixels” and “reference pixels” — with the CSS `px` unit theoretically comprising [the reference pixel](https://www.w3.org/TR/css-values-3/#reference-pixel). In practice, display manufacturers size pixels up and down pretty fluidly these days.\n\nFor reference, the default font size is typically (although not always!) set to `16px`.\n\n## Line width\n\nLine width (or “scan length”) is the horizontal distance between the start and the end of a line. It is the second most important typographic decision you can make.\n\nAs you read, you can only focus on a few letters at a time. Humans like to read without moving our heads from side-to-side, so line length has to be short enough for us to read something by rotating our eyeballs. Make this distance too long or too short and people’s eyes tire quickly. Long line lengths mean more extreme rotation of the eyes until the neck is finally involved. Short lines mean rapid back-and-forth movement, because each line read requires a round trip.\n\nThe good news here is that the comfortable range is actually pretty wide. 50 to 75 characters per line is a good rule of thumb, and there's a fair amount of wiggle room at the extremes. Because we’re trying to take physical eye travel into account, the larger your font the shorter you want your line length to be, and vice-versa.\n\n<ArticleFigure>\n\t<ExampleScanLength slot=\"fig\" />\n\tThese three paragraphs have the same line length but different font sizes. Pay attention to how\n\tthe muscles in your eyes feel as you read them. Do you notice any other impressions you get from\n\ttext set large and short versus small and long?\n</ArticleFigure>\n\nRemember that this rule applies _only_ to large blocks of text like article content. Other bits of text — headlines, captions, and so forth — serve different purposes, and thus merit different guidelines.\n\n## Line height\n\nLine height is the distance between lines of text. Remember how your eye has to both backtrack across a line of text _and_ move to the next one at the same time? This trip is an excellent opportunity for the brain to get disoriented.\n\n<ArticleFigure>\n\t<ExampleLineHeight slot=\"fig\" />\n\tThese three paragraphs have the same font size but different line heights. Two of them feel really\n\tawful to me, only one seems comfortable. Which one seems best to you, again in the muscles of your\n\teyes? Does the difference in line height change any other impressions you have of the text?\n</ArticleFigure>\n\nEver find yourself suddenly reading one or two lines down in the middle of a line? That might be because the line-spacing was too cramped. On the other extreme, spreading text out involves eye muscles even more. This doesn’t just make it difficult to keep your place, it’s also physically tiring.\n\nFor article text, comfortable distances seem to be between `1.4` and `1.6`. When you set line-height in CSS without a unit, line-height is a multiplier of the font size.\n\n```css\np {\n\tfont-size: 1.3rem;\n\tline-height: 1.6;\n}\n```\n\n## Line height on the web\n\nIn traditional typesetting, line height is measured from the top of one line of text to the top of the next. The metal letter slugs in movable type were the font height, and the distance between lines could be increased by narrow strips of wood or lead. This extra space between the bottom of the type slug and the next row of type was called “leading” (pronounced “Led” as in Zeppelin).\n\nIn traditional typesetting, then, if you have 12pt type with 6pt leading, the type goes at the top and the extra 6pts is tacked on below it.\n\n<figure class=\"text-figure\">\n\t<div style=\"margin-top: 1rem; font-size: 2rem; line-height: 2; background-image: repeating-linear-gradient(to bottom, hsl(200deg 100% 65%) 0, hsl(200deg 100% 100%) 1px, hsl(200deg 100% 100%) 2rem, hsl(200deg 100% 65%) 2rem, hsl(200deg 100% 65%) 4rem); padding-bottom: 1px;\">\n\t\t<div style=\"position: relative; top: -1rem;\">\n\t\t\t<p>Waltz, nymph, for quick jigs vex Bud.</p>\n\t\t\t<p>Sphinx of black quartz, judge my vow.</p>\n\t\t</div>\n\t</div>\n\t<figcaption>Text with leading between the text rows (traditional print).</figcaption>\n</figure>\n\nFor reasons that are not entirely clear to me but probably have to do with making programming browsers easier, CSS abandoned that convention long ago. In browsers, the extra space we call “leading” is split between the top and bottom of a text row. that means 1rem type with 0.5rem leading becomes 0.25rem at the top, 1rem of text, and the other 0.25 rem at the bottom.\n\n<figure class=\"text-figure\">\n\t<div style=\"margin-top: 1rem; font-size: 2rem; line-height: 2; background-image: repeating-linear-gradient(to bottom, hsl(200deg 100% 65%) 0, hsl(200deg 100% 65%) 1rem, hsl(200deg 100% 100%) 1rem, hsl(200deg 100% 100%) 3rem, hsl(200deg 100% 65%) 3rem, hsl(200deg 100% 65%) calc(4rem - 1px), hsl(200deg 100% 100%) 4rem);\">\n\t\t<p>Waltz, nymph, for quick jigs vex Bud.</p>\n\t\t<p>Sphinx of black quartz, judge my vow.</p>\n\t</div>\n\t<figcaption>Text centered in the line-height (CSS).</figcaption>\n</figure>\n\nIt becomes a mathematical and strategic exercise any time you want to align a border, photo, or other block of something with the top of a line of text. Tell the browsers to line these items up with their tops, and the browser will align the top of an image (for example) and the top of the line-height for the text. But the text itself doesn't actually start at that point unless the line-height is `1`.\n\n<figure class=\"text-figure\">\n\t<blockquote style=\"line-height: 2; padding-top: 0; padding-bottom: 0; border-left: 2px #000 solid; padding-left: .8rem; margin-left: 0\">\n\t\t<p>\n\t\t\t“It was much pleasanter at home,” thought poor Alice, “when one wasn’t always growing larger\n\t\t\tand smaller, and being ordered about by mice and rabbits. I almost wish I hadn’t gone down\n\t\t\tthat rabbit-hole—and yet—and yet—it’s rather curious, you know, this sort of life!\n\t\t</p>\n\t</blockquote>\n\t<figcaption>\n\t\tA blockquote with a simple border on the left. The text area and the border on the left are the\n\t\tsame height, but the text's line-height adds extra space at the top and the bottom — making the\n\t\tborder longer than it has to be.\n\t</figcaption>\n</figure>\n\nTo optically align these items, you either have to shift the text _up_ slightly from its natural position or shift the other thing down. Which one you choose and how you do it depends on the specific circumstances.\n\nOne way of doing this is by applying margins or negative margins to some of the elements, depending on how the layout works. Shifting the text is the strategy I used in the figure below.\n\n<figure class=\"text-figure\">\n\t<blockquote style=\"line-height: 2; border-left: 2px black solid; padding-block: 2px; padding-left: .8rem; margin-left:0;\">\n\t\t<p style=\"margin-bottom: calc(-.5em - 3px); margin-top: calc(-.5em - 4px);\">\n\t\t\t“It was much pleasanter at home,” thought poor Alice, “when one wasn’t always growing larger\n\t\t\tand smaller, and being ordered about by mice and rabbits. I almost wish I hadn’t gone down\n\t\t\tthat rabbit-hole—and yet—and yet—it’s rather curious, you know, this sort of life!\n\t\t</p>\n\t</blockquote>\n\t<figcaption>\n\t\tHere, negative margins are used on the paragraph inside the blockquote to move the extra line\n\t\theight out of the containing element.\n\t</figcaption>\n</figure>\n\nMaybe someday we’ll have an easier way to adjust the line height to something more traditional, but for now aligning items with vertical text boundaries remains both complicated and situational.\n\n## How I chose my values\n\nTypography is a discipline and it requires both a design eye and careful attention to detail. Fortunately, setting large blocks of text isn’t an activity that rewards novelty, so we can cheat a little bit.\n\nOK, we can straight-up steal.\n\nIn this case, I went to [The Verge](https://www.theverge.com/) because I liked how their articles looked. I swiped their font size, line width, and line height values. Once I chose my font, I tinkered a little with those settings.\n\nThere’s no shame in that — none of these things are trademarked, and are in fact based on conventional wisdom from centuries of typesetters beforehand. There's no reason you can’t get a leg up by looking at good examples.\n\n## What we didn’t cover, and where you can find it\n\nThere are lots of additional small choices you can make that improve readability. Most CSS developers are aware that you can choose between `text-align: left` and `text-align: justify`. The former gives you a ragged right text block with no hyphenation unless absolutely necessary, while the latter uses a combination of word spacing and hyphenation to give an even right edge.\n\nBut did you know you can choose other hyphenation strategies? Combining `text-align: left` with `hyphens: auto` gives you a slightly less ragged right by allowing more hyphenation. Using [`hyphenate-limit-chars`](https://drafts.csswg.org/css-text-4/#propdef-hyphenate-limit-chars) gives you even more fine-grained control.\n\nFor much more information on typography from a real expert, check out [The Elements of Typographic Style Applied to the Web](http://webtypography.net/) by Richard Rutter.","src/content/posts/2023/06/article-typography/index.mdx",[246],"./original-movable-type.jpg","f5be77246283b33d","2023/06/copilot",{id:248,data:250,body:259,filePath:260,assetImports:261,digest:263,deferredRender:20},{title:251,subtitle:252,description:253,date:254,cover:255},"A month (or so) with GitHub Copilot","Your plastic pal who’s fun to be with","Some thoughts on GitHub Copilot, the AI-powered code assistant.",["Date","2023-06-20T00:00:00.000Z"],{src:256,alt:257,description:258},"__ASTRO_IMAGE_./airplane.jpg","The cockpit from Airplane the movie. Left to right, the Autopilot, Elaine, and Ted.","With more experience, Copilot feels less like a different intelligence and more like an inflatable replacement human.","import ArticleImage from \"@components/ContentItems/ArticleImage/index.astro\";\n\nI’ve been using Copilot for a few weeks and have thoughts. It’s been helpful in small places, unhelpful in larger ones, and sometimes in the way. In fact, as I write this blog post it is in the way quite a lot.\n\nBefore we get too far in, I’d like to direct your attention to Frederick Brooks’s 1987 essay [No Silver Bullet: Essence and Accident in Software Engineering](https://ieeexplore.ieee.org/document/1702388). Brooks says software development has sped up quite a lot, but attributes this to tools that help us write and debug code more quickly. He said we were beginning to reach the level of diminishing returns from these mechanical aids.\n\nSome things have indeed become faster since then, but I think he was probably right. The big speed gains from tooling were made long ago.\n\nAny significant improvement software production speed, he argues, would have to come from advancements in how we think about software and what it is we are trying to build. That is, it has to come in the analysis stage, when we are asking WTF we are doing anyway.\n\n> The hardest single part of building a software system is deciding precisely what to build. No other part of the conceptual work is so difficult as establishing the detailed technical requirements, including all the interfaces to people, to machines, and to other software systems. No other part of the work so cripples the resulting system if done wrong. No other part is more difficult to rectify later.\n>\n> <cite>\n> \t— Frederick P. Brooks\n> \t<br />\n> \tNo Silver Bullet: Essence and Accident in Software Engineering\n> </cite>\n\nCopilot is tooling, and imprecise tooling at that. Although it’s better than [IntelliSense](https://code.visualstudio.com/docs/editor/intellisense) at extrapolating what you need to do next, it only has a small part of the picture.\n\n<figure>\n\t<ArticleImage\n\t\timage={import(\"./suggestion.png\")}\n\t\talt=\"Clip of a suggestion from co-pilot while writing this blog post. Text in the caption.\"\n\t/>\n\t<figcaption>\n\t\tSometimes it doesn’t have any part of the picture. Here, co-pilot tries to write the caption for\n\t\tthis post’s cover photo. It suggests completing “the cockpit from Airplane the movie” with the\n\t\tcaption “I am serious. And don’t call me Shirley.” That doesn’t match the image at all.\n\t</figcaption>\n</figure>\n\n## Something that works: refactoring React\n\nI am genuinely excited about this. For my money, this is the best thing Copilot does. It’s pretty close to perfect and it gets rid of a lot of drudgery. Whatever I say later, I want you to keep in mind: this behavior is worth the price of entry.\n\nCopilot can tell when you are refactoring code, and it can speed that process up by _a lot_.\n\nFor example, if I have a React element like this…\n\n```jsx\nconst MyComponent = () => {\n\treturn (\n\t\t<div>\n\t\t\t<li className=\"red\">One</li>\n\t\t\t<li className=\"blue\">Two</li>\n\t\t\t<li className=\"green\">Three</li>\n\t\t</div>\n\t);\n};\n```\n\n…and I decide I want to break those `li` elements into their own components…\n\n```jsx\nconst MyLIComponent = ({ color, children }) => {\n\treturn <li className={color}>{children}</li>;\n};\n```\n\nCopilot will tumble to what I am doing pretty quickly. In fact, it completed my code correctly in the example above after I typed the first `li`. And it did it exactly the way I would have done it.\n\nThat’s not all. After doing that, it figured out I want to replace the old `li` elements with my new component. Watch me just hit tab here in the video as Copilot suggests handle the copy / paste / change values routine.\n\n<figure>\n\t<video controls width=\"720\">\n\t\t<source src=\"/video/refactor.mp4\" type=\"video/mp4\" />\n\t\t<p>\n\t\t\tYour browser doesn't support HTML5 video. Here is a{\" \"}\n\t\t\t<a href=\"copilot.mp4\">link to the video</a> instead.\n\t\t</p>\n\t</video>\n\t<figcaption>\n\t\tCopilot understands what I am trying to do and helps me out along the way.\n\t</figcaption>\n</figure>\n\n```jsx\nconst MyComponent = () => {\n\treturn (\n\t\t<div>\n\t\t\t<MyLIComponent color=\"red\">One</MyLIComponent>\n\t\t\t<MyLIComponent color=\"blue\">Two</MyLIComponent>\n\t\t\t<MyLIComponent color=\"green\">Three</MyLIComponent>\n\t\t</div>\n\t);\n};\n```\n\nThis is a pretty trivial example, but Copilot has done this multiple times with much more complex components. It’s pretty sweet, and I’ve wished my code editors could do this for years. I’m glad it’s finally here.\n\n## Something that’s less good\n\nWith CSS, the results are rather more dire. Here, I want to make a div that covers a parent container. Often we do this when we want to put an overlay over some content. Copilot’s first shot is this:\n\n```css\n.coverContainer {\n\tposition: relative;\n\twidth: 100%;\n\theight: 100%;\n\toverflow: hidden;\n\tbackground-color: #000;\n}\n```\n\nThat … might work. But I hope you didn't want to put anything else in that block, because the relative positioning here fills the container, crowding everything instead. With a gentle hint to use absolute positioning, Copilot suggests the following:\n\n```css\n.coverContainer {\n\tposition: absolute;\n\twidth: 100%;\n\theight: 100%;\n\toverflow: hidden;\n\tbackground-color: #000;\n}\n```\n\nBetter, but still wrong. Here’s the thing. When containers are positioned absolutely, they start where they normally would. If `.coverContainer` isn’t the first dom element, it’s going to be pushed down from the parent container’s boundaries. We have to specify more coordinates than just that.\n\n```css\n.coverContainer {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\twidth: 100%;\n\theight: 100%;\n\toverflow: hidden;\n\tbackground-color: #000;\n}\n```\n\nCopilot read my last sentence and suggested top and left coordinates. A real improvement! It is, at least, approaching a useful overlay div. But there’s a much easier way to handle this now, and it’s been around for a while.\n\n```css\n.coverContainer {\n\tposition: absolute;\n\tinset: 0;\n\toverflow: hidden;\n\tbackground-color: #000;\n}\n```\n\n`inset` is a newer prop, but there are a lot of folks still doing the old `top / left / height / width` trick. Or, for that matter, `top / right / bottom / left.`\n\nThis is a concern I have with Copilot. Since Copilot has been trained on a heck of a lot of code. I assume much of that code is old. Unwary or inexperienced developers leaning too heavily on Copilot could end up perpetuating a lot of bad practice. This is _especially_ true, I fear, in the case of CSS — which is often written by people who haven’t taken it seriously enough to learn it properly. With Large Language Models, as most things, it’s garbage in, garbage out.\n\nThis is the problem with prompt-based software development. You have to ask for what you want. And, as Brooks pointed out, knowing what you want is tricky and often requires several rounds of conversations and iterations. Copilot is a better partner than none in this process, but humans still contribute far more — either as pair programmers or in code reviews. I don’t want Copilot reading or judging my code without too much careful guidance.\n\n<figure>\n\t<ArticleImage\n\t\timage={import(\"./suggestion-2.png\")}\n\t\talt=\"Clip of another suggestion from co-pilot while writing this blog post, text in the caption.\"\n\t/>\n\t<figcaption>\n\t\tCopilot trying to write my blog post for me: “I’m not going to talk about the controversy around\n\t\tCopilot, or the licensing issues, or the fact that it’s not really an AI. I’m going to talk\n\t\tabout how it works, how I use it, and what I think it’s good for.”\n\t</figcaption>\n</figure>\n\n## What does this mean for developers?\n\nCopilot wants me to say the following after typing the above heading. It clearly has some difficulty reading the room.\n\n<blockquote>\n\tI think Copilot is a great tool for developers. It’s a great way to learn new languages and\n\tframeworks. It’s a great way to get a little help when you’re stuck.\n</blockquote>\n\nCopilot is smarter in some ways than my older code-completion tools, but IntelliSense — which relies on indexing the codebase — is still better at suggesting the right thing. Copilot will sometimes suggest the right thing, and do so with rather creepy precision. But in other cases, it will do precisely the wrong thing. Or leap to weird conclusions.\n\nSometimes those suggestions interfere with my other code-completion tools. When handling an import, IntelliSense is very solid at finding the right paths and letting me know if what I am trying to import is even there. More often than not, Copilot will try to import from some library I haven’t even added to my dependencies yet.\n\nThis makes the coding somewhat less fluid — I am frequently pausing to see if Copilot has made a sensible suggestion or if it slept its way through web developer boot camp. I am not at this point _actually_ afraid of Copilot being better at my job than me. It is a fancy autocomplete, one that can solve more difficult problems than the old tools, but the tradeoff is that it’s less reliable.\n\nI don’t want to discourage anyone from trying it out — I _like_ Copilot most of the time. You may very well find it useful. But as Brooks suggests, it’s pretty much a marginal improvement on software development speed. Better tools aren’t going to help us much. What we need are better processes and better ways to come to a shared understanding of what we are trying to accomplish. Interestingly, what Brooks suggests looks less like a simulated coding partner and more like agile practice.","src/content/posts/2023/06/copilot/index.mdx",[262],"./airplane.jpg","1141efb6b88da65a","2023/06/image-of-a-cat",{id:264,data:266,body:274,filePath:275,assetImports:276,digest:278,deferredRender:20},{title:267,subtitle:268,description:269,date:270,cover:271},"Here is a cat picture","Meditations on the IMG tag","John discusses the history of HTML’s image tag.",["Date","2023-06-05T00:00:00.000Z"],{src:272,alt:273},"__ASTRO_IMAGE_./cat.jpg","Cato, an orange and white cat, looking at the camera and loudly meowing.","import ArticleImage from \"@components/ContentItems/ArticleImage/index.astro\";\n\nHere is a picture of my cat, Cato. He’s a very good cat except for the two hours prior to dinnertime. But he’s not the reason I am writing this — I am writing it to talk a bit about images in HTML.\n\nIt’s hard to believe, but the earliest version of the Web did not include a way to post an image. In fact, the original suggestion from [Marc Andreessen](https://en.wikipedia.org/wiki/Marc_Andreessen)) met with a lot of opposition.\n\n> Some worried that arbitrary tags opened the floodgates, and it wouldn’t be long before we had an element for every media type, like an aud tag for audio (or a video tag maybe? That would be just too much)…\n>\n> Tim Berners-Lee, the creator of the World Wide Web, was hesitant too. He suggested that Andreessen instead use the anchor tag to display inline images instead of creating something entirely new. This would allow users to set their own preferences for how images should be handled. <cite>from [The Origin of the IMG tag](https://thehistoryoftheweb.com/the-origin-of-the-img-tag/)</cite>\n\nMarc wasn’t going to wait around. Later that year he shipped NCSA Mosaic with support for the still-controversial `<img>` tag.\n\nThis decision had two consequences. First, it put the web on the road to being a _designable_ medium, which gave the web — and the internet — broad appeal. When I returned to college from my co-op semester in January of 1994 and found Mosaic on my re-imaged computer science workstation, it was the inline images that grabbed my attention and created my entire career.\n\nSecond, it set the precedent of different browsers having support for custom tags. This was less awesome — when Microsoft jumped into the market with their own Internet Explorer browser they added their own extensions, vastly complicating web development for decades. That’s a situation we still haven’t quite put behind us.\n\nI say all of that to say this: showing images on the web is actually pretty complex — more so now than it used to be. While the original `<img>` tag shipped in 1994 was straightforward — one source file, one image — we can provide multiple image sizes for the browser to choose from based on the viewing conditions. With the newer `<picture>` tag, we can _also_ specify images in different aspect ratios for the same slot. That means we could show square images when browser windows are small, but large landscape-oriented images when browser windows are large.\n\nThese tools have been around for awhile, but they are complex enough that I don’t often code them by hand; I set them up once in a content management system like Drupal or Wordpress and then stop thinking about them. For this site, I could lean on [eleventy’s several excellent tools](https://www.11ty.dev/docs/plugins/image/#use-this-in-your-templates), but I am coding my own. I am hoping doing so will strengthen my understanding of how the modern image tags work, but as an extra measure I will probably blab about it here as well.","src/content/posts/2023/06/image-of-a-cat/index.mdx",[277],"./cat.jpg","b4abe62cb3f1a584","2023/06/this-is-an-alpha",{id:279,data:281,body:285,filePath:286,digest:287,rendered:288},{title:282,description:283,date:284},"This is an alpha","The Thudfactor First Post",["Date","2023-06-04T00:00:00.000Z"],"It's been a long time and several false starts, but I think now is the time for me to return to blogging. If you're reading this and wondering, <q>hey, is this the Thudfactor I used to read way back in 2005</q> — yes, it is. Also, there are probably only ten of you. So welcome back.\n\nI largely gave up blogging about fourteen years ago. I had a number of reasons. The biggest reason was that I had a small child, and the small child was not particularly interested in being quiet so I could write. A near second was that social media -- I’m speaking here largely of Facebook and Twitter -- got me a lot more <q>engagement</q> than my blog ever did.\n\nThe third reason was I'd had a crisis of confidence. I wrote a lot about politics. I used to think I could change people’s minds if I wrote well enough, but I don’t think so anymore.\n\nI’m going to try not to write about politics this time.\n\nMy current intention is to use this space to write about things I learn, primarily for my own benefit. This approach has worked well for me over at [FilmHydra](https://www.filmhydra.com), which serves more or less as a long form film diary. Here I will talk a lot about web development, agile processes, and … well, anything else I am bouncing around in my head.\n\nThis incarnation of _Thudfactor_ (there have been many) was created using [Eleventy](https://www.11ty.dev/). To build it, I leaned pretty heavily on Raymond Camden’s [A Complete Guide to Building a Blog with Eleventy](https://cfjedimaster.github.io/eleventy-blog-guide/guide.html). I found _that_ thanks to [11tybundle.dev](https://11tybundle.dev/). It was good for a leg up, but I am already full of ideas on how to take this further. I’m keeping a running list of [resources I found helpful](/pages/helpful) here as well.\n\nHello, or hello again — as the case may be. Things look a little rough right now, but it’ll get better. If you want to keep track, I think I've got an old-school RSS feed up there somewhere. Or you can [follow me on Mastodon](https://hachyderm.io/@thudfactor).","src/content/posts/2023/06/this-is-an-alpha/index.md","be526edf45941833",{html:289,metadata:290},"<p>It’s been a long time and several false starts, but I think now is the time for me to return to blogging. If you’re reading this and wondering, <q>hey, is this the Thudfactor I used to read way back in 2005</q> — yes, it is. Also, there are probably only ten of you. So welcome back.</p>\n<p>I largely gave up blogging about fourteen years ago. I had a number of reasons. The biggest reason was that I had a small child, and the small child was not particularly interested in being quiet so I could write. A near second was that social media — I’m speaking here largely of Facebook and Twitter — got me a lot more <q>engagement</q> than my blog ever did.</p>\n<p>The third reason was I’d had a crisis of confidence. I wrote a lot about politics. I used to think I could change people’s minds if I wrote well enough, but I don’t think so anymore.</p>\n<p>I’m going to try not to write about politics this time.</p>\n<p>My current intention is to use this space to write about things I learn, primarily for my own benefit. This approach has worked well for me over at <a href=\"https://www.filmhydra.com\">FilmHydra</a>, which serves more or less as a long form film diary. Here I will talk a lot about web development, agile processes, and … well, anything else I am bouncing around in my head.</p>\n<p>This incarnation of <em>Thudfactor</em> (there have been many) was created using <a href=\"https://www.11ty.dev/\">Eleventy</a>. To build it, I leaned pretty heavily on Raymond Camden’s <a href=\"https://cfjedimaster.github.io/eleventy-blog-guide/guide.html\">A Complete Guide to Building a Blog with Eleventy</a>. I found <em>that</em> thanks to <a href=\"https://11tybundle.dev/\">11tybundle.dev</a>. It was good for a leg up, but I am already full of ideas on how to take this further. I’m keeping a running list of <a href=\"/pages/helpful\">resources I found helpful</a> here as well.</p>\n<p>Hello, or hello again — as the case may be. Things look a little rough right now, but it’ll get better. If you want to keep track, I think I’ve got an old-school RSS feed up there somewhere. Or you can <a href=\"https://hachyderm.io/@thudfactor\">follow me on Mastodon</a>.</p>",{headings:291,localImagePaths:292,remoteImagePaths:293,frontmatter:294,imagePaths:298},[],[],[],{title:282,date:295,description:283,categories:296,tags:213},["Date","2023-06-04T00:00:00.000Z"],[297],"throat clearing",[],"2023/12/exploring-hsl",{id:299,data:301,body:310,filePath:311,assetImports:312,digest:314,deferredRender:20},{title:302,description:303,date:304,cover:305},"Exploring HSL","We continue exploring color in CSS by taking a close look at HSL.",["Date","2023-12-11T00:00:00.000Z"],{src:306,alt:307,description:308,attribution:309},"__ASTRO_IMAGE_./saturation-example.png","A picture of a flower doctored so that the leaves and blossom are brilliant green and purple on the left, but fade into shades of grey on the right.","“Saturation” is a measure of how much hue contributes to a color. Here is a picture of a Guzmania Bromeliad (I think) with saturation decreasing from left to right.",{name:32},"import ArticleFigure from \"@components/ContentItems/ArticleFigure/index.astro\";\nimport ColorBar from \"@components/ColorBar.astro\";\nimport AlertCallout from \"@components/AlertCallout.astro\";\nimport LabeledSwatch from \"@components/LabeledSwatch.astro\";\nimport \"./hsl-bars.css\";\n\nThe next most common color model in CSS is _HSL_. Unlike the RGB color model, HSL doesn’t define color as a mixture of three primaries. It describes color as being made up of three different qualities.\n\nThe first, _hue_, sets the overall color from the spectrum. _Saturation_ is how much that hue contributes to the overall color. _Lightness_ is how light or dark the color is.\n\n<ArticleFigure position=\"right\">\n\t<div class=\"box\" slot=\"fig\">\n\t\t<LabeledSwatch color=\"#c414b3\" label=\"#c414b3\" />\n\t\t<LabeledSwatch color=\"rgb(196 20 179)\" label=\"rgb(196 20 179)\" />\n\t\t<LabeledSwatch color=\"hsl(306deg, 81%, 42%)\" label=\"hsl(306deg 81% 42%)\" />\n\t</div>\n\tSpecifying the same color three different ways: RGB hex notation, the `rgb()` function, and the\n\t`hsl()` function.\n</ArticleFigure>\n\nIn CSS, both the HSL and the RGB color models work within the sRGB color space. All colors specified using RGB can also be specified using HSL, so you can pick the one you are more comfortable with. But many people find working with HSL values more intuitive.\n\n## Adjusting one axis\n\nJust as we did with RGB, let’s look at each axis in isolation. (Or, at least, as much isolation as we can manage.)\n\n<ArticleFigure>\n\t<div class=\"box\" slot=\"fig\">\n\t\t<ColorBar numSwatches=\"18\" class=\"hsl hue\" style=\"margin-bottom: 1rem;\" />\n\t\t<ColorBar numSwatches=\"20\" class=\"hsl saturation\" style=\"margin-bottom: 1rem;\" />\n\t\t<ColorBar numSwatches=\"20\" class=\"hsl lightness\" style=\"margin-bottom: 1rem;\" />\n\t</div>\n\tTop: Changing the _hue_ value from 0º to 360º. Middle: Changing the _saturation_ value from 0% to\n\t100%, with lightness 50%. Bottom: changing the _lightness_ value from 0% to 100%, saturation 100%.\n</ArticleFigure>\n\nHue is specified as an angle on a color wheel, so values range from 0º to 360º, with decimal values available. Just as with other circles, angles equal to or greater than 360º just take another turn around the wheel — 0º and 360º are the same hue (red), 60º and 420º are both the same yellow, and so forth.\n\nSaturation and lightness are both specified as percentages. Adjusting saturation alone causes colors to tend towards grey, which sometimes appears to lighten the colors even though the lightness value is untouched. At 0% saturation, all colors are the same because the hue value contributes nothing to the overall color. Only saturation and lightness matter.\n\n<ArticleFigure>\n\t<div class=\"box\" slot=\"fig\">\n\t\t<ColorBar numSwatches=\"16\" class=\"hsl hue\" style=\"--s: 100%\" />\n\t\t<ColorBar numSwatches=\"16\" class=\"hsl hue\" style=\"--s: 75%\" />\n\t\t<ColorBar numSwatches=\"16\" class=\"hsl hue\" style=\"--s: 50%\" />\n\t\t<ColorBar numSwatches=\"16\" class=\"hsl hue\" style=\"--s: 25%\" />\n\t\t<ColorBar numSwatches=\"16\" class=\"hsl hue\" style=\"--s: 0%\" />\n\t</div>\n\tReducing saturation in 25% increments from 100% to 0%, lightness kept constant at 50%.\n</ArticleFigure>\n\nAdjusting lightness can also seem to pull the hue out of the color because the hue is overwhelmed by black and white, but you can’t get anything approaching a neutral grey that way.\n\n<ArticleFigure>\n\t<div class=\"box\" slot=\"fig\">\n\t\t<ColorBar numSwatches=\"16\" class=\"hsl hue\" style=\"--l: 0%\" />\n\t\t<ColorBar numSwatches=\"16\" class=\"hsl hue\" style=\"--l: 20%\" />\n\t\t<ColorBar numSwatches=\"16\" class=\"hsl hue\" style=\"--l: 40%\" />\n\t\t<ColorBar numSwatches=\"16\" class=\"hsl hue\" style=\"--l: 60%\" />\n\t\t<ColorBar numSwatches=\"16\" class=\"hsl hue\" style=\"--l: 80%\" />\n\t\t<ColorBar numSwatches=\"16\" class=\"hsl hue\" style=\"--l: 100%\" />\n\t</div>\n\tIncreasing lightness in 20% increments from 0% to 100%, saturation kept constant at 50%.\n</ArticleFigure>\n\nTo get those neutral tones, you can set the hue to any degree, reduce saturation to 0, and and then change the lightness.\n\n<ArticleFigure>\n\t<div class=\"box\" slot=\"fig\">\n\t\t<ColorBar numSwatches=\"16\" class=\"hsl lightness\" style=\"--s: 0%\" />\n\t\t<ColorBar numSwatches=\"16\" class=\"hsl hue\" style=\"--l: 25%\" />\n\t</div>\n\tEvery block in both bars has a different hue, but they are all shades of grey in the top bar\n\tbecause saturation is 0%.\n</ArticleFigure>\n\nThe difference between lightness and saturation is a bit hard to grasp, but think about changing colors in a photograph. Removing saturation from a color photo will make it look black and white. But increasing or decreasing lightness makes a color photo more darker or brighter. You will start to lose details in the shadows (which get darker) or highlights (which get blown out) until everything disappears into black or white.\n\n## Advantages and Disadvantages\n\n<ArticleFigure position=\"right\">\n\t<div class=\"box\" slot=\"fig\">\n\t\t<LabeledSwatch color=\"hsl(127deg 100% 50%)\" label=\"hsl(127deg 100% 50%)\" />\n\t\t<LabeledSwatch color=\"hsl(127deg 10% 50%)\" label=\"hsl(127deg 10% 50%)\" />\n\t\t<LabeledSwatch color=\"hsl(127deg, 56%, 37%)\" label=\"hsl(127deg 56% 37%)\" />\n\t</div>\n\tAll three color swatches above use the same hue value. Top: A very vivid green. Middle: A very\n\tfaded green. Bottom: A rather spring-like green.\n</ArticleFigure>\n\nOnce you have a good feel for where hues are located on the color wheel, it’s easy to pick a color and get it into the general ballpark. It does take some practice, but in my experience you have a wider range of colors you can get to without having to reach for a color picker.\n\nHSL also mimics a common way we think about colors. If you think “that red is too vivid,” you can pull saturation down. But if you want “dark red” or “light red” you can adjust lightness. This also means it’s better suited to cases where colors have to change programmatically.\n\n<ArticleFigure position=\"right\">\n\t<div class=\"box\" slot=\"fig\">\n\t\t<LabeledSwatch color=\"hsl(270deg 100% 100%)\" label=\"hsl(270deg 100% 100%)\" />\n\t\t<LabeledSwatch color=\"hsl(60deg 75% 100%)\" label=\"hsl(60deg 75% 100%)\" />\n\t\t<LabeledSwatch color=\"hsl(43.23deg 0% 100%)\" label=\"hsl(43.23deg 0% 100%)\" />\n\t</div>\n\tAlthough these swatches all describe colors at different points on the hue wheel and with\n\tdifferent amounts of saturation, they are all white.\n</ArticleFigure>\n\nThere are a couple of flaws with HSL, however. Because all three color components are always required, there are a few places where just one or two matter. At 100% or 0% lightness, it does not matter what either the saturation or the hue are. Those “theoretical” colors just get clipped to white and black.\n\nThere’s also a human-assumption issue, since we tend to like to think in whole numbers. With RGB you can get 256 levels of grey without reaching for fractions — You just increase all three colors in lock-step from 0 to 255 (#00 to #FF). With HSL percentages, though, you have 101 whole number values — 0% to 100%.\n\nYou can see this tendency in many online color pickers or color picker apps. Although decimal values for lightness and saturation are valid, [A Most Excellent HSL Color Picker](https://hslpicker.com/#f0f0f0) presents an error message. That means two to three levels of RGB grey are unreachable — not by HSL itself, but through the color picker. You could argue that the visual difference between `#ececec`, `#ededed`, and `#eeeeee` is indistinguishable, but no doubt it matters to someone.\n\nThe biggest disadvantage, however, is that colors of the same lightness _value_ are perceived as lighter or darker than their neighbors. Let’s take a look at the HSL spectrum again:\n\n<ArticleFigure>\n\t<div class=\"box\" slot=\"fig\">\n\t\t<ColorBar numSwatches=\"18\" class=\"hsl hue\" style=\"--s: 100%\" />\n\t</div>\n\tThe HSL color spectrum, with saturation at 100% and lightness at 50%. Although lightness is\n\tconsistent, some of these colors look brighter than others.\n</ArticleFigure>\n\nThis is not as critical for some concerns as it is for others, but it’s critical if you’re assigning colors automatically while sticking to the WCAG color contrast guidelines.\n\n<AlertCallout>\n\tFun fact: the WCAG 2.0 color contrast guidelines have some [significant\n\tdeficiencies](https://git.apcacontrast.com/documentation/WhyAPCA), in part because they also lean\n\ton a flawed mathematical understanding of contrast.\n</AlertCallout>\n\nOther color models try to address this, and we’ll take a look at those in future installments.\n\n## Similar variations\n\nThere are many similar color models often confused with HSL. CSS also has HWB, which expresses color as a mixture of hue, white, and black. Changing _either_ W or B while keeping the other at 0% is the same as sweeping through the \"lightness\" values in HSL. HWB is perhaps more intuitive for lightening and darkening colors, but counter-intuitive for neutral tones.\n\n<ArticleFigure>\n\t<div class=\"box\" slot=\"fig\">\n\t\t<ColorBar numSwatches=\"16\" class=\"hwb hue\" style=\"margin-bottom: 1rem;\" />\n\t\t<ColorBar numSwatches=\"16\" class=\"hwb whiteness\" style=\"margin-bottom: 1rem;\" />\n\t\t<ColorBar numSwatches=\"16\" class=\"hwb blackness\" style=\"margin-bottom: 1rem;\" />\n\t</div>\n\tTop: Changing the _hue_ value from 0º to 360º. Middle: Changing the _whiteness_ value from 0% to\n\t100%, blackness 0%. Bottom: changing the _blackness_ value from 0% to 100%, whiteness 100%. Note\n\tthat all swatches have some hue component except for the pure white and pure black at the ends of\n\tthe color bars.\n</ArticleFigure>\n\nStefan Judis has an excellent [article about HWB](https://www.stefanjudis.com/blog/hwb-a-color-notation-for-humans/).\n\nThe other color model confused with HSL is HSB, which stands for Hue, Saturation, and Brightness. In HSB, 100% _brightness_ does not make the color white. Instead, it gives the color its most intense hue. You get actual white by setting brightness to 100% and saturation to 0%. [Wikimedia Commons](https://commons.wikimedia.org/wiki/File:Hsl-hsv_models_b.svg) has a great, but very large, illustration of the differences.\n\nHSV (Hue, Saturation, and Value) is the same color model as HSB — they just disagree on what that third color component is called.\n\n## Which is better, RGB or HSL?\n\nIf you had to choose just one of these two, HSL is more often than not a better choice. It’s easy to understand. With practice, it’s easier to picture what any given color value will be. And the biggest benefit is that it’s easier to manipulate with code.\n\nThat said, _you don’t have to choose_. CSS supports both, so there’s no reason not to switch modes if you find one works better than the other. Remember that you can create every color with HSL that you can with RGB (even if some color pickers won’t let you), so use the one you like until circumstances require a change.\n\nComing up: we complicate matters with newer color models and color spaces beyond the now very dated sRGB.","src/content/posts/2023/12/exploring-hsl/index.mdx",[313],"./saturation-example.png","0a6d8db04c840c64","2023/12/prefers-reduced-motion",{id:315,data:317,body:327,filePath:328,assetImports:329,digest:331,deferredRender:20},{title:318,description:319,date:320,cover:321},"Prefers reduced motion","Supporting your site visitors who have motion sensitivities.",["Date","2023-12-14T00:00:00.000Z"],{src:322,alt:323,description:324,attribution:325},"__ASTRO_IMAGE_./medusa.png","A closeup of Medusa’s sneering face from the 1981 movie “Clash of the Titans”","Some of us will go to great lengths to make things just stand still.",{name:326},"Ray Harryhausen / United Artists","import AlertCallout from \"@components/AlertCallout.astro\";\nimport ArticleFigure from \"@components/ContentItems/ArticleFigure/index.astro\";\nimport DisplaySettings from \"./display-settings.png\";\n\nSome people say Medusa turned people to stone because she was just that ugly. Others portray her as an evil, magical being. Still more claim Medusa was just an unlucky woman cursed by the victim-blaming God Minerva. I have my own theory, which is that Medusa just wanted people to settle down.\n\n<ArticleFigure\n\timage={DisplaySettings}\n\talt=\"Display settings on MacOS, with Reduce Motion, Dim Flashing Lights turned on, and Auto-play Animated Images turned off.\"\n\tposition=\"right\"\n>\n\tThe MacOS display settings, which shows many different accessibility options.\n</ArticleFigure>\n\nI can sympathize. I am prone to [sensory overload](https://health.clevelandclinic.org/sensory-overload), which is triggered by both motion and sound. Unlike folks with vestibular disorders, I don’t get dizzy, nauseous, or a headache. I instead get tense, anxious, irritable, and withdrawn. That’s why I’ve turned on “reduce motion” for every device that supports it. (It’s also the primary reason I run my browser with ad blockers on — one flashing or auto-playing advertisement on the screen can make the entire page unusable for me.)\n\nMotion sensitivity is a big problem for a lot of people, but web sites often don’t take that into account. I hope it’s not because they think they have to have a boring site, because since 2020 you can _totally_ keep your wacky spinning logo and turn it off for the people who can’t even. All it takes is a media query.\n\n```css\n@media (prefers-reduced-motion: reduce) {\n\t/* alternative, calm animations here */\n}\n\n/* or */\n\n@media (prefers-reduced-motion) {\n\t/* alternative, calm animations here */\n}\n```\n\nIf you want to treat animation as a progressive enhancement, you can _add_ animations with slightly different syntax:\n\n```css\n@media screen and (prefers-reduced-motion: no-preference) {\n\t/* your re-implementation of <blink> */\n}\n```\n\n<AlertCallout>“No preference” in this context evaluates to “false.”</AlertCallout>\n\nThis media query ties into the accessibility settings on the user’s operating system, so you can test the effect by toggling that feature on and off in your system preferences. Alternatively, there's an emulation switch in Chrome’s developer tools, but if you turn on reduced motion in MacOS display preferences this will override the emulation settings.\n\nAccess to this OS-level setting is not just limited to CSS, however. You can use `window.matchMedia()` to check it your Javascript.\n\n```js\nconst settleDown = window.matchMedia(`(prefers-reduced-motion: reduce)`).matches === true;\n```\n\nSome ideas for this are:\n\n- turning off or replacing blinking items, spinning logos, or other interface nonsense\n- disabling auto-advancing carousels\n- turning auto-play _off_ on videos if reduced motion preferences are on.\n\nWCAG says it must be possible to “[pause, stop, or hide](https://www.w3.org/WAI/WCAG21/Understanding/pause-stop-hide.html)” any animation on a page that’s not crucial to the page’s operation. This is such an important consideration it’s a requirement of passing WCAG level A, so it’s baseline accessibility.\n\nTurning these animations off preemptively is somewhat more aggressive but certainly friendlier, and it’s been my default coding strategy for some time now when doing design implementation for clients. In the cases of incidental, decorative animations, it’s a lot safer to remove them than it is to offer toggle switches.\n\nFor the larger features, well, lots of folks are willing die on the hill of auto-advancing carousels and auto-playing video, but in my experience most will allow a carve-out for accessibility purposes. Assume your clients want an accessible web site and make ’em tell you otherwise, that’s my policy.","src/content/posts/2023/12/prefers-reduced-motion/index.mdx",[330],"./medusa.png","140c37231387a414","2023/12/exploring-rgb",{id:332,data:334,body:347,filePath:348,assetImports:349,digest:351,deferredRender:20},{title:335,description:336,date:337,cover:338},"Exploring RGB","We begin exploring color in CSS by taking a close look at RGB color.",["Date","2023-12-09T00:00:00.000Z"],{src:339,alt:340,description:341,attribution:342},"__ASTRO_IMAGE_./LED_RGB_matrix.jpg","Closeup of tiny red, green and blue LEDs arranged in a matrix for a display.","These LEDs are arranged very close together in a tight matrix; when viewed from a normal distance, the colors from these lights will blend to reproduce a large portion of the visible spectrum.",{name:343,link:344,license:345},"Komatta / Wikimedia","https://commons.wikimedia.org/wiki/File:LED_RGB_matrix.jpg",{name:346},"Public Domain","import ColorBar from \"@components/ColorBar.astro\";\nimport LabeledSwatch from \"@components/LabeledSwatch.astro\";\nimport ArticleFigure from \"@components/ContentItems/ArticleFigure/index.astro\";\nimport \"./rgb-bars.css\";\nimport ColorSpacesApple from \"./color-spaces-apple.png\";\nimport WebSafeGif from \"./websafe.gif\";\n\nIt’s a revolution for CSS color! Not only do we now have access to many different color models, we also have entirely new color spaces to explore. As part of deepening my own understanding of what’s available to us, I’ve been experimenting a bit. Here’s what I’ve learned.\n\n<ArticleFigure\n\tposition=\"right\"\n\timage={ColorSpacesApple}\n\talt=\"A screenshot of Apple’s monitor color space settings\"\n>\n\tApple monitors are the exception to those terrible monitor menus; you can access their settings\n\tfrom the Control Panel.\n</ArticleFigure>\n\n## Color spaces\n\nColor terms get rapidly technical, and — to be honest — I only have a fingernail grip on the definitions to begin with. But for our purposes as web designers or developers, it seems to be correct enough to say that _color space_ represents the whole set of colors available to us.\n\nColor spaces may be different from a device’s color _gamut_ — or all the colors the device is _capable_ of displaying. In other words, a color space is an abstract or standardized set of colors, and _gamut_ is a result of real-world hardware.\n\nExample color spaces are: _sRGB_, _Adobe RGB_, _DCI-P3_, and _Rec. 2020_. If you dig into your monitor’s display settings — those are the ones behind the annoying and difficult-to-use monitor firmware menus — you may discover you can switch between these. So a monitor may be capable of displaying the enormous number of colors described in _Rec. 2020_, but if it’s set to _sRGB_ mode you’re only going to get a few of those.\n\nEarly computer monitors had limited color gamuts. Due to memory constraints, the color _spaces_ available were often quite small. In the very early days of the web, there were only 216 colors we could use more or less reliably. This was the so-called “web-safe color palette.” But as early as 1996 we were getting into having 16 million colors.\n\n<ArticleFigure position=\"right\" image={WebSafeGif} alt=\"All 216 colors once considered “web-safe.”\">\n\tIf you chose a color outside of these 216, some old monitors would try to approximate them by\n\t“dithering,” trying to mix the colors by showing pixels of the others very close together. Since\n\tthese monitors were very low resolution, the results were not ideal.\n</ArticleFigure>\n\n## Color models\n\nColor _models_, on the other hand, are the mechanisms used to represent those colors. For example, one color model is the one you may have learned when you were first using finger-paint. “The three primary colors,” it went, “are red, yellow, and blue.” This is not accurate. It is, for example, impossible to get white or black by mixing any amount of red, yellow, and blue paint. Furthermore, the absence of white and black leaves many shades of colors entirely unreachable. But the range of colors reproducible this way is probably fine for five-year-olds.\n\nOver the course of a few posts, I want to take a look at other color models and discuss what I think are their benefits and weaknesses. The first one we’ll look at is RGB — which uses red, green and blue as primary colors.\n\n## RGB in the sRGB color space\n\nSimilar to the old \"Red, Yellow, Blue\" system is the \"Red, Blue, Green\" system. This color model works well with light. You can get black by reducing _all_ of the light, and you get white by turning red, blue, and green up to their full intensities. Old color CRT displays used tiny red, blue, and green phosphor dots, and modern televisions use the same colors but different technologies.\n\nA lot of articles about color models have illustrations of the models as 3D objects which, while cool, are really hard for me to follow. I think it’s easier to see what’s going on with color bars and swatches, so let’s look at what each of the R, G, and B values look like on their own below.\n\n<ArticleFigure position=\"right\">\n\t<div class=\"box\" slot=\"fig\">\n\t\t<LabeledSwatch color=\"#ff0000\" label=\"#ff0000 - red\" />\n\t\t<LabeledSwatch color=\"#00ff00\" label=\"#00ff00 - green\" />\n\t\t<LabeledSwatch color=\"#0000ff\" label=\"#0000ff - blue\" />\n\t</div>\n\tHexadecimal notation of the three primaries. Although we might think of these as three numbers\n\tjammed together, the result is just one number.\n</ArticleFigure>\n\nMixing red, green, and blue to make all of the colors works because we have three types of photoreceptor cones in our eyes tuned to them specifically. All the other colors we see are mixed in our brain from these three different cones.\n\nThe sRGB color space — created in 1996 — is the most common and compatible model for colors on the web. If you have used “hex color,” you are working in the RGB color space. In hexadecimal notation, each primary color is represented by a number from 0 to FF, which is 0 to 255 using decimal numbers. We then glue these numbers together, so (reading left to right) the first two digits are red (`#FF0000`), the second two are green (`#00FF`), and the third two are blue (`#0000FF`).\n\n<ArticleFigure position=\"right\">\n\t<div class=\"box\" slot=\"fig\">\n\t\t<LabeledSwatch color=\"#9760f0\" label=\"9,920,752 — grimace purple\" />\n\t\t<LabeledSwatch color=\"#009060\" label=\"36,960 — forest green\" />\n\t\t<LabeledSwatch color=\"#f00073\" label=\"15,728,755 — pink\" />\n\t</div>\n\tSome RGB colors represented as decimals. Once you start mixing primaries, it's difficult to\n\tpredict what the resulting color will be.\n</ArticleFigure>\n\nWhy hexadecimal notation? This format makes it easy for us to see the intensity of red, green, and blue values independently. Decimal is a lot harder to manage. “15,728,755” is a combination of both red and blue, but it’s hard to tease out how much by looking at the decimals. Once it’s in hex, it’s a lot easier to see that it's quite a lot of red and a bit of blue: `#f00073`.\n\nThe amount of each of these colors tells us how much of that wavelength of light contributes to the final color value. If we turn off all but one, and then sweep through the values from 0 to 256 for a single color, we get shades of that color.\n\n<ArticleFigure>\n\t<div class=\"box\" slot=\"fig\">\n\t\t<ColorBar numSwatches=\"16\" class=\"rgb red\" style=\"\" />\n\t\t<ColorBar numSwatches=\"16\" class=\"rgb green\" style=\"\" />\n\t\t<ColorBar numSwatches=\"16\" class=\"rgb blue\" style=\"\" />\n\t</div>\n\tEach of the three components runs from black to the pure hue as long as the other two components\n\tare 0.\n</ArticleFigure>\n\nYou can get other hues by blending two of the three primary colors.\n\n<ArticleFigure >\n\t<div class=\"box\" slot=\"fig\">\n  <ColorBar numSwatches=\"16\" class=\"rgb red\" style=\"--b: 0\"/>\n  <ColorBar numSwatches=\"16\" class=\"rgb red\" style=\"--b: 64\"/>\n  <ColorBar numSwatches=\"16\" class=\"rgb red\" style=\"--b: 128\"/>\n  <ColorBar numSwatches=\"16\" class=\"rgb red\" style=\"--b: 192\"/>\n  <ColorBar numSwatches=\"16\" class=\"rgb red\" style=\"--b: 256; margin-bottom: 1rem;\"/>\n\n{\" \"}\n\n<ColorBar numSwatches=\"16\" class=\"rgb red\" style=\"--g: 0\" />\n<ColorBar numSwatches=\"16\" class=\"rgb red\" style=\"--g: 64\" />\n<ColorBar numSwatches=\"16\" class=\"rgb red\" style=\"--g: 128\" />\n<ColorBar numSwatches=\"16\" class=\"rgb red\" style=\"--g: 192\" />\n<ColorBar numSwatches=\"16\" class=\"rgb red\" style=\"--g: 256; margin-bottom: 1rem;\" />\n\n  <ColorBar numSwatches=\"16\" class=\"rgb blue\" style=\"--g: 0\"/>\n  <ColorBar numSwatches=\"16\" class=\"rgb blue\" style=\"--g: 64\"/>\n  <ColorBar numSwatches=\"16\" class=\"rgb blue\" style=\"--g: 128\"/>\n  <ColorBar numSwatches=\"16\" class=\"rgb blue\" style=\"--g: 192\"/>\n  <ColorBar numSwatches=\"16\" class=\"rgb blue\" style=\"--g: 256\"/>\n\t</div>\n    Top: 0-100% red across the horizontal axis, 0-100% blue on the vertical axis.\n    Middle: 0-100% red across the horizontal axis, 0-100% green on the vertical axis.\n    Bottom: 0-100% blue across the horizontal axis, 0-100% green on the vertical axis.\n</ArticleFigure>\n\nPure neutral tones have equal amounts red, green, and blue. The closer the red, green, and blue channels are to each other, the more desaturated -- or “grey” -- the colors get.\n\n<ArticleFigure>\n\t<div class=\"box\" slot=\"fig\">\n\t\t<ColorBar numSwatches=\"32\" class=\"rgb greyscale\" style=\"--g: 0; margin-bottom: 1rem;\" />\n\t\t<ColorBar numSwatches=\"16\" class=\"rgb green\" style=\"--b: 0; --r: 0\" />\n\t\t<ColorBar numSwatches=\"16\" class=\"rgb green\" style=\"--b: 64; --r: 64\" />\n\t\t<ColorBar numSwatches=\"16\" class=\"rgb green\" style=\"--b: 128; --r: 128\" />\n\t\t<ColorBar numSwatches=\"16\" class=\"rgb green\" style=\"--b: 192; --r: 192\" />\n\t\t<ColorBar numSwatches=\"16\" class=\"rgb green\" style=\"--b: 256; --r: 256\" />\n\t</div>\n\tTop: Greyscale values created by equal mixtures of red, green, and blue. Bottom: Green from 0-100%\n\ton the X axis, equal values from 0-100% blue and red on the Y axis.\n</ArticleFigure>\n\nMix all three unevenly and you get lighter, more pastel-like shades.\n\n<ArticleFigure>\n\t<div class=\"box\" slot=\"fig\">\n\t\t<ColorBar numSwatches=\"16\" class=\"rgb green\" style=\"--b: 128; --r: 0\" />\n\t\t<ColorBar numSwatches=\"16\" class=\"rgb green\" style=\"--b: 256; --r: 64\" />\n\t\t<ColorBar numSwatches=\"16\" class=\"rgb green\" style=\"--b: 128; --r: 128\" />\n\t\t<ColorBar numSwatches=\"16\" class=\"rgb green\" style=\"--b: 256; --r: 192\" />\n\t</div>\n\tTop: Greyscale values created by equal mixtures of red, green, and blue. Bottom: Green from 0-100%\n\ton the X axis, equal values from 0-100% blue and red on the Y axis.\n</ArticleFigure>\n\nCSS has a few other ways to describe an RGB color.\n\n<dl>\n\t<dt>\n\t\t<code>rgb(0, 128, 255)</code>\n\t</dt>\n\t<dd>As a comma-separated list of red, green, and blue decimal values between 0 and 255</dd>\n\t<dt>\n\t\t<code>rgba(0, 128, 255, 0.1)</code>\n\t</dt>\n\t<dd>\n\t\tThe same, but with a fourth component in decimal values between 0 and 1 describing how opaque\n\t\t(1) or translucent (0) the color is.\n\t</dd>\n\t<dt>\n\t\t<code>rgb(0 128 255 / 0.1)</code>\n\t</dt>\n\t<dd>\n\t\tA space-separated version with an optional opacity value separated from the color channels by a\n\t\tslash.\n\t</dd>\n</dl>\n\nThe last syntax style is the most recent, but it’s been available on all modern browsers for a long time now.\n\n## Advantages and Disadvantages\n\nAs a color model, RGB has some big advantages:\n\n- It matches the mechanical production of color on displays, which emit red, green, and blue light, just smooshed close together.\n- Every color in the sRGB space can be addressed by precisely one combination of R, G, and B.\n- This mode of expressing colors in digital design is as common as dirt.\n\n<ArticleFigure position=\"right\">\n\t<div class=\"box\" slot=\"fig\">\n\t\t<LabeledSwatch color=\"#ff0000\" label=\"#ff0000\" />\n\t\t<LabeledSwatch color=\"#f44e4e\" label=\"#f44e4e\" />\n\t\t<LabeledSwatch color=\"#a73106\" label=\"#a73106\" />\n\t</div>\n\tVery similar colors can have radically different RGB values.\n</ArticleFigure>\n\nBut there’s one huge disadvantage: Because RGB is a mixture of three colors, it can be very difficult to figure out on your own what values you need to change to make colors lighter or darker, or more or less saturated.\n\nThis is not a problem if you are able to pick individual colors from a color wheel, but if you want to derive colors mathematically — “the brand color, but 20% lighter” — you need to use a different color model.\n\nThe next color model was designed to solve that problem, but to do that we have to take ourselves out of the relatively familiar ground of mixing colors and learn to think about color in a different way.","src/content/posts/2023/12/exploring-rgb/index.mdx",[350],"./LED_RGB_matrix.jpg","a34aae3731e7dbe3","2023/08/ai-art",{id:352,data:354,body:365,filePath:366,assetImports:367,digest:369,deferredRender:20},{title:355,description:356,date:357,cover:358},"Some notes about working with AI Art","AI art is often described as just “writing a prompt,” but of course it’s more difficult than that.",["Date","2023-08-01T00:00:00.000Z"],{src:359,alt:360,description:361,attribution:362},"__ASTRO_IMAGE_./spaceship.png","AI art of a large spaceship with many antennae and protrusions landing in a fog-filled forest canyon.","I am not sure if it is art, but it is fun.",{name:363,link:364},"John Williams / Midjourney","https://www.midjourney.com/app/jobs/407060d3-c71e-4db7-b70e-9ca5c2b165bd/","import ArticleFigure from \"@components/ContentItems/ArticleFigure/index.astro\";\nimport HogansHeroes from \"./hogans-heroes.png\";\nimport PinupPose from \"./pinupPose.jpg\";\nimport Nun from \"./nun.png\";\nimport Celtic from \"./celtic.jpg\";\nimport Screenshot from \"./screenshot.png\";\n\nI’ve spent a fair amount of time in the last few days playing around with AI-generated art. I have a few mostly unorganized thoughts I wanted to get down, so here you go.\n\n## Ethics\n\n<ArticleFigure\n\timage={HogansHeroes}\n\talt=\"An AI generated image of wrestler Hulk Hogan making a giant submarine sandwich\"\n\tposition=\"right\"\n>\n\tI call this one “Hogan’s Heroes.” This was a rapidly made piece created to respond to a work\n\tconversation.\n</ArticleFigure>\n\nThe ethical concerns of AI art are somewhat beyond me. I understand that a lot of artists feel like their art has been “stolen” by these companies for profit and without permission, but when you make your art publicly available, it tends to get appropriated and re-used in ways you didn’t anticipate.\n\nRecord labels, movie producers, and people who suddenly become memes without anyone asking them understand that all too well.\n\nSomewhat related is the idea that this makes art “too easy.” This is an old argument about art and technology. In my lifetime I’ve seen it applied to Photoshop, 3D computer animation, VFX, and synthesizers. But historically it has also been lobbed at the art of photography itself. Here is [Charles Baudelaire in 1859](https://www.csus.edu/indiv/o/obriene/art109/readings/11%20baudelaire%20photography.htm):\n\n> As the photographic industry was the refuge of every would-be painter, every painter too ill-endowed or too lazy to complete his studies, this universal infatuation bore not only the mark of a blindness, an imbecility, but had also the air of a vengeance… I am convinced that the ill-applied developments of photography, like all other purely material developments of progress, have contributed much to the impoverishment of the French artistic genius, which is already so scarce.\n\nPhotography is a deep, complex, and rich form of art, and it only continues to expand. Especially with the advent of the iPhone, which has led to a lot of amateur photographers dabbling as well.\n\nOh, here. Listen to [photographer Antonio Olmos](https://www.theguardian.com/artanddesign/2013/dec/13/death-of-photography-camera-phones) in 2013:\n\n> Photographers are getting destroyed by the rise of iPhones. The photographers who used to make £1,000 for a weekend taking wedding pictures are the ones facing the squeeze. Increasingly we don't need photographers – we can do just as well ourselves.\n\nThe assumption that AI is _really simple_ is unfounded, however. It is true that I can spend multiple days learning how to use an AI art tool and turn out results it would take years of practice to achieve. But it still requires a significant outlay of effort.\n\nIn my case, the effort is minimized a bit by my long experience programming computers. There’s still years of experience in the back there, it’s just in a different discipline.\n\nIt also becomes dramatically more difficult to use AI when you want to accomplish something _specific_. No doubt these tools will get easier, but… they have a long way to go.\n\nSo, speaking of, let me talk about some of the tools I’ve been using.\n\n## AI Tools\n\nThe AI art tools come in two basic varieties. You have those hosted by companies like Google, Microsoft, and OpenAI. You pay to use them by the minute or by the image. Furthermore, most of these AI tools work under community guidelines that dictate what content is acceptable.\n\nOf course, deciding what is acceptable is often managed by program heuristics of some sort and there are often false positives. I’ve tripped over them a couple of times and can’t for the life of me understand why.\n\n### Midjourney\n\n<ArticleFigure\n\timage={PinupPose}\n\talt=\"A woman laying on her stomach, wearing a polka-dot dress, smiling. There is a Coca-cola branded cooler and a Coke bottle nearby.\"\n>\n\tOne of the things Midjourney can do is accept an image as guidance along with a prompt. This is\n\twhere I got into trouble. I wanted to duplicate this pose in my prompt, but Midjourney told me the\n\timage was inappropriate.\n</ArticleFigure>\n\n[Midjourney](https://www.midjourney.com/) is an AI art tool that you work with using Discord. You write prompts into the chat room and a chatbot moderates between you and the Midjourney software. You can get really amazing results out of this pretty quickly, but once you start trying to nail something specific down things get difficult — and potentially expensive. Midjourney, like a lot of AI art machines, still has difficulty managing the number of limbs and a reasonable range of human motion.\n\nGetting something usable out of the tool often means making many, many renders until you find one that’s acceptable. Then you can upscale the result (a little bit), which is typically when you realize your model has seven fingers or maybe an extra foot growing out of her knee.\n\nIt seems unlikely this is going to improve much with the existing approach. The way these tools typically work is to take a image full of random pixels and, over several iterations, remove everything that doesn’t look like the prompt.\n\n<ArticleFigure\n\timage={Nun}\n\talt=\"Four thumbnail renders of a nun laying on the beach. The first looks reasonable, the other three have deformed hands, strange shoulders, or awkward poses.\"\n>\n\tThe prompt for this was “1950s airbrush painting of a cheerful nun reclining on the beach, facing\n\tthe viewer, sunny day, in the style of Antonio Vargas --no umbrella --aspect 16:9” Midjourney is\n\ttrying, but…\n</ArticleFigure>\n\n### Stable Diffusion\n\nStable Diffusion is a free AI art tool. There’s a large and community — maybe it’s better to say “multiple communities” that have sprung up around SD. In the spirit of open source code, these folks are expanding the tool set by training and creating their own models, tutorials, and other bits and bobs. There are several hosted options available, but you can also download and run on your own machine… maybe.\n\nIf you are a PC gamer you are probably set. If what you have is more of a business machine or one of the lower-end Macbook Pros, you are going to be waiting a long time. This is a problem because, just like Midjourney, you’re likely to be going through multiple iterations.\n\nThere are multiple front-end interfaces for SD. There’s an official SD one, of course, but there are two others that are pretty common. [Automatic1111](https://github.com/AUTOMATIC1111/stable-diffusion-webui) is a common tool. Firing it up is a little like walking into the cockpit of a 747. There are knobs and controls everywhere, with little in the way of help. I spent a fair amount of time trying to use this tool and got some reasonable results out of it, but then I moved to ComfyUI.\n\nIf Automatic1111 looks like a jet cockpit, ComfyUI resembles nothing so much as a modular synth. [Synthesizers make things too easy, remember](https://www.sweetwater.com/insync/re-creating-the-classic-minimoog-synthesizer-with-eurorack-modules/). You add blocks which represent parts of the AI construction process -- load the model, prep the decoder, run the sampler, view the results -- and wire them all together in the order you want. Once you get the hang of it, it’s really handy. But setting up even a simple workflow is a bit of a shock, especially if you’ve been led to believe all you have to do is write a prompt.\n\nAll I’ve been doing recently with SD is trying out different models (each model is trained on different data has its own style), writing prompts, trying to get rid of extra fingers, and attempting to upscale beyond the relatively tiny images SD makes at the start. I prefer the control. I also like the fact that no one is looking over my shoulder to see if I am doing anything wrong. (Was that polka-dotted dress really too racy?)\n\n<ArticleFigure\n\timage={Celtic}\n\talt=\"A woman with messy, braided red hair and green eyes, wearing a tunic decorated with celtic knots, looking to the right with a grim expression on her face.\"\n>\n\tThis looks really great if you don’t scrutinize it too much. There's an impression of Celtic\n\tknotwork, but it’s incoherent as a real knot. I don’t know what’s up with the weapons, those are\n\tstrange. But overall, I’m very pleased with this one.\n</ArticleFigure>\n\nOff to the right is an image I worked with for multiple hours over several days. _My_ scruples say AI art belongs to the community, and so I should share my prompts any time I share the art.\n\n> Positive prompt: photo of a female celtic warrior, pale green eyes, looking left\n> Negative prompt: hands, fingers, cropped head, smooth skin, (makeup)\n\nIf you look at a lot of other people’s Stable Diffusion prompts you will notice they are much more detailed in comparison. Part of the reason mine are so short is I am using a newer model which requires a little less guidance. Another reason is a lot of SD artists take a kitchen-sink approach -- I am not convinced all their keywords do anything. I mean, even in this one our warrior is looking right, facing right. So much for “looking left.”\n\nThe positive prompt guides what SD will include. Note I said nothing about weapons or armor, but SD decided those were implied by “warrior.” The hair style, skin tone, and decorations are all probably implied by “celtic.”\n\nSometimes things are implied that you wouldn’t expect. The first prompt did not include eye color, so I had an entirely different background that was shades of brown. Asking for green eyes got me the green background as well.\n\nSometimes changing a prompt slightly has very slight results, and I was able to refine the image over multiple passes. But other times, small changes have bizarre side effects. For example, asking for no armor gave me a simple green tunic instead, but it also got me two noses. “Hands” and “fingers” are in the negative prompt because I got a lot of weird results — our warrior here would be holding a sword, but by the blade, not the hilt. Oh, and she would have seven fingers.\n\nOnce I got a smaller version of her growing out of her shoulder.\n\n“Smooth skin” and “makeup” are included because this model has a bias towards polishing away skin imperfections and gussying up all the ladies otherwise. Incidentally, removing the makeup also changed the hair to that barely tamed tangle.\n\nHere is a screenshot of the ComfyUI workflow I used to create this.\n\n<ArticleFigure\n\timage={Screenshot}\n\talt=\"A screenshot of the comfy UI, showing multiple models being loaded, and several image previews\"\n>\n\tA workflow in ComfyUI.\n</ArticleFigure>\n\n_This does not represent a complex workflow._ Here’s what it’s doing:\n\n1. I am loading the SDXL base model\n2. Setting up the prompts, which need to be encoded specially for the model\n3. Setting up an empty image to use\n4. Feeding all these to the sampler (which combines the prompts and the model) and builds the image.\n5. The result of that (called the “latent image”) is fed to the image decoder to turn the latent image into an actual image, which is the middle result.\n6. It also sends the latent image to a second sampler, which uses a second model (SDXL refiner model) and it’s own encoded version of the prompts. This model improves the details created by the first.\n7. Then I decode _that_ latent image so I can compare the results of this second step. (Sometimes things get worse.) That’s the far right image.\n8. _Finally_, I pass the decoded image data into a specialized sampler to double the image size. This uses a _third_ model to upscale the image. Rather than just make it bigger, it fills in more details. That’s the lower left. It’s tiny because I just want to verify everything worked so I can save it.\n\n_Is_ this easier than grabbing a camera, contracting a model, getting the costume together? Actually, probably not, if you have a willing model who goes to Renaissance Festivals. But lacking those things, it’s not a bad substitute.\n\n## How I will use AI art\n\nI do a fair amount of independent stuff. This blog as well as my movie blog over at [FilmHydra](https://filmhydra.com/). I do all of this without adding advertising or even tracking marketing data; it’s purely hobby. I would love to have more art in my posts, and this is a way to get it. Realistically, I am not going to buy stock photos or contract with an artist every time I need something.\n\nI also forsee a day when it is very difficult to get screen shots from movies. Studios have already made it very difficult to get screen shots from streamed films. But those are central (and important) to my movie reviews -- so maybe I will start replacing some of those with AI renditions of the scene. I think that would be fun. Again, I was never likely to contract an artist for those.\n\nBut mostly I will do this for my own entertainment, just as I have with almost all of the other art I’ve ever done. And this blog post. And all the rest.\n\n## But what about the artists?\n\nArtists were already in a bad way before AI art came along. IPhones are limiting options for working photographers. The demise of Twitter has made it hard for other visual artists to reach their customers. Things have been rough for artists for a long time, and yes — this is another blow. Especially for artists uninterested in using these tools themselves.\n\nThe only real solution for this I can see is greater public investment in the arts, either directly through grants or indirectly through something like Universal Basic Income. My feeling is this. AI art is an interesting and entertaining tool with a lot of potential. Lots of people will make lots of bad art with it, but I make lots of bad art now with pencil and paper. It’s fine.\n\nBut artists have been continually squeezed in the service of wringing more productive time out of people to fill the 1%’s silos of cache. This is not a technology problem, it’s a political priority problem.\n\nThat’s my feeling anyway. I don’t get to make these decisions, but anytime anyone asks for my opinion — in person or in the voting booth — that’s what it is.\n\nWe should pay people to make art. Lots of art. Any way they want to do it. It’s a public good.","src/content/posts/2023/08/ai-art/index.mdx",[368],"./spaceship.png","9b5fc5a4b2b3a6a2","2023/11/goodbye-postcss",{id:370,data:372,body:381,filePath:382,assetImports:383,digest:385,deferredRender:20},{title:373,description:374,date:375,cover:376},"Web development of auld lang syne","Removing any form of CSS post-processing has me nostalgic for the other web development strategies that have become obsolete thanks to modern development strategies.",["Date","2023-11-07T00:00:00.000Z"],{src:377,alt:378,description:379,attribution:380},"__ASTRO_IMAGE_./columns.jpg","Twenty-two corinthian columns arranged in a rectangle in a field, supporting nothing.","These columns on display at the National Arboretum in Washington, DC were made in 1828 and removed in 1958 when an addition to the east side of the Capitol took their place.",{name:32},"import AlertCallout from \"@components/AlertCallout.astro\";\nimport ArticleFigure from \"@components/ContentItems/ArticleFigure/index.astro\";\nimport Scriptaculous from \"./scriptaculous.png\";\nimport SlidingDoors from \"./sliding-doors-sprites.gif\";\nimport FlashMX from \"./macromedia-flash-mx-03-preview.png\";\n\nI am really excited to say that the update to _Thudfactor_ that posts this _also_ removes PostCSS from the blog’s build process. SASS and PostCSS handled a lot of CSS complexity. But the CSS standard has mostly caught up to what these tools provide, so now I can now ship exactly the CSS I write… at least for this project.\n\nTo celebrate, I wanted to make note of several other strategies that have faded into distant memory.\n\n## Presentational HTML\n\nIt’s bonkers to think about now, but back when I first started the way you changed font sizes was through a `<font>` tag. If you needed text (or anything!) to be center-aligned, you used `<center>`.\n\n<figure>\n\n```html\n<center><font size=\"5\" face=\"arial\" color=\"red\">Hello, World</font></center>\n<p></p>\n```\n\n<figcaption>\nSome pre-css HTML circa 1996. The `size` attribute offered seven different, imprecise sizes. There was no concept of a `</p>` closing tag, and convention was to place it at the end of a paragraph.\n</figcaption>\n</figure>\n\nRedesigning often meant crawling through the code, moving and changing these. It was such a tedious, awful, and error-prone process I learned text-editor keyboard shortcuts and regular expressions to cope.\n\n_Replaced by:_ CSS\n\n## /cgi-bin/\n\nVery early on, the way you got web sites to do anything with form data was through the excitingly arcane language [Perl](https://en.wikipedia.org/wiki/Perl). Perl scripts were all shoved into one `/cgi-bin/` directory. When web-host shopping, you wanted one that gave you access to that so you could get your email contact form working.\n\n<figure>\n\n```perl\n@origarray=('0 1 2','0 0 0','-3 -2 -1','10 11 12');\n@sortedarray=\n map{$_->[0]}\n    sort{$a->[1] <=> $b->[1]}\n       map{\n          my @cols=split(/\\s+/);\n          my $sum=$cols[0]+$cols[1]+$cols[2];\n          [$_,$sum];\n       } @origarray;\n\n\n\nforeach(@sortedarray){\n  print \"$_\\n\";\n}\n```\n\n<figcaption>\n\nSome sample PERL code from 1999, creating and then sorting an array.\n\n<cite>\n\tSource: <a href=\"https://perlmonks.org/index.pl?node_id=1641\">PerlMonks</a>\n</cite>\n\n</figcaption>\n</figure>\n\n_Replaced by:_ Cold Fusion (_memories!_), PHP, ASP, Ruby, Node\n\n## Javascript Libraries of Yore (MooTools, Prototype, Scriptaculous, jQuery)\n\n<ArticleFigure image={Scriptaculous} alt=\"screenshot of the scriptaculous website\">\n\tThe [Scriptaculous](http://script.aculo.us/) web site is still around, although the last update\n\tseems to have been in August of 2011.\n</ArticleFigure>\n\nOnce Javascript matured a bit and it became possible to manipulate the <abbr title=\"Document Object Model\">DOM</abbr> _after_ the HTML was sent to the browser, lots of libraries popped up to make this process a heck of a lot simpler. The basic Javascript tools were very limited and low-level. Some were focused more on visual effects than others, but eventually everyone bowed to jQuery.\n\n_Replaced by:_ JavaScript ES6 and beyond. jQuery is still very much with us, of course, but many of its concepts got pulled into Javascript proper.\n\n## Layout Hell\n\nThe web was not originally created with rich design in mind, and the first few passes were made by folks who didn’t understand design all that well to begin with. So we had a lot of different coping strategies.\n\n### Our Site is an Image Map\n\nOne popular mechanism was to just make one honking great image and turn it into an [image map](https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Add_a_hit_map_on_top_of_an_image) to scatter the links throughout. These made pages very heavyweight at a time when most people connected to the Internet through very slow modem connections, but they were popular with early designers who saw them as a way to regain rich design without having to learn much HTML at all.\n\nAround 1998 I was looking into going back to school for web design and the local university’s “web design” web site was just a whole bunch of these.\n\n_Replaced by_: Better design capabilities in HTML and CSS in general\n\n_Suggested by: [@bcdavid@hachyderm.io](https://hachyderm.io/@bcdavid/111369208433512075)_\n\n### Table-Based Layout\n\nIn the earliest days you just couldn’t have a sidebar. Everything was presented in one column. Once `<table>` made it into browsers, people started using these to lay out pages. There was a _huge_ debate over this at the time. “Tables should be for data!” some people said. “How else are we going to do design?” other people said. The designers won.\n\nI think this was the beginning of the understanding that the web was going to evolve into a designed medium.\n\nBut that was still all we had for several years, very fancy designs were produced using increasingly elaborate, sometimes nested, tables. Tools like _Macromedia Fireworks_ and _Adobe ImageReady_ would let designers create huge image-map-like comps and slice them into hundreds of tiny images, which web developers would then turn into something more fluid and suited to the web.\n\nHeavily related is the 1x1 transparent spacer gif, which was a tiny one-pixel image that was resized as needed to hold table cells open when the image inside them was loaded as a background.\n\n_Replaced by_: Float-based layout\n\n### Float Based Layouts\n\nThe alternative to tables was using the css `float` property. It was the only way of pushing things into different column shapes. It was also and far less precise than table layouts. Web standards and accessibility advocates dug in their heels on this, though, leading to lots of arguments with designers frustrated that the effects they could achieve through tables just weren’t available anymore.\n\nIt wasn’t really until the advent of responsive design that the rigidity of table-based layout dragged the last holdouts into modernity.\n\nIf you’re really curious, here’s a 2011 [float-based layout tutorial](https://css-tricks.com/almanac/properties/f/float/) from CSS-Tricks. Pay close attention to the “clearing the float” section, which was crucial to managing these layouts.\n\n_Replaced by:_ Flex, grid layouts\n\n_Suggested by: [@wonkeythemonkey@mastodon.social](https://mastodon.social/@wonkeythemonkey/111369371376460302)_\n\n## Image Background tricks\n\nI reach for this so rarely now, but there was a time when being a front-end web developer meant mastering a whole host of techniques that involved loading an image in the background.\n\n### Image Replacement\n\nFor many years, web sites were limited to using the limited set of fonts that were commonly installed on people’s computers. Designers introduced their own typefaces — for things like navigation, anyway — by setting type in images and using those instead.\n\nObviously this is horrible for accessibility, so early accessibility efforts involved using real text inside links, but loading the image-text as a background. Then you would use CSS to hide the text off-screen somewhere and make sure the background container was the right size.\n\nAny text change meant having to produce a new image, however, which made this unsuitable for headlines. A late modification on image replacement was [<abbr title=\"Scalable Inman Image Replacement\">sIFR</abbr>](https://en.wikipedia.org/wiki/Scalable_Inman_Flash_Replacement), which involved a small Flash file with an embedded font that could pull text from elsewhere. It’s hard to describe what a relief this was, but it did proliferate lots of tiny `swf` files throughout a site.\n\nFlash, and thus sIFR, suffered a quick death when Apple refused to let Flash load on iPhones.\n\n_Replaced by:_ `@font-face,` which enabled the delivery of web fonts.\n\n### Faux Columns\n\nFloat-based layout forced much simpler design, but one of the intolerable losses was having a column-based layout where (for example) the left column and the right column backgrounds ended at the same point. “Faux columns” was a technique that ran a large background image behind a wrapper that had all of the column decorations in place; then you would align your float layout over the top. This was _indispensable_ for many years.\n\n_Replaced by:_ Flex, Grid\n\n### Table-based layout (for elements!)\n\nNowadays you can put rounded borders on something with `border-radius`, but before then, one way you could do this was to do a tiny table-based nine-slice layout.\n\n<figure>\n\n```html\n<!-- old style -->\n<a href=\"http://www.example.com/\">\n\t<table class=\"red-border-button\">\n\t\t<tr>\n\t\t\t<td class=\"red-button-tl\"><img src=\"red-button-green-bg-tl.gif\" width=\"5\" height=\"5\" /></td>\n\t\t\t<td class=\"red-button-t\"></td>\n\t\t\t<td class=\"red-button-tr\"><img src=\"red-button-green-bg-tr\" width=\"5\" height=\"5\" /></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"red-button-l\"></td>\n\t\t\t<td class=\"content\">Buy now</td>\n\t\t\t<td class=\"red-button-r\"></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td class=\"red-button-bl\"><img src=\"red-button-green-bg-bl\" width=\"5\" height=\"5\" /></td>\n\t\t\t<td class=\"red-button-b\"></td>\n\t\t\t<td class=\"red-button-br\"><img src=\"red-button-green-bg-br\" width=\"5\" height=\"5\" /></td>\n\t\t</tr>\n\t</table>\n</a>\n```\n\n<figcaption>\nA button with rounded corners, circa 2002. Every dang button that used this style had to have this table wrapped around it. Note the lack of alt text on any of the images.\n</figcaption>\n</figure>\n\nThe four corners would have tiny images in them. The edge pieces would have repeating backgrounds for the border edges, and then the center area could grow as needed.\n\nSo. Many. Tables.\n\n_Replaced By:_ “Sliding Doors,” (below)\n\n_Suggested by: [@wonkeythemonkey@mastodon.social](https://mastodon.social/@wonkeythemonkey/111369371376460302)_\n\n### Sliding Doors\n\nA related technique to faux-columns was called \"sliding doors.” In this, you had a background that consisted of two layers. One would slide under the other to make a background container flexible in one dimension. It was used a lot for navigation and buttons.\n\nIt’s hard to visualize, so [here’s a 2003 article](https://alistapart.com/article/slidingdoors/) from the very influential _A List Apart_ explaining the technique.\n\n_Replaced by:_ CSS3\n\n_Suggested by: [@troy@opencoaster.net](https://opencoaster.net/@troy/111370197631409467)_\n\n### Sprites\n\nOne of the _earliest_ CSS tricks I learned was how to swap images out of the background of a link when you hovered. If you did it the naïve way — changing `background-image` URLs — there was often a noticeable lag on hover as that image was downloaded. The solution was to put _both_ states in one image, then shift `background-position` around.\n\nThis later expanded into the performance-enhancing (but maintainability-destroying) advent of sprite sheets. Sprite sheets might contain _several_ needed incidental graphics like bullet styles, backgrounds, icons, and the like into one image which could be downloaded with one request and then shifted around with `background-position` in CSS.\n\n<ArticleFigure\n\timage={SlidingDoors}\n\talt=\"An image with two large horizontal bars with rounded corners on the left, and two small horizontal bars with rounded corners on the right\"\n>\n\tA very small sprite sheet for a sliding doors button. It’s a little hard to tell just looking at\n\tthe sheet, but this contains both the normal and the hover state for the button design.\n\t<cite>\n\t\tImage source: Devin Olsen’s{\" \"}\n\t\t<a href=\"https://devinrolsen.com/beginners-guide-to-css-sprites/\">\n\t\t\tWhat is a CSS sprite anyways?\n\t\t</a>\n\t</cite>\n</ArticleFigure>\n\nThe technique required a great deal of precision and made changes and updates difficult. Especially if you weren’t the original design agency and couldn’t get the source Photoshop files.\n\n_Replaced by:_ SVG, CSS, more efficient browser load behavior in general\n\n_Suggested by: [@troy@opencoaster.net](https://opencoaster.net/@troy/111370197631409467)_\n\n## Bloody Hacks\n\nYou could argue that most of web development for the first ten years or so was just exploiting various tricks and workarounds. But here are a few.\n\n### Matching background colors for transparent GIFs\n\nUntil about 2007, if you needed bits of your website to show through an image your only choice was a transparent GIF. The problem was that GIFs only had `1-bit transparency`, which means a pixel was either fully transparent or completely opaque. This would cause an ugly, rough halo around images if they were used on a different background color than where they were used.\n\nTo get around this, you had to make your transparent GIF in an image editor using a solid background that matched where you were going to … here, just [read this Stunning Mesh tutorial](https://www.stunningmesh.com/2009/12/unwanted-edges-of-transparent-gifs-photoshop/) from 2009.\n\n_Replaced by:_ PNG, WebP, SVG\n\n_Suggested by:_ [@wonkeythemonkey@mastodon.social](https://mastodon.social/@wonkeythemonkey/111369353992289765)\n\n### Progressively loading images (with tables!)\n\nThen, as now, if you have a really large image it can take forever to download without much user feedback that anything was happening. One solution was to slice the image up into a lot of smaller bits, then re-assemble them in the browser with a table. This way, bits of the image could load in. Ultimately this made the total file size larger and the download slower, but at least it gave some feedback.\n\n_Replaced by:_ Better compression (`webp`, for example). Broadband. Paying attention to download sizes. Also `picture` and `img srcset`.\n\n_Suggested by:_ [@bcdavid@hachyderm.io](https://hachyderm.io/@bcdavid/111369208433512075)\n\n## Annoyances\n\n### Java Applets\n\nThe early web — especially before the widespread adoption of Javascript and the technique called `DHTML` (for “Dynamic HTML”) — was a very static place. One mechanism for injecting app-like behavior or even just some visual flair was writing a small program in Java and shipping it as a browser `applet.`\n\nThese tended to be hideous and often used for pointless things like animated news tickers, but the _worst_ thing was they would lock up the entire Mac OS until all the applets on a page were downloaded and booted. Mac users in the mid 90s never knew when they hit a new web site if their computer was going to just beach-ball for ninety seconds.\n\n_Replaced by:_ Shockwave, Flash\n\n### Flash\n\nShockwave, and later it’s younger brother Flash, took out Applets. These were both very _design-forward_ tools and they let skilled multimedia designers create elaborate experiences and deliver them over the web instead of CD-ROM.\n\n<ArticleFigure image={FlashMX} alt=\"The user interface for Flash on Windows circa 2002\">\n\tThe Flash timeline was a familiar place for motion designers but pretty inscrutable for web\n\tdevelopers used to working in text documents.\n\t<cite>\n\t\tImage Source:{\" \"}\n\t\t<a href=\"https://www.webdesignmuseum.org/software/macromedia-flash-mx-in-2002\">\n\t\t\tThe Web Design Museum\n\t\t</a>\n\t</cite>\n</ArticleFigure>\n\nThere was real concern that the entire web would become this, but Flash was hard to write applications in and _very_ hard to code. Frequent security flaws in the Flash player also limited adoption, especially on work machines. After a brief period where some folks, particularly design agencies, experimented with Flash-only web sites, things moved back around to web standards.\n\n_Replaced by:_ HTML5, Javascript ES6\n\n### WYSIWYG web development apps\n\nOne thing that has _never_ changed is that professional web development happens in a text editor or IDE, although the death of the web developer in favor of design tools has been predicted for many years. Attempts to replace writing actual code started pretty early with Netscape 4, which shipped with Netscape Composer. There was also Microsoft FrontPage, Macromedia Fireworks, Adobe ImageReady, and (of course) Dreamweaver.\n\nIt’s been a long, long time since I met any web developer who relied on any of these tools.\n\n_Replaced by:_ CMS themes, as well as site builders like SquareSpace and Wix\n\n---\n\nI could just keep going! As new techniques replace the old and web development languages get more sophisticated, it’s good to take some time to look back at how far we’ve traveled.\n\nAs each new technique replaces the _status quo_, it’s common to hate on what we’re leaving behind. This was especially true with things like Flash and table layouts. But these tools came about in an attempt to push the web much farther than the current standards could manage, and the standards often caught up.\n\nThis is still happening today, as Javascript, HTML, and Javascript begin to provide functionality you once needed jQuery or React to manage. Would we have CSS custom properties and nesting today if SASS hadn’t provided them years ago? I am not sure.","src/content/posts/2023/11/goodbye-postcss/index.mdx",[384],"./columns.jpg","efd82d37d819cd50","2024/01/blog-more",{id:386,data:388,body:398,filePath:399,assetImports:400,digest:402,rendered:403},{title:389,subtitle:390,description:391,date:392,cover:393},"The underappreciated reason Google is useless","Maybe SEO spam is only part of the story","Search Engines have been overwhelmed by SEO spam, but is the struggling open web part of the problem?",["Date","2024-01-27T00:00:00.000Z"],{src:394,alt:395,description:396,attribution:397},"__ASTRO_IMAGE_./moss-center.png","A mostly empty, modern auditorium with musical instruments set up on the stage. The picture has been taken from the balcony. Small box seats are visible to either side. A screen on stage promotes details of the NPR show Mountain Stage","The old web benefitted from the enthusiastic participation of many people, but the social media era has redirected much of that energy elsewhere.",{name:32},"You don’t need me to tell you that search engines are struggling to be relevant. Often the blame falls on search engine optimization and Google’s business practices. Both contribute, no doubt. But Google — and the rest of us, actually — depended heavily on the volunteer attitude of the young web and its dedication to open access.\n\nOnce upon a time (and maybe still today, I am no expert), link quality was a critical part of Google’s PageRank algorithm. If your site did not have a lot of links to it, then you didn’t get high rankings. The thinking was that more links meant higher reliability, and that was effective for a little while.\n\nIf what you measure has economic value, the measurements will be manipulated. This is always true, whether it’s work hours, tax deductions, or [employee performance](https://hbr.org/2019/09/dont-let-metrics-undermine-your-business). Judging a site’s worth by its incoming links worked for a time, but once people realized back-links were valuable you started getting a lot of link farms and spam-bots building links to low-quality content.\n\nSEO folks, both white-hat and black-hat, focused on doing things to the content that boosted PageRank score without necessarily creating quality content. In response, Google kept coming up with more elaborate ways to sidestep the manipulation.\n\nAround 2007 though, as social media sites like Facebook and Twitter became popular, people who _used_ to make useful, entertaining, or quirky web sites started moving more and more of their work into these platforms. The economic and social benefit of having your _own_ web site declined. The value now was being Twitter, Facebook, or YouTube famous. The DIY spirit of the web was largely captured, centralized, and redirected to the economic benefit of just a handful of places.\n\nI am as guilty of making this shift as just about anyone else.\n\nSo as garbage generation was accelerating, authentic creation was captured and monetized by an increasingly smaller number of platforms. Not just Twitter and Facebook, either, but places like Reddit and Stack Overflow. Independent publishers were not just crowded out of PageRank by SEO practitioners, people just stopped making things outside of these platforms.\n\nEven some of the places that _used_ to be quality content ended up getting sold to or [commandeered by](https://www.businessinsider.com/the-hairpin-blog-ai-spam-content-farm-cybersquatting-2024-1?op=1) operators far more interested in advertising revenue than the material people were being attracted to the web site to see. Sites that remained content-focused started hiding more and more stuff behind paywalls and registration links. _The Verge_ has recently [opted for the former](https://www.theverge.com/subscriptions/hot-pod) and _404 Media_ [the latter](https://www.404media.co/why-404-media-needs-your-email-address/) have both recently elected for the latter.\n\nWhat search engines are looking for? Increasingly, it’s just not there to find.\n\nAnd now many of us who remain publishing independently are _blocking_ crawlers in an attempt to prevent our work being used to train the artificial intelligences other humans are using to make automatic garbage content at an unimaginable rate.\n\nWhere does that leave us?\n\nDespite it all, I think it’s important for people who have the inclination and ability to start making their own content again. Maybe that content is a blog like this one. Maybe it’s a fan site for an obscure Australian 70s children’s show. Maybe it’s [hand-curating links](https://jackyan.com/blog/2023/09/bring-back-the-human-curated-web-directory/).\n\nThe important bit is to stop posting that stuff on the Facebook machine or Blue Sky and _absolutely_ stop having anything to do with _X née Twitter_.\n\nThe web is _still_ open. Anyone who wants to learn how can publish on it, for free or very close to it. We should take advantage of it. I don’t think there will ever be a circumstance again where most of the material on the web is being made by people who care about what they are doing more than they care about monetizing traffic.\n\nBut we can keep at least part of the web weird. Let the bots go talk to each other.","src/content/posts/2024/01/blog-more/index.md",[401],"./moss-center.png","313f538d7be47af9",{html:404,metadata:405},"<p>You don’t need me to tell you that search engines are struggling to be relevant. Often the blame falls on search engine optimization and Google’s business practices. Both contribute, no doubt. But Google — and the rest of us, actually — depended heavily on the volunteer attitude of the young web and its dedication to open access.</p>\n<p>Once upon a time (and maybe still today, I am no expert), link quality was a critical part of Google’s PageRank algorithm. If your site did not have a lot of links to it, then you didn’t get high rankings. The thinking was that more links meant higher reliability, and that was effective for a little while.</p>\n<p>If what you measure has economic value, the measurements will be manipulated. This is always true, whether it’s work hours, tax deductions, or <a href=\"https://hbr.org/2019/09/dont-let-metrics-undermine-your-business\">employee performance</a>. Judging a site’s worth by its incoming links worked for a time, but once people realized back-links were valuable you started getting a lot of link farms and spam-bots building links to low-quality content.</p>\n<p>SEO folks, both white-hat and black-hat, focused on doing things to the content that boosted PageRank score without necessarily creating quality content. In response, Google kept coming up with more elaborate ways to sidestep the manipulation.</p>\n<p>Around 2007 though, as social media sites like Facebook and Twitter became popular, people who <em>used</em> to make useful, entertaining, or quirky web sites started moving more and more of their work into these platforms. The economic and social benefit of having your <em>own</em> web site declined. The value now was being Twitter, Facebook, or YouTube famous. The DIY spirit of the web was largely captured, centralized, and redirected to the economic benefit of just a handful of places.</p>\n<p>I am as guilty of making this shift as just about anyone else.</p>\n<p>So as garbage generation was accelerating, authentic creation was captured and monetized by an increasingly smaller number of platforms. Not just Twitter and Facebook, either, but places like Reddit and Stack Overflow. Independent publishers were not just crowded out of PageRank by SEO practitioners, people just stopped making things outside of these platforms.</p>\n<p>Even some of the places that <em>used</em> to be quality content ended up getting sold to or <a href=\"https://www.businessinsider.com/the-hairpin-blog-ai-spam-content-farm-cybersquatting-2024-1?op=1\">commandeered by</a> operators far more interested in advertising revenue than the material people were being attracted to the web site to see. Sites that remained content-focused started hiding more and more stuff behind paywalls and registration links. <em>The Verge</em> has recently <a href=\"https://www.theverge.com/subscriptions/hot-pod\">opted for the former</a> and <em>404 Media</em> <a href=\"https://www.404media.co/why-404-media-needs-your-email-address/\">the latter</a> have both recently elected for the latter.</p>\n<p>What search engines are looking for? Increasingly, it’s just not there to find.</p>\n<p>And now many of us who remain publishing independently are <em>blocking</em> crawlers in an attempt to prevent our work being used to train the artificial intelligences other humans are using to make automatic garbage content at an unimaginable rate.</p>\n<p>Where does that leave us?</p>\n<p>Despite it all, I think it’s important for people who have the inclination and ability to start making their own content again. Maybe that content is a blog like this one. Maybe it’s a fan site for an obscure Australian 70s children’s show. Maybe it’s <a href=\"https://jackyan.com/blog/2023/09/bring-back-the-human-curated-web-directory/\">hand-curating links</a>.</p>\n<p>The important bit is to stop posting that stuff on the Facebook machine or Blue Sky and <em>absolutely</em> stop having anything to do with <em>X née Twitter</em>.</p>\n<p>The web is <em>still</em> open. Anyone who wants to learn how can publish on it, for free or very close to it. We should take advantage of it. I don’t think there will ever be a circumstance again where most of the material on the web is being made by people who care about what they are doing more than they care about monetizing traffic.</p>\n<p>But we can keep at least part of the web weird. Let the bots go talk to each other.</p>",{headings:406,localImagePaths:407,remoteImagePaths:408,frontmatter:409,imagePaths:417},[],[],[],{title:389,subtitle:390,date:410,categories:411,tags:213,description:391,cover:415},["Date","2024-01-27T00:00:00.000Z"],[412,413,414],"Search Engines","Indie Web","100 Days to Offload",{src:401,alt:395,description:396,attribution:416},{name:32},[],"2023/08/ai-code",{id:418,data:420,body:430,filePath:431,assetImports:432,digest:434,rendered:435},{title:421,description:422,date:423,cover:424},"AI integration: challenges and discoveries","I spent a couple of weeks diving into coding _with_ AI, and there are a lot of challenges. The most concerning, however, have very little to do with the technology.",["Date","2023-08-09T00:00:00.000Z"],{src:425,alt:426,description:427,attribution:428},"__ASTRO_IMAGE_./gerbils.png","AI art of a bunch of gerbils riding an antique-looking open-top car across a dry lake bed, a cloud of dust behind them.","Get in, loser! We’re gonna find the bandwagon!",{name:363,link:429},"https://www.midjourney.com/app/jobs/ac510f79-a469-478d-a280-fbda50660b87/","So I’m coming off a R&D sprint investigating how to integrate the newer AI tools into our toolkit, and it’s been an interesting ride. I’ve learned a bit about prompt writing (“prompt engineering?” I’ll get to that), a bit about Python, a bit about Ruby, and a bit about neural nets. Not bad for a developer from Frontendistan.\n\nHere are a few of my observations.\n\n## That’s a heck of a lot of math\n\nEven using paid services, the APIs are slow and sometimes fail to respond at all. I read Stephen Wolfram’s book _What ChatGPT is Doing… and Why Does It Work_ and he explains that tokenizing text — breaking the text down into more manageable parts — is a pretty compute-intensive task. Every token has to go through every node in the neural net, and that neural net is 175 billion nodes. This suggests to me that if you have a text that’s one thousand tokens long, which is by no means outlandish, you’re looking at 175 trillion operations. With a “T.” That’s a hard number to think about. But for comparison’s sake, a human body has roughly 100 trillion cells.\n\nThink about that the next time you ask ChatGPT to make up a funny limerick about cheese sandwiches.\n\n> In a sandwich of cheese so divine,<br>\n> Between slices, it’s melted, a sign.<br>\n> With a crunch and a chew,<br>\n> It’s a flavor to pursue,<br>\n> Oh, that cheesy delight, so benign!<br>\n\nAnyway, what that means is that it takes a little while for the AI to think about what you are saying and then put together a good response. Kind of like what would happen to you if someone dropped an 800 word text on you and requested a sentiment analysis.\n\nThis is a pattern that we see repeated often with these Large Language Models. They were designed to mimic human writing, so they tend to make very human decisions.\n\n## No one really understands how it works\n\nNo, seriously. When they say “we don’t know how this works,” _they don’t know how this works_.\n\n> Why does one just add the token-value and token-position embedding vectors together? I don’t think there’s any particular science to this. It’s just that various different things have been tried, and this is one that seems to work. <cite>— Stephen Wolfram, “What ChatGPT is Doing…”</cite>\n\nWolfram uses an odd word for the tribal knowledge of tricks that seem to work in developing and training a neural net. That word is “lore.” He uses it a lot.\n\n> Sometimes—especially in retrospect—one can see at least a glimmer of a “scientific explanation” for something that’s being done. But mostly things have been discovered by trial and error, adding ideas and tricks that have progressively built a significant lore about how to work with neural nets. <cite>— Stephen Wolfram, “What ChatGPT is Doing…”</cite>\n\nWolfram is no AI neophyte — if the name is not ringing bells for you, [read up on Wikipedia](https://en.wikipedia.org/wiki/Stephen_Wolfram). The fact that this physicist / computer scientist / mathematician says “we don’t know” and “lore” a lot is sobering.\n\n## Unsurprisingly, prompt writing works the same way\n\nI _really_ don’t like the term “prompt engineering.” There are lots of definitions of engineering, but they almost always rest on applying scientific principles in an orderly fashion to build, create, or predict the behavior of machines under specific conditions.\n\nThe American Engineer’s Council for Professional Development actually uses the phrase “to construct or operate [these machines] with full cognizance of their design.” I doubt you ever hear an engineer talking about “steel girder tensile strength lore.”\n\nThe way the prompt writing works (briefly) is this: you think of what you need, ask the AI for an answer, and then continually revise your prompt until you get something acceptable back.\n\nWhen people are showing off what an AI can do, it’s something like a magic trick. But when you need it for actual _work_, it turns out you’re doing a fair amount of heavy lifting yourself. Assuming you care about the quality of the results, that is.\n\n## You really can’t count on the results\n\nThat is to say the results of any specific prompt are not precisely repeatable. There’s a configuration value called “temperature” that tamps down or ramps up the “creativity” for ChatGPT (“who names these things?” asked a colleague), but even at its lowest setting you can get some variation in responses when you repeat the same question over and over. Kind of like what you would get with a human, actually.\n\n_There are many cases where this is undesirable_. The enormous advantage of programming is that the computer does exactly what it is told, and it does it the same way every time. Unless, of course, you go to a great deal of effort to _introduce_ randomness into the system. Even then it might not be very random.\n\n> “One thing that traditional computer systems aren’t good at is coin flipping,” says Steve Ward, Professor of Computer Science and Engineering at MIT’s Computer Science and Artificial Intelligence Laboratory. “They’re deterministic, which means that if you ask the same question you’ll get the same answer every time. In fact, such machines are specifically and carefully programmed to eliminate randomness in results. They do this by following rules and relying on algorithms when they compute.” <cite>[Can a computer generate a truly random number?](https://engineering.mit.edu/engage/ask-an-engineer/can-a-computer-generate-a-truly-random-number/)</cite>\n\nThis is perfectly fine if you are trying to get natural speech, but kind of a bummer if you need to mill that block of aluminum to within 0.001\" of the spec. You _may_ even want repeatable results in natural language, because there’s a small but non-zero chance the LLM might decide to start calling your very irate client “dawg.”\n\nMuch like your human support agents, in fact.\n\n## Beware vendor lock-in\n\nUntil and unless we get LLMs that are _open source_ and _freely distributed_, any code you write that depends on those is going to be managed by a company that’s in it for the benjamins. Right now those requests may be cheap, but you can bet at some point [enshitification](https://jacobin.com/2023/05/cory-doctorow-big-tech-internet-monopoly-capitalism-artificial-intelligence-crypto) will sit in.\n\nSuddenly you are the Third Party Vendor to OpenAI’s Amazon. When they decide to change the model,  your prompts are suddenly turning out much different stuff. Maybe they ban all politics. Or all criticism of Amazon. Or all mentions of competing LLMs. [Stable Diffusion](https://www.theverge.com/2022/11/24/23476622/ai-image-generator-stable-diffusion-version-2-nsfw-artists-data-changes) demonstrated they were able to make those kinds of censorial changes, at least with their art bot.\n\nMaybe they pull a Reddit and hike the price of their API drastically. Or they pull a Twitter and shut the API off altogether.\n\nThis is not a new risk; tons of folks built businesses on services provided by YouTube, TikTok, Ebay, Twitter, and Reddit, only to have service fees, changes in direction, or even an increased censorious attitude undermine all of their work.\n\n## It’s exciting (and worrying)\n\nAll of that said, the AI makes some previously very difficult programming tasks _remarkably_ easy, and I think we’ve just scratched the surface of those. No doubt future generations of LLMs will get faster. Maybe we will replace “lore” with better understanding. Maybe prompt writing will actually become _engineering_ at some point. Maybe we will find a way to make these very complex, poorly understood tools respond in a consistent manner without us having to worry about it embarrassing us in front of Mom or starting political fights over Thanksgiving.\n\nThe last concern, though, is more about the _business_ structure of AI. As are concerns about what AI ultimately means to people’s jobs. Those will require some political action, political activism, and maybe a serious rethink of our economic foundations. I don’t know if it’s gonna get worse, or gonna get better, but it’s certainly gonna get weird.","src/content/posts/2023/08/ai-code/index.md",[433],"./gerbils.png","c6a1577600f861d0",{html:436,metadata:437},"<p>So I’m coming off a R&#x26;D sprint investigating how to integrate the newer AI tools into our toolkit, and it’s been an interesting ride. I’ve learned a bit about prompt writing (“prompt engineering?” I’ll get to that), a bit about Python, a bit about Ruby, and a bit about neural nets. Not bad for a developer from Frontendistan.</p>\n<p>Here are a few of my observations.</p>\n<h2 id=\"thats-a-heck-of-a-lot-of-math\">That’s a heck of a lot of math</h2>\n<p>Even using paid services, the APIs are slow and sometimes fail to respond at all. I read Stephen Wolfram’s book <em>What ChatGPT is Doing… and Why Does It Work</em> and he explains that tokenizing text — breaking the text down into more manageable parts — is a pretty compute-intensive task. Every token has to go through every node in the neural net, and that neural net is 175 billion nodes. This suggests to me that if you have a text that’s one thousand tokens long, which is by no means outlandish, you’re looking at 175 trillion operations. With a “T.” That’s a hard number to think about. But for comparison’s sake, a human body has roughly 100 trillion cells.</p>\n<p>Think about that the next time you ask ChatGPT to make up a funny limerick about cheese sandwiches.</p>\n<blockquote>\n<p>In a sandwich of cheese so divine,<br>\nBetween slices, it’s melted, a sign.<br>\nWith a crunch and a chew,<br>\nIt’s a flavor to pursue,<br>\nOh, that cheesy delight, so benign!<br></p>\n</blockquote>\n<p>Anyway, what that means is that it takes a little while for the AI to think about what you are saying and then put together a good response. Kind of like what would happen to you if someone dropped an 800 word text on you and requested a sentiment analysis.</p>\n<p>This is a pattern that we see repeated often with these Large Language Models. They were designed to mimic human writing, so they tend to make very human decisions.</p>\n<h2 id=\"no-one-really-understands-how-it-works\">No one really understands how it works</h2>\n<p>No, seriously. When they say “we don’t know how this works,” <em>they don’t know how this works</em>.</p>\n<blockquote>\n<p>Why does one just add the token-value and token-position embedding vectors together? I don’t think there’s any particular science to this. It’s just that various different things have been tried, and this is one that seems to work. <cite>— Stephen Wolfram, “What ChatGPT is Doing…”</cite></p>\n</blockquote>\n<p>Wolfram uses an odd word for the tribal knowledge of tricks that seem to work in developing and training a neural net. That word is “lore.” He uses it a lot.</p>\n<blockquote>\n<p>Sometimes—especially in retrospect—one can see at least a glimmer of a “scientific explanation” for something that’s being done. But mostly things have been discovered by trial and error, adding ideas and tricks that have progressively built a significant lore about how to work with neural nets. <cite>— Stephen Wolfram, “What ChatGPT is Doing…”</cite></p>\n</blockquote>\n<p>Wolfram is no AI neophyte — if the name is not ringing bells for you, <a href=\"https://en.wikipedia.org/wiki/Stephen_Wolfram\">read up on Wikipedia</a>. The fact that this physicist / computer scientist / mathematician says “we don’t know” and “lore” a lot is sobering.</p>\n<h2 id=\"unsurprisingly-prompt-writing-works-the-same-way\">Unsurprisingly, prompt writing works the same way</h2>\n<p>I <em>really</em> don’t like the term “prompt engineering.” There are lots of definitions of engineering, but they almost always rest on applying scientific principles in an orderly fashion to build, create, or predict the behavior of machines under specific conditions.</p>\n<p>The American Engineer’s Council for Professional Development actually uses the phrase “to construct or operate [these machines] with full cognizance of their design.” I doubt you ever hear an engineer talking about “steel girder tensile strength lore.”</p>\n<p>The way the prompt writing works (briefly) is this: you think of what you need, ask the AI for an answer, and then continually revise your prompt until you get something acceptable back.</p>\n<p>When people are showing off what an AI can do, it’s something like a magic trick. But when you need it for actual <em>work</em>, it turns out you’re doing a fair amount of heavy lifting yourself. Assuming you care about the quality of the results, that is.</p>\n<h2 id=\"you-really-cant-count-on-the-results\">You really can’t count on the results</h2>\n<p>That is to say the results of any specific prompt are not precisely repeatable. There’s a configuration value called “temperature” that tamps down or ramps up the “creativity” for ChatGPT (“who names these things?” asked a colleague), but even at its lowest setting you can get some variation in responses when you repeat the same question over and over. Kind of like what you would get with a human, actually.</p>\n<p><em>There are many cases where this is undesirable</em>. The enormous advantage of programming is that the computer does exactly what it is told, and it does it the same way every time. Unless, of course, you go to a great deal of effort to <em>introduce</em> randomness into the system. Even then it might not be very random.</p>\n<blockquote>\n<p>“One thing that traditional computer systems aren’t good at is coin flipping,” says Steve Ward, Professor of Computer Science and Engineering at MIT’s Computer Science and Artificial Intelligence Laboratory. “They’re deterministic, which means that if you ask the same question you’ll get the same answer every time. In fact, such machines are specifically and carefully programmed to eliminate randomness in results. They do this by following rules and relying on algorithms when they compute.” <cite><a href=\"https://engineering.mit.edu/engage/ask-an-engineer/can-a-computer-generate-a-truly-random-number/\">Can a computer generate a truly random number?</a></cite></p>\n</blockquote>\n<p>This is perfectly fine if you are trying to get natural speech, but kind of a bummer if you need to mill that block of aluminum to within 0.001” of the spec. You <em>may</em> even want repeatable results in natural language, because there’s a small but non-zero chance the LLM might decide to start calling your very irate client “dawg.”</p>\n<p>Much like your human support agents, in fact.</p>\n<h2 id=\"beware-vendor-lock-in\">Beware vendor lock-in</h2>\n<p>Until and unless we get LLMs that are <em>open source</em> and <em>freely distributed</em>, any code you write that depends on those is going to be managed by a company that’s in it for the benjamins. Right now those requests may be cheap, but you can bet at some point <a href=\"https://jacobin.com/2023/05/cory-doctorow-big-tech-internet-monopoly-capitalism-artificial-intelligence-crypto\">enshitification</a> will sit in.</p>\n<p>Suddenly you are the Third Party Vendor to OpenAI’s Amazon. When they decide to change the model,  your prompts are suddenly turning out much different stuff. Maybe they ban all politics. Or all criticism of Amazon. Or all mentions of competing LLMs. <a href=\"https://www.theverge.com/2022/11/24/23476622/ai-image-generator-stable-diffusion-version-2-nsfw-artists-data-changes\">Stable Diffusion</a> demonstrated they were able to make those kinds of censorial changes, at least with their art bot.</p>\n<p>Maybe they pull a Reddit and hike the price of their API drastically. Or they pull a Twitter and shut the API off altogether.</p>\n<p>This is not a new risk; tons of folks built businesses on services provided by YouTube, TikTok, Ebay, Twitter, and Reddit, only to have service fees, changes in direction, or even an increased censorious attitude undermine all of their work.</p>\n<h2 id=\"its-exciting-and-worrying\">It’s exciting (and worrying)</h2>\n<p>All of that said, the AI makes some previously very difficult programming tasks <em>remarkably</em> easy, and I think we’ve just scratched the surface of those. No doubt future generations of LLMs will get faster. Maybe we will replace “lore” with better understanding. Maybe prompt writing will actually become <em>engineering</em> at some point. Maybe we will find a way to make these very complex, poorly understood tools respond in a consistent manner without us having to worry about it embarrassing us in front of Mom or starting political fights over Thanksgiving.</p>\n<p>The last concern, though, is more about the <em>business</em> structure of AI. As are concerns about what AI ultimately means to people’s jobs. Those will require some political action, political activism, and maybe a serious rethink of our economic foundations. I don’t know if it’s gonna get worse, or gonna get better, but it’s certainly gonna get weird.</p>",{headings:438,localImagePaths:457,remoteImagePaths:458,frontmatter:459,imagePaths:476},[439,442,445,448,451,454],{depth:176,slug:440,text:441},"thats-a-heck-of-a-lot-of-math","That’s a heck of a lot of math",{depth:176,slug:443,text:444},"no-one-really-understands-how-it-works","No one really understands how it works",{depth:176,slug:446,text:447},"unsurprisingly-prompt-writing-works-the-same-way","Unsurprisingly, prompt writing works the same way",{depth:176,slug:449,text:450},"you-really-cant-count-on-the-results","You really can’t count on the results",{depth:176,slug:452,text:453},"beware-vendor-lock-in","Beware vendor lock-in",{depth:176,slug:455,text:456},"its-exciting-and-worrying","It’s exciting (and worrying)",[],[],{title:421,date:460,description:422,categories:461,tags:213,cover:464,egbert:466},["Date","2023-08-09T00:00:00.000Z"],[462,463],"AI","Dev",{src:433,alt:426,description:427,attribution:465},{name:363,link:429},{titles:467,summaries:471,sentiment:475},[468,469,470],"The Mysteries of AI: Insights from an R&D Sprint","Unraveling the Secrets of AI Integration","AI Integration: Challenges and Discoveries",[472,473,474],"Delve into the world of AI integration and learn about the challenges and discoveries made during an R&D sprint.","Discover the mysteries of AI as the author shares their insights from a recent exploration into integrating AI tools.","Uncover the secrets behind AI integration and gain valuable knowledge from a developer’s perspective.","The sentiment of the post is generally positive, with the author expressing excitement about the potential of AI and acknowledging its ability to simplify complex programming tasks. However, there is also a sense of caution and concern regarding the limitations and risks associated with AI, particularly in terms of its business structure and impact on jobs. Overall, the post presents a balanced view of the subject matter.",[],"2024/01/oatmeal",{id:477,data:479,body:488,filePath:489,assetImports:490,digest:492,rendered:493},{title:480,description:481,date:482,cover:483},"Instant Pot steel-cut oatmeal","The easiest way I know to make oatmeal that doesn’t come in an envelope.",["Date","2024-01-09T00:00:00.000Z"],{src:484,alt:485,description:486,attribution:487},"__ASTRO_IMAGE_./oatmeal.png","Oatmeal with blueberries and slivered almonds in a blue bowl","Oatmeal always tastes better than it looks.",{name:32},"Although the original craze was some years ago, we make regular use of our Instant Pot. This time of the year I use it a lot to make oatmeal. Making oatmeal in the pot is pretty straightforward:\n\n* 1 cup of steel-cut “traditional” (not quick) oatmeal\n* 2½ cups of water\n* Pinch of salt\n\nIf you haven’t had steel-cut oatmeal it’s worth a try; steel-cut oats have a chewier, more interesting texture. Save the rolled oats for cookies.\n\nI set the Instant Pot for ten minutes and then let it sit for a natural release. Since it’s an Instant Pot and not a pressure cooker or pot on the stove, I can walk away from it and do something else. Like blog about how to make oatmeal (for example).\n\nI tend to dress the oatmeal up a bit, though. Before I start the Instant Pot I will add small dried fruit. Our local Aldi has a good selection of these, so sometimes it’s blueberries, sometimes it’s cherries, and I have some cranberries here as well.\n\nIf I have fresh fruit instead, I put it in the pot after cooking. Dried fruit, however, gets nicely re-hydrated during cooking and loses the chewy raisin texture.\n\nAfter the oatmeal is done, I will then add the following. No real measurements here because I just eyeball it and oatmeal tends to be very forgiving.\n\n* 1 tablespoon of butter\n* Vanilla extract, ½ teaspoon\n* Almond extract, ¼ teaspoon\n* ½ tablespoon or so of kirsch, also called “kirschwasser” or “cherry brandy”\n* A small handful of slivered almonds\n\nI bring half & half, ground cinnamon, salt, and sugar to the table so we can add these to individual taste.\n\nI’m convinced the kirsh unlocks some additional flavor and it’s not nearly enough to get even slightly buzzed. When you add it to hot oatmeal you will probably get a considerable whiff of alcohol that might make you think you’ve added too much, but I’ve never tasted alcohol in the oatmeal. You don’t need my permission to leave it out, of course. It’s your oatmeal.\n\nThese are just the things I like; I know some other folks sweeten the oatmeal with maple syrup, which sounds good. Other fruits and nuts and any of the “pumpkin spice” flavors are probably good bets as well. Just save everything except _dried_ fruits for _after_ the Instant Pot is done.","src/content/posts/2024/01/oatmeal/index.md",[491],"./oatmeal.png","29e746db3e6a89d1",{html:494,metadata:495},"<p>Although the original craze was some years ago, we make regular use of our Instant Pot. This time of the year I use it a lot to make oatmeal. Making oatmeal in the pot is pretty straightforward:</p>\n<ul>\n<li>1 cup of steel-cut “traditional” (not quick) oatmeal</li>\n<li>2½ cups of water</li>\n<li>Pinch of salt</li>\n</ul>\n<p>If you haven’t had steel-cut oatmeal it’s worth a try; steel-cut oats have a chewier, more interesting texture. Save the rolled oats for cookies.</p>\n<p>I set the Instant Pot for ten minutes and then let it sit for a natural release. Since it’s an Instant Pot and not a pressure cooker or pot on the stove, I can walk away from it and do something else. Like blog about how to make oatmeal (for example).</p>\n<p>I tend to dress the oatmeal up a bit, though. Before I start the Instant Pot I will add small dried fruit. Our local Aldi has a good selection of these, so sometimes it’s blueberries, sometimes it’s cherries, and I have some cranberries here as well.</p>\n<p>If I have fresh fruit instead, I put it in the pot after cooking. Dried fruit, however, gets nicely re-hydrated during cooking and loses the chewy raisin texture.</p>\n<p>After the oatmeal is done, I will then add the following. No real measurements here because I just eyeball it and oatmeal tends to be very forgiving.</p>\n<ul>\n<li>1 tablespoon of butter</li>\n<li>Vanilla extract, ½ teaspoon</li>\n<li>Almond extract, ¼ teaspoon</li>\n<li>½ tablespoon or so of kirsch, also called “kirschwasser” or “cherry brandy”</li>\n<li>A small handful of slivered almonds</li>\n</ul>\n<p>I bring half &#x26; half, ground cinnamon, salt, and sugar to the table so we can add these to individual taste.</p>\n<p>I’m convinced the kirsh unlocks some additional flavor and it’s not nearly enough to get even slightly buzzed. When you add it to hot oatmeal you will probably get a considerable whiff of alcohol that might make you think you’ve added too much, but I’ve never tasted alcohol in the oatmeal. You don’t need my permission to leave it out, of course. It’s your oatmeal.</p>\n<p>These are just the things I like; I know some other folks sweeten the oatmeal with maple syrup, which sounds good. Other fruits and nuts and any of the “pumpkin spice” flavors are probably good bets as well. Just save everything except <em>dried</em> fruits for <em>after</em> the Instant Pot is done.</p>",{headings:496,localImagePaths:497,remoteImagePaths:498,frontmatter:499,imagePaths:505},[],[],[],{title:480,date:500,description:481,categories:501,tags:213,cover:503},["Date","2024-01-09T00:00:00.000Z"],[502,414],"Food",{src:491,alt:485,description:486,attribution:504},{name:32},[],"2024/03/font-stack",{id:506,data:508,body:512,filePath:513,digest:514,deferredRender:20},{title:509,description:510,date:511},"Using modern font stacks","Goodbye Google Fonts, hello (again) system fonts",["Date","2024-03-25T12:02:38.000Z"],"I really enjoy choosing fonts for web sites, even though I am not good at it.  There’s another problem with fonts, though — they tend to be pretty heavy and they can take a while to load. Both of those always left me feeling a bit guilty about indulging my font fetish, but what alternatives were there? The old 'Times New Roman', 'serif' type stacks of yesteryear?\n\nEnter [Modern Font Stacks](https://modernfontstacks.com/), a web site created by [Dan Klammer](https://danklammer.com/). Dan’s taken some time to figure out what fonts are commonly available, grouped them into common typeface categories, and created new, modern font stacks.\n\nSomewhere on this page is a font selector tool you can use to change the font stack I am using here. I particularly like the “Geometric Humanist” set. I also like “Rounded Sans” but there seems to be an error with the ellipsis on at least one of the fonts. And you know how [I love my ellipsis](https://thudfactor.com/posts/2024/02/punctuation/).\n\nNot all of the categories will look different on every device. Android in particular ships with a stingy quantity of alternative fonts, so chances are you are always going to end up with either Droid Sans or Droid Serif. But they all resolve to _something_ and don’t require any additional downloads.\n\n_If_ you still want to choose your own fonts, though, you can still use these. Match your custom font to one of the typeface genres, then use that genre as a fallback. It’s a great way to make sure Raleway (for example) doesn’t just resolve to Arial when people have custom fonts turned off.\n\nBut maybe your use case doesn’t require custom fonts anyway? If you’re doing a blog, particularly a technical blog, custom fonts arguably don’t add much to the experience. Most of these fonts will serve just fine.","src/content/posts/2024/03/font-stack/index.mdx","877ed16e143f4cb2","2024/02/punctuation",{id:515,data:517,body:526,filePath:527,assetImports:528,digest:529,deferredRender:20},{title:518,subtitle:519,description:520,date:521,cover:522},"Real punctuation for programmers","But don’t quote me on that…","How to give your UI a more polished look just by using the correct punctuation.",["Date","2024-02-15T00:00:00.000Z"],{src:234,alt:235,description:523,attribution:524},"Close and picky attention to detail is what distinguishes professional typesetting from mere typing.",{name:238,link:239,license:525},{name:241,link:242},"import ArticleFigure from \"@components/ContentItems/ArticleFigure/index.astro\";\n\nMy fellow developers find it tedious, but I always check punctuation in public-facing text in pull requests. Punctuation is a deep and complex subject, and our typewriter layouts—the US layouts, at least—still reflect the legacy of an earlier age. Here I want to discuss common and often misused punctuation marks: quotation marks, apostrophes, and ellipsis.\n\nTo get professional results you’ll need to learn a few more rules, a few more keystrokes, and probably how to use your operating system’s character viewer. My experience is that Mac users have a bit of an easier time with this, since a lot of the _common_ extended punctuation set is available through key combinations.\n\nThat seems not to be the case for Windows users. Y’all have to use the Character Map app or have a keyboard with a number pad. [More information for Windows users](https://support.microsoft.com/en-us/office/insert-ascii-or-unicode-latin-based-symbols-and-characters-d13f58d3-7bcb-44a7-a4d5-972ee12e50e0).\n\n## Ellipsis\n\nLet’s start with an easy one: the ellipsis `…`. The ellipsis is used when words are dropped from a quotation, but people also use them do indicate uncertainly or a speaker trailing off…\n\nThe pre-word processor typewriter way of producing ellipsis is to type three periods close together, as `...`. Sometimes people put spaces in between, so it looks like `. . .`. _Or_ you could use the actual ellipsis character. On Mac keyboards, this is available with the keystroke `Opt-;`.\n\n## Quotation Marks\n\nThe QWERTY keyboard has one key for quotation marks, `'` un-shifted and `\"` with shift. There are four more marks, however. I’ve heard these called “typographer’s quotes” or “curly quotes.” Some people call them “smart quotes,” because that was the name of an early word-processing feature that automatically replaced `\"` and `'` with the correct marks.\n\n(The readily-accessible varieties of curly quotes on our keyboards are still correct if you are using them for foot `'` or inch `\"`. They can also be used for minutes and seconds, either as fractions of an hour or of a degree.)\n\nText editors and web forms don’t usually replace these for us, at least not without persuasion. That means you have to know how to use them manually. Open marks are `“` or `‘`. Depending on the typeface, those curves towards the right, are thicker on the bottom part of the mark, or both. Closed marks are `”` or `’`, curve to the left, are thicker on the top, or both. In American, Canadian, and New Zealand English, quotations are nested by alternating between `“”` and `‘’`. Elsewhere, it’s the opposite.\n\nMac users can access these quotes on the `[` and `]` keys:\n\n<ArticleFigure>\n\t<table slot=\"fig\">\n\t\t<caption>Keystrokes required for curly quotes (Mac)</caption>\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th>Keystroke</th>\n\t\t\t\t<th>Character</th>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t<tr>\n\t\t\t\t<td>Opt-[</td>\n\t\t\t\t<td>“</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>Shift-Opt-[</td>\n\t\t\t\t<td>”</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>Opt-]</td>\n\t\t\t\t<td>‘</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>Shift-Opt-]</td>\n\t\t\t\t<td>’</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n\tFun fact: the Mac OS has had these keystrokes in place for _ages_. A major selling point of\n\tpre-web Macs was their use in desktop publishing, and I learned about these from Robin Williams’s\n\t(not that Robin Williams) classic desktop publishing book [_The Mac is Not a\n\tTypewriter_](https://openlibrary.org/works/OL3502195W/The_Mac_is_not_a_typewriter?edition=key%3A/books/OL8416336M).\n</ArticleFigure>\n\nApostrophes are always the closed `’` variant. Although you may have heard people say they are _only_ used for possession or contraction, the [real rules](https://en.wikipedia.org/wiki/Apostrophe#Usage_in_English) are frighteningly complicated and add nothing to the language, which is why playwright George Bernard Shaw refused to use them. Some folks think we should [stop using apostrophes](https://slate.com/human-interest/2013/09/the-apostrophe-why-the-punctuation-is-unnecessary-confusing-and-condescending.html) altogether. Suggesting this is a good way to start a fight. It’s right up there with saying “I don’t think schools should teach cursive” or “knives should go point-down in the dishwasher.”\n\n## International quotes\n\nNotice that I am saying “English.” If you are doing internationalization, quotation marks are a bit different. Spanish and French use these double angles: `«»`. They are called “comillas” or “guillemets” (respectively), and should _not_ be replaced by doubling the easily-accessible angle brackets `<>` on the English keyboard. Other languages use different symbols and they all have subtleties about spacing and punctuation around the marks. For example, French puts spaces on both sides of the guillemets, but Spanish does not add spaces between comillas and the text they enclose.\n\nSome _very_ picky semantic HTML fans will say you can just replace quotation marks with the `<q>` element and the browser’s localization will take care of the rest. Well, sorta. I did some quick testing in Chrome, and while the browser does seem to handle the nesting of quotations correctly, it was unaware of the differences between UK and US English conventions and did not respect French spacing conventions, either.I would expect the same to be true of the placement of punctuation inside or outside of the quotation marks. If you _want_ fine-grained control instead of just getting within the general proximity of correct, you will need to leave that `<q>` tag alone.\n\nIn any case, isn’t it strange to have an element for one set of punctuation but none of the others? Spanish, for example, occasionally has punctuation at the _beginning_ of sentences: “¿Cómo estás? ¡Muy bien, gracias!” But there’s no automatically internationalized tag for “question” or “exclamation” to help us out there.\n\n## Some programmery details\n\n_I_ think you should use curly quotes in text just because they look a lot more polished. They give a text more of a typeset, published feel, while the straight quotes always look to me like someone was in a hurry or not paying attention. But programmers have another good reason to learn this trick: you don't have to escape-quote curly quotes.\n\n```js\nconst straightQuotes = '\"Well, butter my britches,\" bellowed the bat.';\nconst curlyQuotes = \"“Well, butter my britches,” bellowed the bat.\";\n```\n\nThis is great, because I occasionally see programmers choose quotation marks based on what they’d have to escape:\n\n```js\nconst iUsedDoubleQuotes = \"I don't like escaping characters so 'quotations get single quotes' now.\";\n```\n\nThis arbitrary use triggers typesetters and armchair grammarians both.\n\n“But wait!” Some of you say. “If you are writing HTML, shouldn’t you be using HTML entities?” If you’re a young developer wondering what the heck those are, we’re talking about this nonsense:\n\n```html\n<p>&ldquo;Well, butter by britches,&rdquo; bellowed&hellip;\"</p>\n```\n\nThese kinds of special characters were needed a long time ago when we were using much older character encoding strategies. Nowadays you should use UTF-8 encoding unless you have [a very good reason otherwise](https://www.w3.org/International/questions/qa-choosing-encodings#nutshell). In fact, UTF-8 encoding is typically the default, so unless you are using old software or have deliberately changed it, it’s likely the files you write code in are encoded as UTF-8 already.\n\nThat means you can use all of those special characters, including emojis (🤢), unusual punctuation (§), and even mathematical symbols. You can even use them as variable names! You don’t have to name a variable “delta” anymore, you can just go ahead and say:\n\n```js\nconst Δ = Math.abs(oldValue - newValue);\n```\n\nBut think twice, maybe, about your colleagues on Windows machines, because you’re making those variable names very difficult to type.","src/content/posts/2024/02/punctuation/index.mdx",[246],"5141afdacbc06ba0","2024/03/pixels",{id:530,data:532,body:537,filePath:538,digest:539,deferredRender:20},{title:533,description:534,date:535,updatedDate:536},"Maybe sometimes you should use pixels","The conventional wisdom is that you should not use pixel units, but maybe sometimes you should?",["Date","2024-03-14T23:02:38.000Z"],["Date","2024-03-16T11:43:13.000Z"],"import ArticleFigure from \"@components/ContentItems/ArticleFigure/index.astro\";\nimport FontSizeSettings from \"./font-size-selector.png\";\nimport TextZoomBroken from \"./text-zoom-broken.png\";\n\nWhen I posted the early stages of my redesign at the end of February, someone on Mastodon said I should change the CSS of my main container to use `em` units instead of `px` because it’s “more accessible.”\n\nAbout that.\n\nI’ve been doing this web development thing for a bit now, and sure, I’ve heard that line for years. Believed and used it, too.\n\nThe conventional wisdom is that you should convert all of your absolute units (like pixels) to relative units like `em` or `rem` so people who like to use a larger font size won’t have their choices overridden. And we’ve been doing that for years. I’ve even made a few SASS mixins in my time to automatically convert pixel values into `rem` units, and have for many years diligently converted every `px` in my codebase to `rem`. Even the border widths.\n\n`1px` is `0.0625rem`, by the way.\n\n_But_ I hate putting tools out of use without a super good reason, and so I’ve been wondering — is there a place for pixels?\n\nI think there is. In fact, I think pixels work best under most circumstances.\n\nI’ll spoil the ending for you: relative sizes are great for fonts and line-spacing, but for other elements like padding, margin, borders, and layout sizes, pixels may actually be preferable.\n\nThat’s because browsers offer _two_ different ways of scaling fonts.\n\n## A Tale of Two Zooms\n\nSome time ago — quite some time ago, in fact — browsers standardized on “page zoom.” If you use zoom right now in Safari, Firefox, or Chromium browsers (Arc, Edge, Chrome, Opera) you will notice everything on this page gets bigger, despite the fact that I’ve used a mixture of `px` and `rem`. Zoom in far enough on the desktop and you will start to see the mobile layout of this site.\n\nAll of the browsers determined that zooming in and out was a critical enough accessibility issue that it couldn’t be left up to the entire Web to retrofit font sizes to `px` or `rem`. So: setting margins, padding, and font sizes in pixels doesn’t disable zoom anymore, and it hasn’t in a long time.\n\nOn the other hand, browsers let you set the default base font size. “Normal” here is `16px` (with some exceptions).\n\n<ArticleFigure\n\timage={FontSizeSettings}\n\talt=\"A screenshot from Chrome settings showing an active 'font size' menu, with 'very large' selected.\"\n>\n\tHere in the browser appearance settings in Chrome you can set the base font size independently of\n\tpage zoom.\n</ArticleFigure>\n\nChrome has their font size settings buried pretty deep in the settings. Safari binds text-only size increases to `⌘⌥ +` / `⌘⌥ -`. Firefox has a “zoom text only” toggle in the zoom menu. If you’re so inclined you can try those out now here on this page. What you should see is that changing the font size alone makes the text on this page bigger or smaller, but the layout doesn’t change otherwise.\n\n<p style=\"font-size: 16px\">\n\tThis text, on the other hand, ignores the font size changes because I’ve set the font size in\n\tpixels. So it remains true that setting the font size in pixels overrides the user’s expressed\n\tpreferences. The standard page zoom, on the other hand, won’t make this paragraph look any\n\tdifferent from the others.\n</p>\n\n**Update March 16, 2024:** [Nicolas Hoizey pointed out](https://mamot.fr/@nhoizey/112104806072228680) that Firefox zooms text even if the size is set in pixels. This is also the case in Safari. So to see the behavior I described above, you have to be using Chrome (or its derivatives). Interestingly, the only thing this effectively changes is that if Chrome adopts this strategy, too, even sizing fonts in `rem` or `em` will become an academic / purity exercise.\n\n<ArticleFigure\n\timage={TextZoomBroken}\n\talt=\"A screenshot of this page, with the browser text size set to “very large.”\"\n>\n\tHere’s what it looks like on my computer if I set the font size setting to “very large” in Chrome.\n\tThe font sizes set in `rem` or `em` scale, but the paragraph set in `px` stays the same\n\tregardless.\n</ArticleFigure>\n\nThis behavior is possible _here_ because I’ve set margins, padding, and responsive container sizes controlling layout to rely on pixel values, while keeping font size and line heights relative.\n\nIf, however, you follow the conventional wisdom (“`px` units are evil”), the end result is that changing the base font size _alone_ works exactly the same way as page zoom _already_ works.\n\nYou are re-implementing page zoom, which is pointless. But you are also _removing_ the ability for users to change font size independently.\n\nWhere does this leave us? Well.\n\n1. **Sizing everything using `px`** satisfies [WCAG 2.1 1.4.4](https://wcag.com/designers/1-4-4-resize-text/) through [technique G142](https://www.w3.org/WAI/WCAG21/Techniques/general/G142) as long as people use one of the very common browsers with “page zoom.” People who want to resize text independently are just out of luck.\n2. **Sizing everything using `rem`** satisfies the same requirement through [technique C28](https://www.w3.org/WAI/WCAG21/Techniques/css/C28) and [technique G146](https://www.w3.org/WAI/WCAG21/Techniques/general/G146), but since that’s _already_ met by browser page zoom, resizing text independently is impossible.\n3. **Mixing `px` and `rems` deliberately** satisfies accessibility requirements through [technique G179](https://www.w3.org/WAI/WCAG21/Techniques/general/G179), _as long as access to all of the content and functionality remains available_. This approach does not interfere with the native browser support offered through page zoom. So it’s the only choice that supports both page and text-only zoom on Chrome.\n\nThe third option is the most difficult. If you go this route, you have decide what should scale with font size and what shouldn’t. That’s many new judgement calls and a lot more testing. Maybe you don’t want or can’t support that. But it does preserve your visitors’ ability to scale text independently of your layout.\n\nIt also demonstrates why following conventional wisdom banning specific practices without regard for context has unintended consequences and leads to pointless complexity.\n\nThat, at least, is my thinking for this project. Am I wrong? Perhaps I am wrong. Maybe conventional wisdom is conventional for good reason, and my attempt to support text-only preferences is the real waste of time and resources. I’d love to hear your opinions on the matter, so [let me know on Mastodon](https://hachyderm.io/@thudfactor).","src/content/posts/2024/03/pixels/index.mdx","57afc85ca50e648e","2024/05/editor",{id:540,data:542,body:551,filePath:552,assetImports:553,digest:555,rendered:556},{title:543,description:544,date:545,cover:546},"Seeking a new editor","Some thoughts about changing up my typical toolset",["Date","2024-05-25T11:05:25.000Z"],{src:547,alt:548,description:549,attribution:550},"__ASTRO_IMAGE_./blue-sage.png","A short columnar flower blossom with tiny, white and blue blossoms.","A mealy blue sage blossom (\"mealy\" is part of the name), photographed at Busch Gardens Williamsburg in 2023.",{name:32},"This week I started looking at other editing tools. I've been a pretty happy user of VSCode for years, but Microsoft's stewardship has me feeling antsy. Their eagerness to work AI into every corner of every process everywhere seems irresponsibly premature at best.\n\nI started out dubious about the value of AI for developers, and several months experience with Github Copilot has not improved that very much. When it works, it's very useful. But those \"when it works\" bits feel like they are getting increasingly rare, and my time savings on task A gets eaten up by all the corrections I am doing on tasks B, C, D, and E.\n\nI've already turned off Copilot entirely for CSS because the styles it writes are very detailed _and_ use old techniques. And Copilot keeps trying to autocomplete Javascript \"import\" statements to use packages I haven't even installed.\n\nIt may be slower than intellisense, but at least it's a lot more wrong.\n\nOf course, you don't have to _use_ the AI stuff. But my experience so far has been that when companies add major feature to their products and people _don't_ use them, they respond by elevating the amount of attention those features get... until you spend a lot of time turning them off (again) or batting away prompts to use them. \"We built AI into your search\" is a great example of this.\n\nVSCode felt better to use when it was run by an independent company with a strong programmer focus, and for years it felt like Microsoft was content not to poke at it too much. These were also years where it seemed Microsoft was making deliberate strides to improve Windows as a development platform. It feels like that's changed, though.\n\nIdeally what I'd want is an editor that was:\n\n1. Fast\n2. Open source\n3. Met my needs with little setup\n4. Well supported\n5. Didn't encourage tinkering\n\nUndoubtedly I will have to compromise on a few of these. Anyway, here's some of the things I've been looking at.\n\n## Stand-alone editors\n\nI see [Sublime](https://www.sublimetext.com/) is still kicking around. It'd been my favorite for a long time, until Atom and then VSCode seemed more exciting. I think you can still get Atom but it's no longer in active development.\n\n[BBEdit](https://www.barebones.com/support/bbedit/updates.html) is also still with us. In fact, they released version 15 just ten days ago. Much of my early work on the web was done through BBEdit, so I have fond memories.\n\nSome of the Atom team, though, is working on a new editor called [Zed](https://zed.dev/). I am not sure what license Zed is using, but they say it will \"always be free.\" I'm dubious, not because I don't trust the development team but because I've heard that before. Zed also bakes in a lot of collaboration tools, which is exciting if that's the way you work. It's not the way I work, at least not yet, so having the focus there is not great for me.\n\n## In-terminal editors\n\nUsing editors from the command line seems potentially very exciting. I spend a lot of time on the command line already. I am writing this post using [Helix](https://helix-editor.com/), and it's a lot of fun. I am certainly feeling the lack of an integrated file browser, though. Maximizing my experience with Helix will require a lot of mindful use, though.\n\nOne thing I didn't notice until I started this post is that my very-ingrained key combinations for typographer's quotes, ellipsis, and other international characters don't work in the terminal. This is a _significant_ flaw, since [I use those a lot](https://thudfactor.com/posts/2024/02/punctuation/). It's one of the reasons I never returned to Windows as a development environment.\n\n_Update:_ While I was reading over this again (several hours after posting), I realized that something in my build process is automatically turning the straight quotes into typographer's quotes, so that's an improvement.\n\n[VIM](https://www.vim.org/) & [NeoVIM](https://neovim.io/) are overwhelmingly popular in this space, but the ecosystem is seriously confusing and both of the editors certainly don't meet my fifth requirement. In fact, I've seen several people say they switched _away_ from either VIM or NVIM because they were constantly having to repair their setups _or_ were often distracted by tinkering with the setups.\n\nHelix, VIM, and NeoVIM are all modal editors, which let you do a lot from the keyboard because you can switch into and out of the typical writing mode. I often hear that people feel more productive when using them, _but_\n\n1. They take a while to learn\n2. You usually have to cobble a lot more together\n3. It's easy to spend a lot of time tinkering\n\nAll of that means the productivity gains might be eaten up (or more!) by the supporting activities.\n\nEmacs was my initial editor when I started in Computer Science. I don't have fond memories. Everything I said about productivity gains and VIM goes triple for Emacs.\n\nThe only way to really choose another tool is to poke at them all for awhile, and not worry too much about the productivity gains. I don't want to be slowed down _too_ much, but if it makes the work more fun that's probably worth the change alone.","src/content/posts/2024/05/editor/index.md",[554],"./blue-sage.png","a5a82b47a6b40b4b",{html:557,metadata:558},"<p>This week I started looking at other editing tools. I’ve been a pretty happy user of VSCode for years, but Microsoft’s stewardship has me feeling antsy. Their eagerness to work AI into every corner of every process everywhere seems irresponsibly premature at best.</p>\n<p>I started out dubious about the value of AI for developers, and several months experience with Github Copilot has not improved that very much. When it works, it’s very useful. But those “when it works” bits feel like they are getting increasingly rare, and my time savings on task A gets eaten up by all the corrections I am doing on tasks B, C, D, and E.</p>\n<p>I’ve already turned off Copilot entirely for CSS because the styles it writes are very detailed <em>and</em> use old techniques. And Copilot keeps trying to autocomplete Javascript “import” statements to use packages I haven’t even installed.</p>\n<p>It may be slower than intellisense, but at least it’s a lot more wrong.</p>\n<p>Of course, you don’t have to <em>use</em> the AI stuff. But my experience so far has been that when companies add major feature to their products and people <em>don’t</em> use them, they respond by elevating the amount of attention those features get… until you spend a lot of time turning them off (again) or batting away prompts to use them. “We built AI into your search” is a great example of this.</p>\n<p>VSCode felt better to use when it was run by an independent company with a strong programmer focus, and for years it felt like Microsoft was content not to poke at it too much. These were also years where it seemed Microsoft was making deliberate strides to improve Windows as a development platform. It feels like that’s changed, though.</p>\n<p>Ideally what I’d want is an editor that was:</p>\n<ol>\n<li>Fast</li>\n<li>Open source</li>\n<li>Met my needs with little setup</li>\n<li>Well supported</li>\n<li>Didn’t encourage tinkering</li>\n</ol>\n<p>Undoubtedly I will have to compromise on a few of these. Anyway, here’s some of the things I’ve been looking at.</p>\n<h2 id=\"stand-alone-editors\">Stand-alone editors</h2>\n<p>I see <a href=\"https://www.sublimetext.com/\">Sublime</a> is still kicking around. It’d been my favorite for a long time, until Atom and then VSCode seemed more exciting. I think you can still get Atom but it’s no longer in active development.</p>\n<p><a href=\"https://www.barebones.com/support/bbedit/updates.html\">BBEdit</a> is also still with us. In fact, they released version 15 just ten days ago. Much of my early work on the web was done through BBEdit, so I have fond memories.</p>\n<p>Some of the Atom team, though, is working on a new editor called <a href=\"https://zed.dev/\">Zed</a>. I am not sure what license Zed is using, but they say it will “always be free.” I’m dubious, not because I don’t trust the development team but because I’ve heard that before. Zed also bakes in a lot of collaboration tools, which is exciting if that’s the way you work. It’s not the way I work, at least not yet, so having the focus there is not great for me.</p>\n<h2 id=\"in-terminal-editors\">In-terminal editors</h2>\n<p>Using editors from the command line seems potentially very exciting. I spend a lot of time on the command line already. I am writing this post using <a href=\"https://helix-editor.com/\">Helix</a>, and it’s a lot of fun. I am certainly feeling the lack of an integrated file browser, though. Maximizing my experience with Helix will require a lot of mindful use, though.</p>\n<p>One thing I didn’t notice until I started this post is that my very-ingrained key combinations for typographer’s quotes, ellipsis, and other international characters don’t work in the terminal. This is a <em>significant</em> flaw, since <a href=\"https://thudfactor.com/posts/2024/02/punctuation/\">I use those a lot</a>. It’s one of the reasons I never returned to Windows as a development environment.</p>\n<p><em>Update:</em> While I was reading over this again (several hours after posting), I realized that something in my build process is automatically turning the straight quotes into typographer’s quotes, so that’s an improvement.</p>\n<p><a href=\"https://www.vim.org/\">VIM</a> &#x26; <a href=\"https://neovim.io/\">NeoVIM</a> are overwhelmingly popular in this space, but the ecosystem is seriously confusing and both of the editors certainly don’t meet my fifth requirement. In fact, I’ve seen several people say they switched <em>away</em> from either VIM or NVIM because they were constantly having to repair their setups <em>or</em> were often distracted by tinkering with the setups.</p>\n<p>Helix, VIM, and NeoVIM are all modal editors, which let you do a lot from the keyboard because you can switch into and out of the typical writing mode. I often hear that people feel more productive when using them, <em>but</em></p>\n<ol>\n<li>They take a while to learn</li>\n<li>You usually have to cobble a lot more together</li>\n<li>It’s easy to spend a lot of time tinkering</li>\n</ol>\n<p>All of that means the productivity gains might be eaten up (or more!) by the supporting activities.</p>\n<p>Emacs was my initial editor when I started in Computer Science. I don’t have fond memories. Everything I said about productivity gains and VIM goes triple for Emacs.</p>\n<p>The only way to really choose another tool is to poke at them all for awhile, and not worry too much about the productivity gains. I don’t want to be slowed down <em>too</em> much, but if it makes the work more fun that’s probably worth the change alone.</p>",{headings:559,localImagePaths:566,remoteImagePaths:567,frontmatter:568,imagePaths:576},[560,563],{depth:176,slug:561,text:562},"stand-alone-editors","Stand-alone editors",{depth:176,slug:564,text:565},"in-terminal-editors","In-terminal editors",[],[],{title:543,description:544,date:569,categories:570,cover:574},"Sat May 25 07:05:25 EDT 2024",[571,572,573],"Editors","VIM","Helix",{src:554,alt:548,description:549,attribution:575},{name:32},[],"2024/05/about-rules",{id:577,data:579,body:583,filePath:584,digest:585,deferredRender:20},{title:580,description:581,date:582},"Some rules about making rules","My first one is “never call them rules.”",["Date","2024-05-07T12:02:38.000Z"],"import AlertCallout from \"@components/AlertCallout.astro\";\n\nI was thinking this morning about `border-radius`, the CSS property that lets us round off corners. I had almost forgotten that there was a time before. I am not sure when it was introduced, but the [CSS Tricks article](https://css-tricks.com/almanac/properties/b/border-radius/) is from 2011. Prior to `border-radius` if we wanted rounded corners we had to use images, either in a [9-slice table](https://thudfactor.com/posts/2023/11/goodbye-postcss/table-based-layout-for-elements) or through clever techniques like [sliding doors](https://thudfactor.com/posts/2023/11/goodbye-postcss/table-based-layout-for-elements).\n\nWhen all major browsers finally supported `border-radius`, _tons_ of people were still stuck on IE 6. IE 9 was out, but we were all still testing on IE 6. It’s difficult to explain the significant improvement in developer time and page-weight that came with `border-radius`, but we were stuck making tiny corner images over various background colors because there was this rule:\n\n“The design must look the same in all browsers.”\n\nThe idea for “progressive enhancement” had been around for ages, of course, but it wasn’t really embraced by designers and business folks until, I think, `border-radius` became an easy-to-understand example of why we needed to drop pixel-perfect designs in general. It took a lot of persuasion internally, then a lot of education of clients, and then occasional bursts of reminders when QA reports on sites came back complaining about the square buttons on IE 6.\n\nThat’s one problem with rules: they become outdated, but not everyone figures that out at the same time.\n\n## Rules about rules\n\nIn _Pragmatic Thinking and Learning_, Andy Hunt says when you are new you need clear, concise rules about how to approach specific situations because you don’t have enough experience to understand the context. On the other hand, he says:\n\n> It’s actually easy to derail an expert and ruin their performance. All you have to do is force them to follow the rules.\n\nMost people spend their time between the novice and the expert, though, so how do they get there? Part of mastering the skill _has_ to be learning when the rule is no longer serving you. To do that you have to understand that the rule is _not_ a religious commandment but a more-or-less pre-made decision that serves a specific purpose, at a specific time, for a specific problem space. To that end, here are my rules about rules.\n\n### 1. Don’t call them rules\n\nThe word “rule” suggests a lot of things to a lot of people. For some, it means “you must comply to be good.” For others, it means “something only sheeple care about.” Either way, the response is unthinking. So I try not to make rules. Instead I will say things like:\n\n- I prefer…\n- It is generally best to…\n- The consensus seems to be…\n- The guidelines are…\n\nSometimes people will ask for rules when I have none to give, so I end up saying things like “it depends.” Andy Hunt again:\n\n> [T]he high-priced consultant’s favorite answer is “it depends.”\n\nA broadly applicable guideline with rare exceptions can probably be called a rule, but there are very few examples. “Don’t use tables for layout” is a great one. However, it’s crucial that people understand this doesn’t mean “don’t use tables.” It’s not unheard of to discover tabular data, which absolutely belongs in a table, created using a ton of `div` elements and tortured CSS.\n\nEven “provide alt text for images” has exceptions, [explained here by the W3C](https://www.w3.org/WAI/tutorials/images/decorative/):\n\n> The information provided by the image might already be given using adjacent text, or the image might be included to make the website more visually attractive. In these cases, a null (empty) alt text should be provided (alt=\"\") so that they can be ignored by assistive technologies, such as screen readers…\n\nThe W3C article goes on for some time about _why_ you would do such a thing, and how to know when. Ultimately, “whether to treat an image as decorative or informative is a judgment that only the author can make, based on the reason for including the image on the page.”\n\nIn other words, when you look hard enough even this iron-clad accessibility rule has exceptions near the blurry edges.\n\n### 2. Don’t put tools out of reach\n\nOne of the most frustrating sets of “rules” I see are those ban practices, language features, or languages without any real discussion of why or when. Frameworks like React (Javascript) and Tailwind (CSS) are popular targets, but sometimes even the _idea_ of frameworks themselves come under fire.\n\nMany of the arguments against Tailwind and React (for example) make sense, but not in all circumstances. Tailwind can be very heavyweight and does obscure a lot of the operation of CSS from newcomers. On the other hand, it’s a powerful tool in the hands of people who know CSS well _and_ need to do rapid site-building with data-driven design.\n\nTailwind solved a specific but common problem for me: how to expose a complex set of design options to content managers using a CMS. Utility-based CSS is a great way to approach the problem, but there’s a lot of effort involved in creating a good bespoke set of utility CSS. When you’re working to a cash-strapped budget, there’s not time to make bespoke utility systems, so Tailwind is an excellent choice.\n\n<AlertCallout variant=\"info\">\n\tAfter I posted this yesterday, I ran into a great post by Kitty Giraudel about why “don’t use the\n\t`disabled` attribute” is a _very different thing_ than “disabled buttons are a pain for\n\taccessibility.” See: [On Disabled and Aria-Disabled\n\tAttributes](https://kittygiraudel.com/2024/03/29/on-disabled-and-aria-disabled-attributes/)\n</AlertCallout>\n\nOften these rules are made out of bad personal experiences or a violation of someone’s development ideology. But the worst reason I see for putting a tool out of use is for the sake of “consistency.” For example, I once worked on a React project that had a prohibition against using _class names_ in CSS. Everything was either a [styled-components](https://styled-components.com/) element or the CSS was rendered dynamically with Javascript and passed props. The goal here was to limit how much developers had to think about the cascade, but the result was tortured, verbose code that could have been expressed a lot more elegantly with simple vanilla CSS.\n\nAlthough these banned-for-consistency rules are supposed to reduce confusion in development teams, they often back you into a corner where you are forced to use a screwdriver to pound in a nail because the rule is _don’t use hammers_. You should react to consistency-based rules as though someone were trying to take your toolbox away from you… because that’s exactly what they are doing.\n\n### 3. Know why the rule was made\n\nAnd if you are making the rule, know why you are making it. Because rules are only useful under specific circumstances, you need to know when they cease to be useful. Sometimes (often!) the rule can become an impediment.\n\nPHP is a fine language, but it is not suitable for everything. For example, it is not great at command-line scripts. It’s _possible_ to create command-line scripts with PHP, but it’s not the best tool. If you suddenly find yourself having to write a lot of command line tools, and you are in a “PHP-only shop,” there’s something that needs to be reconsidered.\n\nAnother example: A lot of people say Javascript should be extremely rarely, ideally never. So far, all of the folks I’ve seen making this argument develop for article-based or content-driven web sites; none of them are using the web platform to write software. Obviously people writing software are going to need Javascript.\n\nJavascript _is_ often used where it shouldn’t be, but it is also often the right tool for the job. The moralistic argument does not help anyone make a wise decision.\n\nIf you are a junior developer and someone gives you a rule, always ask “why.” Understand what purposes it serves. Sometimes those purposes are good, technical reasons related to the problem domain. But often those rules are either made out of ideology (“commercial OSes are exploitative”, “I am a Microsoft fanboy”) or out of simple aversion (“CSS is bad, so we lobotomized it”).\n\nIdeological rules tend to be easy to spot, but hard to stand against. These rules are often couched in moral terms, and people who question them become the subject of condemnation. That’s the way ideologies work, and it makes more sense to me if you’re discussing more human, interpersonal topics.\n\n“Generative AI is / is not plagiarism” is an ideological argument, but it’s more about the human consequences of generative AI, not its technical suitability for a job. “Stop using Javascript, it is ruining the web” is an argument about _tool choice_ but it’s couched in terms of good vs. evil: if you use Javascript, which is ruining the web, you are evil because you contribute to the ruination of the web.\n\n## Finally, always leave the discussion open\n\nIt probably goes without saying, but I need to say it because someone else will undoubtedly point it out to me: these rules are themselves really guidelines, and subject themselves to everything else I've said here.\n\nAre there rules you have heard that are actually guidelines? What technical decisions do you hear most frequently couched in moral terms? What rules do _you_ follow that might deserve some re-examination? Have I missed any good rules about rules? Do let me know, either on your own blog or [on Mastodon](https://hachyderm.io/@thudfactor) where I hang out the most.","src/content/posts/2024/05/about-rules/index.mdx","d304208960daaeb3","2024/05/tooltips",{id:586,data:588,body:592,filePath:593,digest:594,deferredRender:20},{title:589,description:590,date:591},"Popovers and Dialogs, a (kinda) case study","The differences (and similarities) of the new Popover API and the Dialog element.",["Date","2024-05-15T10:08:52.000Z"],"HTML has had a couple of exciting, but similar, new releases. `Dialog` is a new element and related API, with broad support among Chrome, Safari, and Firefox since early 2022. The `popover` attribute — which gets added to other HTML elements to convert them into popovers — is much more recent. Chrome and Safari added support in 2023, but it didn’t land in Firefox browsers until a month ago.\n\nI recently used both of these in a production app, so I got to know them relatively well. When I demoed to other engineers, they always asked what the difference was between `popover` and `dialog`. Hidde de Vries has a great (and exhaustive!) post on [just this subject](https://hidde.blog/dialog-modal-popover-differences/), but I want to focus on what I discovered when using these two.\n\nThe two components I needed were:\n\n1. A modal dialog box, which needs to be centered and act as a focus trap. It also needed to have a backdrop that obscured the background, and if you clicked outside (on the backdrop), the modal should be dismissed. (This is called a “light dismiss.”)\n2. A tooltip, which needs to show on hover and keyboard focus, have a delay, have _no_ backdrop, and is dismissed only on loss of hover or keyboard focus.\n\nRunning mostly on semantics alone, I chose `dialog` for the first option, and `popover` for the second, but from a capabilities standpoint the two of them are actually very much the same. Strangely, _neither_ option was perfectly suited to either component.\n\n## …And Javascript\n\nPractically speaking, both `dialog` and `popover` have extremely limited use without Javascript. This will be upsetting to folks who are aggressively anti-Javascript, but I’d expect these elements to develop over time so you can do more without it.\n\nThose `dialog` elements default to being hidden, but you can open one by adding the `open` attribute. This will open the dialog in non-modal form, which means it gets absolute positioning inside the container, but it does not get any positioning otherwise.\n\nElements with a `popover` attribute also start life hidden, but I don’t think there’s a way to open them in markup. You _can_ link opening and closing popovers to a button by adding a `popovertarget` attribute to the button, but that’s limited to opening and closing popovers with clicks.\n\nThis feels backwards to me, I guess — popovers open with a trigger relationship you can set in markup, but dialogs don’t — because dialogs seem like they would _always_ be opened on click events, but popovers might occur for many reasons. But that’s the API.\n\n## The first component: dialogs\n\nWhen `dialog` is opened by Javascript, you can choose to open it as a modal — which is what I needed. The modal dialog display does a number of things:\n\n1. The element is moved into the [top layer](https://developer.chrome.com/blog/what-is-the-top-layer/), which resolves a lot of z-index stuff.\n2. Since it’s in the top layer, modal dialogs get a backdrop and `position: fixed`.\n3. The dialog provides a focus trap, and clicks outside the dialog proper and onto the `::backdrop` pseudo-element are all delegated back to the dialog itself.\n\nHowever, the `dialog` API does not have light dismiss support. You have to add it yourself, which I did by:\n\n1. Listening for clicks on `dialog` directly (not its children). Since clicks on the backdrop are delegated to the dialog, the dialog’s click handler will catch these, too.\n2. Checking the coordinates of the click against the boundaries described by `getClientBoundingRect()` to determine if the click was inside or outside of the dialog element.\n\nAny time I find myself reaching into specific element coordinates I feel like I’m doing pretty low-level UI programming and I’d rather not.\n\n## The second component: tooltips\n\nBuckle up, I am glad I tackled this one _after_ the dialogs.\n\nI decided to use the newer `popover` element for tooltips. `Dialog` seems like a heaver element to use for something so ephemeral, and it’s also a bit more prescriptive semantically. For example: `dialog` has a built-in mechanism to deliver form values when the dialog is closed, and `dialog` elements have an implicit `dialog` role. Our friend `popover` does neither.\n\nOur previous tooltip solution was CSS-only, which was really nice. However, it did not have access to the top layer, and so we had a good deal of `z-index` problems and a few issues with tooltips getting clipped by their containing elements. The top layer solves all of these problems, but there’s no CSS property that tells a popover it’s open — so we had to move that functionality to Javascript.\n\n### Handling hover\n\nFriends, that was a significant blow. Not because I dislike Javascript! It’s my favorite programming language and a crucial leg supporting the web platform. It’s because I couldn’t toggle the popover when a trigger element’s `:hover` state changed.\n\nPerhaps you are thinking: “aha, you can open `onMouseOver` and close `onMouseOut`, that’s the same as hover!” You would think! But that’s not the case. These events (and the similar `pointer*` events) seem to fire _only_ when the pointer is moved into or out of the listener, _not_ when the listener gets moved underneath the pointer. This can happen a number of ways:\n\n- The trigger animates into a position underneath (or out from underneath) the pointer\n- A click on the trigger causes the trigger to move or disappear\n- The trigger gets scrolled into position behind the pointer\n\nAt least, that’s what my tests reveal. I’d love to be proven wrong. This is a bit less of a problem for the “enter” state — I can live with a tooltip not firing if the trigger moves underneath the pointer — but it not firing on the _exit_ state means you get an orphaned, visible tooltip. That’s not good.\n\nI solved this exit case by checking the trigger’s `:hover` state constantly (with `matches()`) the entire time the popover was open, and closing it when that check failed. To solve the _enter_ case, I’d have to have each trigger checking while the popover was closed, which seemed like a bit of a performance hit to me.\n\nI had to do something similar to trigger the popover on `:focus-visible` instead of the broader `:focus` because Javascript doesn’t provide an `onfocusvisible` event.\n\n### Handling position\n\nTooltips need to show up in close proximity to the trigger. The CSS-only non-popover solution could use absolute positioning relative to the trigger as long as the trigger contained the tooltip. But since popovers must have `position: fixed` in the top layer, we can’t do that any more.\n\nThe ideal solution for this is [anchor-based positioning](https://developer.chrome.com/blog/anchor-positioning-api), which Chrome started to roll out (_…checks calendar…_) yesterday. Firefox _just_ started work on it, and I don’t know where it is on Safari’s radar.\n\nThat means have to use `getBoundingClientRect()` again. And, once again, we have to check that constantly while the popover is open because the trigger might move and we’d need to move the tooltip with it. A tooltip exposed on hover might disappear quickly, but these tooltips also appear with keyboard focus, which is a much more stable state. So yes, a scrolling tooltip is actually pretty common.\n\nThis turned out to be an elaborate solution ([also sketched out in that codepen](https://codepen.io/elfinjohn/pen/oNRXBNy)), but one I thought was worth the effort to eliminate the stacking order and containment issues. I also have a lot of hope that I’ll be able to migrate the component to anchor-based positioning before the end of the year, which will simplify matters quite a bit.\n\n### Guess what?\n\nOne thing I did _not_ need for tooltips the light dismiss functionality I had to code myself for dialogs.\n\nPopovers have that.\n\nBut they don’t do the focus trap thing.\n\n<pre>::shrug::</pre>\n\n## Wrap-up\n\nPopovers and dialogs are really similar in a lot of ways, and I am not entirely convinced that the semantic difference between the two is something most folks will easily grasp. It falls into the same category for me as the difference between a “link” and a “button” — which for most folks is a change in _presentation_, not purpose. Or the difference between `strong` and `b`, which is entirely hair-splitting. Because their functionalities are so similar, I can see most developer settling on using only one, or using `dialog` for only a narrow handful of cases.\n\nI think the weirdness between the two — `dialog` getting a focus trap but no light dismiss, popovers getting the opposite — is an artifact of `dialog` being an older element and popover benefiting from the lessons learned. But I was not in the room for those conversations. That’s just what it looks like to me based on doing the exact same thing myself often.\n\nThe stuff that I need to do by hand with Javascript is, on one hand, pretty irritating. I can see how it might even be pretty infuriating if you don’t know / don’t like Javascript.\n\nBut on the other hand, these low-level UI programming efforts are a good reminder of what _exactly_ is involved for Chrome, Firefox, and Safari’s browser teams when we ask for new affordances. There are always lots of little wrinkles that take a long time to smooth out, especially in a spec that’s getting quite complicated.\n\nHow are _you_ using `dialog` or `popover`? Are you waiting for more (better) support? Anchor-based positioning? Declarative control? Is there a better solution than any I’ve described here? Let me know [via Mastodon](https://hachyderm.io/@thudfactor) or, you know, write your own blog post about it! I’d love to learn from you.","src/content/posts/2024/05/tooltips/index.mdx","84a19e8c10a7a9e2","2024/01/syntax-colors",{id:595,data:597,body:607,filePath:608,assetImports:609,digest:611,rendered:612},{title:598,subtitle:599,description:600,date:601,cover:602},"Syntax coloring in template literals","No, really, I need it.","Template literals are great for assembling bits of CSS and HTML in Javascript, but what about the syntax coloring?",["Date","2024-01-17T00:00:00.000Z"],{src:603,alt:604,description:605,attribution:606},"__ASTRO_IMAGE_./no-syntax.png","A picture of a code sample showing CSS being assigned to a string, but without any visible syntax coloring.","When all of the CSS is green, it’s going to be real frustrating to find that missing curly brace.",{name:32},"I’ve been digging into web components recently. For this site, a big advantage to the components is encapsulating the code samples in my articles. But since you tend to write CSS and HTML inside a Javascript file you lose the syntax colors. I like syntax colors. I spent enough years trying to do bracket-matching without them.\n\nI finally lost patience yesterday searching for a typo in a large HTML string. It turns out you can do something about it! Here are two ways you can get those syntax colors back — if you use VSCode at least.\n\n## VSCode extension\n\nThere’s a VSCode extension for just this kind of thing. It’s [es6-string-html](https://marketplace.visualstudio.com/items?itemName=Tobermory.es6-string-html). Despite the name, it handles HTML, CSS, SVG, SQL, XML, GLSL, Javascript, and Typescript. You trigger the syntax coloring with a comment, so it looks something like this:\n\n```js\nconst htmlString = /* html */`<p>This is some HTML</p>`\n```\n\nOf course, you’re not going to see the syntax coloring here, since these code samples aren’t VSCode.\n\nI don’t mind these plugin directives too much in my code, especially since code tends to get littered with `@tslint` or `@eslint` directives. But it’s easy to think those comments are superfluous if you don’t have the plugin installed and I can see some team members just deleting them. “Obviously this is HTML, why do we need a comment?” is a reasonable question, but then the deletion gets in a pull request and it turns into a whole conversation.\n\nIf you want to avoid that, there’s another alternative.\n\n## Tagged template literals\n\nJust to make sure we’re on the same page here, “template literals” are a kind of string that handles variable replacement. For example:\n\n```js\nconst helloWhat = `world`;\nconst helloString = `Hello, ${helloWhat}!`;\n\n// helloString now contains \"Hello, world!\"\n```\n\nA _tagged_ template literal has a label at the front which points to a function used to process the string. If you've used [styled-components](https://styled-components.com/), you’ve used tagged template literals before. VSCode (and maybe other tools!) will automatically use the appropriate syntax coloring if you use a tagged template literal with the language name. _But_ since the tag is the name of a function, there’s a little hoop you have to jump through first.\n\n```js\nconst html = () => (strings, ...values) => String.raw({ raw: strings }, ...values);\n\nconst helloHTML = html`<p>If this example were VSCode, this HTML would have syntax coloring.</p>`\n```\n\nNote that some resources online will suggest you just use this:\n\n```js\n/* Don’t do this */\nconst html = String.raw;\n```\n\n…which will seem to work, but actually removes a fair amount of the processing done on typical template literals. For more, see [Building an Identity Tag](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw#building_an_identity_tag) on MDN.\n\n_This_ has the advantage of not even requiring a plugin in VSCode, but has the disadvantage of adding a function for each language you want tagged… possibly in every web component, depending on whether or not it suits your project to have the web component import something from another file.\n\nThe extra “work” done by Javascript is genuinely trivial, but if its only purpose is to tell the text editor what syntax coloring when the code _isn’t_ running, it seems strange to ship the function off to your client browsers. You still might end up having a chat about it during code review.\n\n## Nothing’s perfect\n\nBoth of these solutions are a bit of a hack, so you have to decide which one feels better to you or your team. _However_, both will give you your syntax colors back, saving you plenty of time catching syntax errors while you write instead of at run-time.","src/content/posts/2024/01/syntax-colors/index.md",[610],"./no-syntax.png","959e7cb43d237f8b",{html:613,metadata:614},"<p>I’ve been digging into web components recently. For this site, a big advantage to the components is encapsulating the code samples in my articles. But since you tend to write CSS and HTML inside a Javascript file you lose the syntax colors. I like syntax colors. I spent enough years trying to do bracket-matching without them.</p>\n<p>I finally lost patience yesterday searching for a typo in a large HTML string. It turns out you can do something about it! Here are two ways you can get those syntax colors back — if you use VSCode at least.</p>\n<h2 id=\"vscode-extension\">VSCode extension</h2>\n<p>There’s a VSCode extension for just this kind of thing. It’s <a href=\"https://marketplace.visualstudio.com/items?itemName=Tobermory.es6-string-html\">es6-string-html</a>. Despite the name, it handles HTML, CSS, SVG, SQL, XML, GLSL, Javascript, and Typescript. You trigger the syntax coloring with a comment, so it looks something like this:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> htmlString</span><span style=\"color:#F97583\"> =</span><span style=\"color:#6A737D\"> /* html */</span><span style=\"color:#9ECBFF\">`&#x3C;p>This is some HTML&#x3C;/p>`</span></span></code></pre>\n<p>Of course, you’re not going to see the syntax coloring here, since these code samples aren’t VSCode.</p>\n<p>I don’t mind these plugin directives too much in my code, especially since code tends to get littered with <code>@tslint</code> or <code>@eslint</code> directives. But it’s easy to think those comments are superfluous if you don’t have the plugin installed and I can see some team members just deleting them. “Obviously this is HTML, why do we need a comment?” is a reasonable question, but then the deletion gets in a pull request and it turns into a whole conversation.</p>\n<p>If you want to avoid that, there’s another alternative.</p>\n<h2 id=\"tagged-template-literals\">Tagged template literals</h2>\n<p>Just to make sure we’re on the same page here, “template literals” are a kind of string that handles variable replacement. For example:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> helloWhat</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> `world`</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> helloString</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> `Hello, ${</span><span style=\"color:#E1E4E8\">helloWhat</span><span style=\"color:#9ECBFF\">}!`</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// helloString now contains \"Hello, world!\"</span></span></code></pre>\n<p>A <em>tagged</em> template literal has a label at the front which points to a function used to process the string. If you’ve used <a href=\"https://styled-components.com/\">styled-components</a>, you’ve used tagged template literals before. VSCode (and maybe other tools!) will automatically use the appropriate syntax coloring if you use a tagged template literal with the language name. <em>But</em> since the tag is the name of a function, there’s a little hoop you have to jump through first.</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> html</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#FFAB70\">strings</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">...</span><span style=\"color:#FFAB70\">values</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> String.</span><span style=\"color:#B392F0\">raw</span><span style=\"color:#E1E4E8\">({ raw: strings }, </span><span style=\"color:#F97583\">...</span><span style=\"color:#E1E4E8\">values);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> helloHTML</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> html</span><span style=\"color:#9ECBFF\">`&#x3C;p>If this example were VSCode, this HTML would have syntax coloring.&#x3C;/p>`</span></span></code></pre>\n<p>Note that some resources online will suggest you just use this:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">/* Don’t do this */</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> html</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> String.raw;</span></span></code></pre>\n<p>…which will seem to work, but actually removes a fair amount of the processing done on typical template literals. For more, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw#building_an_identity_tag\">Building an Identity Tag</a> on MDN.</p>\n<p><em>This</em> has the advantage of not even requiring a plugin in VSCode, but has the disadvantage of adding a function for each language you want tagged… possibly in every web component, depending on whether or not it suits your project to have the web component import something from another file.</p>\n<p>The extra “work” done by Javascript is genuinely trivial, but if its only purpose is to tell the text editor what syntax coloring when the code <em>isn’t</em> running, it seems strange to ship the function off to your client browsers. You still might end up having a chat about it during code review.</p>\n<h2 id=\"nothings-perfect\">Nothing’s perfect</h2>\n<p>Both of these solutions are a bit of a hack, so you have to decide which one feels better to you or your team. <em>However</em>, both will give you your syntax colors back, saving you plenty of time catching syntax errors while you write instead of at run-time.</p>",{headings:615,localImagePaths:625,remoteImagePaths:626,frontmatter:627,imagePaths:634},[616,619,622],{depth:176,slug:617,text:618},"vscode-extension","VSCode extension",{depth:176,slug:620,text:621},"tagged-template-literals","Tagged template literals",{depth:176,slug:623,text:624},"nothings-perfect","Nothing’s perfect",[],[],{title:598,subtitle:599,date:628,categories:629,tags:213,description:600,cover:632},["Date","2024-01-17T00:00:00.000Z"],[630,631,414],"Web Components","Developer Ergonomics",{src:610,alt:604,description:605,attribution:633},{name:32},[],"2024/02/redesign",{id:635,data:637,body:642,filePath:643,digest:644,rendered:645},{title:638,description:639,date:640,updatedDate:641},"Thudfactor has gone super retro","An explanation and apology of sorts for things looking like 1992 around here.",["Date","2024-02-28T11:56:45.000Z"],["Date","2024-02-28T11:59:53.000Z"],"Hey! If you are seeing this post right now, things probably look rather… unstyled. I’ve gone super retro for the moment as I redesign things around extremely modern markup and CSS.\n\nMy intention here is to get things looking as readable and useful as I can with extremely minimal CSS. This will be my laboratory for semantic HTML and good ARIA markup where needed.\n\nThen my plan is to start (slowly) layering on CSS using cascade layers and custom properties. First the layout, then other niceties.\n\nI’ll update this post as I make progress, at least until thinks look considerably less raw. Until then, enjoy the nostalgia.","src/content/posts/2024/02/redesign/index.md","cdb1589539fd73c8",{html:646,metadata:647},"<p>Hey! If you are seeing this post right now, things probably look rather… unstyled. I’ve gone super retro for the moment as I redesign things around extremely modern markup and CSS.</p>\n<p>My intention here is to get things looking as readable and useful as I can with extremely minimal CSS. This will be my laboratory for semantic HTML and good ARIA markup where needed.</p>\n<p>Then my plan is to start (slowly) layering on CSS using cascade layers and custom properties. First the layout, then other niceties.</p>\n<p>I’ll update this post as I make progress, at least until thinks look considerably less raw. Until then, enjoy the nostalgia.</p>",{headings:648,localImagePaths:649,remoteImagePaths:650,frontmatter:651,imagePaths:654},[],[],[],{title:638,date:652,updatedDate:653,description:639},["Date","2024-02-28T11:56:45.000Z"],["Date","2024-02-28T11:59:53.000Z"],[],"2024/05/vim-1",{id:655,data:657,body:666,filePath:667,assetImports:668,digest:670,deferredRender:20},{title:658,description:659,date:660,cover:661},"Adventures in VIM part 1","Some thoughts on the first view days using neovim",["Date","2024-05-29T11:13:33.000Z"],{src:662,alt:663,description:664,attribution:665},"__ASTRO_IMAGE_./pier.jpg","A weathered pier stretches out across a calm water in an overcast sky.","A pier stretching out across the Roanoke sound in the Outer Banks, North Carolina.",{name:32},"After I wrote [my last post](https://thudfactor.com/posts/2024/05/editor/) about changing text editors, I dove back into some books and trying a few more things out.\n\nMy initial concern that I might not recover the time I spent learning VIM in efficiency improvements is a reasonable one but also probably wrong. I am still far faster at using a mouse and cursor keys in VSCode, but it is easy to see how proficiency with modal editors can save a great deal of time.\n\nI've started by adding the [VSCode Neovim](https://marketplace.visualstudio.com/items?itemName=asvetliakov.vscode-neovim) plugin to VSCode and getting used to the `hjkl` navigation keys, and used it for a significant amount of my coding work yesterday.\n\nI am already a big fan of `^` and `$` to get me to the beginning and end of text on a line. I also use `d$` a lot, which deletes from the cursor to the end of the line.\n\nAt least initially the effort has made everything significantly more difficult, since thinking about what I need to write next has to compete with being hyper-vigilant about how I am using my tools. I am alread developing some of that muscle-memory though; I've caught myself trying to edit the address bar in browsers with vim commmands.\n\nMuscle-memory, though, is not to be taken lightly, and I have a lot of command key sequences carried over from my BBEdit days in the late 90s, as well as a long-standing relationship with the arrow keys. But it's not going to take quite as much effort to switch as I thought.","src/content/posts/2024/05/vim-1/index.mdx",[669],"./pier.jpg","1ab6d25cb38b36a8","2024/04/extra-capacity",{id:671,data:673,body:677,filePath:678,digest:679,rendered:680},{title:674,description:675,date:676},"“Keeping up” should not be an extracurricular activity.","Businesses that don’t strive for perfect efficiency are more creative and have happier employees.",["Date","2024-04-03T12:02:38.000Z"],"My first few jobs in web development had a lot of free time because the industry was so new. I kept plenty busy, but a large part of each workday was actually spent tinkering, reading about new techniques and new technology — even practicing on personal projects that were never intended to see any profit. They were just there for me to try out things I was learning before I actually needed to use them. This headroom was not traditionally productive in the typical MBA sense, but it meant that when new questions or new projects arose I could respond pretty quickly.\n\nIt helped, of course, that I was single and without children. I could spend evenings and weekends on personal projects if I wanted to, and I did.\n\nThen one day the consulting firm I worked for was sold to a much larger consulting firm, and that was my first taste of companies valuing being “busy” instead of being productive. I watched my colleagues from my old firm get penalized for working _only_ eight hour days while their own developer put in twelve to fourteen hours.\n\nHis actual _output_ was pretty terrible because he didn’t have any of the foundational skills and was learning basic HTML on the job, but he got a bonus and an official commendation for his dedication to work and the rest of us were threatened with termination if we didn’t step up.\n\nI quit that job shortly thereafter, fortunately on my own terms. And my next few jobs were a lot better about valuing research as well as development.\n\nThen I took work at another consulting company, and things were a bit different. First, I _had_ a lot of expertise, so I could solve a lot of problems very rapidly. I was also married and had a new infant son, both people I liked and wanted to spend time with instead of poking at a computer constantly.\n\nMy learning time shrank considerably, but that was OK — I didn’t need that much of it. I had a large store of useful knowledge, so when (for example) this firm started building web sites using Wordpress and Drupal, I could pull from my several years experience with personal blog projects and put that to work immediately.\n\nOver time, though, even those smaller amounts of time got more pinched, especially as productivity-thinking gradually took over the company. We stopped talking quite so much about solving people’s problems or innovating solutions and spent much of our days struggling to meet basic requirements. Strategy seemed mostly relegated to time-keeping and labor allocation.\n\nI was still learning, of course. You can’t work in this field without learning. But my pace had dropped precipitously, and I fell more and more behind. Every year I felt I became less employable; every year I also suspected I was of less use to the company. For the most part I was solving yesterday’s problems with yesterday’s solutions, and wasn’t much use for today’s.\n\nWhen productivity becomes the focus of a development team, this is pretty much inevitable. When the focus becomes almost exclusively billable time, burndown charts, or “velocity” the education and experimentation work seems pretty risky; it’s a lot of time involved that doesn’t improve any of those statistics directly and certainly isn’t guaranteed an instant cash payout.\n\nThis is probably why so many startups feel like dynamic, exciting places to work. A funded project that’s not expected to make money immediately has plenty of room to try things out. But once the business IPOs and investors expect constantly increasing returns each quarter, productivity thinking takes over and people end up chasing metrics instead of engaging in play that generates new ideas.\n\nThis is bad for employees, who see their development slow down if not getting entirely stuck. But it is also bad for _employers_. If you want innovation but don’t want to pay for it, you have to hire outside people with new ideas. Consultants, perhaps, but also well-established senior-level folks who can “hit the ground running.”\n\nFortunately my next job after this gave me a lot more time to explore and learn. I feel like I’ve caught up. More than that — I actually enjoy my work again. Research, exploration, and learning new things are where I find joy. This is why an academic career once seemed so attractive. **Using** that knowledge is also fun, of course. Learning things without purpose ultimately feels empty. But if the company is focused on **doing** as quickly as possible and has not left significant room for thinking, they drain the value out of their current employees just as surely as private equity vampires drain established brands.\n\nSo, some recommendations:\n\n* If you have a business, make sure you can make money even if your employees have a lot of headroom. A workforce that is working constantly at capacity can’t take on additional work. They also don’t have much time for creative thinking, problem-solving, or learning.\n* If you are an employee, don’t let companies drain your value by taking away your ability to think about problems. Work at a sustainable pace. If you feel yourself falling behind year-over-year because you are working at or above your capacity, maybe find a new job.\n* Don’t fall into the trap of thinking your **own** advancement isn’t worth investing in. Your employer _should_. But if they don’t, you need to find time and resources to do it yourself.","src/content/posts/2024/04/extra-capacity/index.md","47d7a826ab8e8ef8",{html:681,metadata:682},"<p>My first few jobs in web development had a lot of free time because the industry was so new. I kept plenty busy, but a large part of each workday was actually spent tinkering, reading about new techniques and new technology — even practicing on personal projects that were never intended to see any profit. They were just there for me to try out things I was learning before I actually needed to use them. This headroom was not traditionally productive in the typical MBA sense, but it meant that when new questions or new projects arose I could respond pretty quickly.</p>\n<p>It helped, of course, that I was single and without children. I could spend evenings and weekends on personal projects if I wanted to, and I did.</p>\n<p>Then one day the consulting firm I worked for was sold to a much larger consulting firm, and that was my first taste of companies valuing being “busy” instead of being productive. I watched my colleagues from my old firm get penalized for working <em>only</em> eight hour days while their own developer put in twelve to fourteen hours.</p>\n<p>His actual <em>output</em> was pretty terrible because he didn’t have any of the foundational skills and was learning basic HTML on the job, but he got a bonus and an official commendation for his dedication to work and the rest of us were threatened with termination if we didn’t step up.</p>\n<p>I quit that job shortly thereafter, fortunately on my own terms. And my next few jobs were a lot better about valuing research as well as development.</p>\n<p>Then I took work at another consulting company, and things were a bit different. First, I <em>had</em> a lot of expertise, so I could solve a lot of problems very rapidly. I was also married and had a new infant son, both people I liked and wanted to spend time with instead of poking at a computer constantly.</p>\n<p>My learning time shrank considerably, but that was OK — I didn’t need that much of it. I had a large store of useful knowledge, so when (for example) this firm started building web sites using Wordpress and Drupal, I could pull from my several years experience with personal blog projects and put that to work immediately.</p>\n<p>Over time, though, even those smaller amounts of time got more pinched, especially as productivity-thinking gradually took over the company. We stopped talking quite so much about solving people’s problems or innovating solutions and spent much of our days struggling to meet basic requirements. Strategy seemed mostly relegated to time-keeping and labor allocation.</p>\n<p>I was still learning, of course. You can’t work in this field without learning. But my pace had dropped precipitously, and I fell more and more behind. Every year I felt I became less employable; every year I also suspected I was of less use to the company. For the most part I was solving yesterday’s problems with yesterday’s solutions, and wasn’t much use for today’s.</p>\n<p>When productivity becomes the focus of a development team, this is pretty much inevitable. When the focus becomes almost exclusively billable time, burndown charts, or “velocity” the education and experimentation work seems pretty risky; it’s a lot of time involved that doesn’t improve any of those statistics directly and certainly isn’t guaranteed an instant cash payout.</p>\n<p>This is probably why so many startups feel like dynamic, exciting places to work. A funded project that’s not expected to make money immediately has plenty of room to try things out. But once the business IPOs and investors expect constantly increasing returns each quarter, productivity thinking takes over and people end up chasing metrics instead of engaging in play that generates new ideas.</p>\n<p>This is bad for employees, who see their development slow down if not getting entirely stuck. But it is also bad for <em>employers</em>. If you want innovation but don’t want to pay for it, you have to hire outside people with new ideas. Consultants, perhaps, but also well-established senior-level folks who can “hit the ground running.”</p>\n<p>Fortunately my next job after this gave me a lot more time to explore and learn. I feel like I’ve caught up. More than that — I actually enjoy my work again. Research, exploration, and learning new things are where I find joy. This is why an academic career once seemed so attractive. <strong>Using</strong> that knowledge is also fun, of course. Learning things without purpose ultimately feels empty. But if the company is focused on <strong>doing</strong> as quickly as possible and has not left significant room for thinking, they drain the value out of their current employees just as surely as private equity vampires drain established brands.</p>\n<p>So, some recommendations:</p>\n<ul>\n<li>If you have a business, make sure you can make money even if your employees have a lot of headroom. A workforce that is working constantly at capacity can’t take on additional work. They also don’t have much time for creative thinking, problem-solving, or learning.</li>\n<li>If you are an employee, don’t let companies drain your value by taking away your ability to think about problems. Work at a sustainable pace. If you feel yourself falling behind year-over-year because you are working at or above your capacity, maybe find a new job.</li>\n<li>Don’t fall into the trap of thinking your <strong>own</strong> advancement isn’t worth investing in. Your employer <em>should</em>. But if they don’t, you need to find time and resources to do it yourself.</li>\n</ul>",{headings:683,localImagePaths:684,remoteImagePaths:685,frontmatter:686,imagePaths:690},[],[],[],{title:674,date:687,categories:688,tags:213,description:675},["Date","2024-04-03T12:02:38.000Z"],[689],"Work Life",[],"2024/04/css-programming",{id:691,data:693,body:697,filePath:698,digest:699,deferredRender:20},{title:694,description:695,date:696},"Is CSS a programming language?","And why does it seem to matter to so many people?",["Date","2024-04-27T21:02:38.000Z"],"import ArticleFigure from \"@components/ContentItems/ArticleFigure/index.astro\";\nimport Peter from \"./peter.webp\";\n\nNo, CSS is not a programming language.\n\nSince you’re here, I guess I should provide a bit more detail.\n\n## Wait, what are we talking about again?\n\n<ArticleFigure position=\"right\">\n\t<iframe\n\t\tslot=\"fig\"\n\t\twidth=\"560\"\n\t\theight=\"315\"\n\t\tsrc=\"https://www.youtube.com/embed/TL41NpYnhWo?si=PCXHt-uZL__H6WDd\"\n\t\ttitle=\"YouTube video player\"\n\t\tframeborder=\"0\"\n\t\tallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n\t\treferrerpolicy=\"strict-origin-when-cross-origin\"\n\t\tallowfullscreen\n\t></iframe>\n\tEvery YouTuber has to make dopey over-emotive faces in the thumbnails or The Algorithm™️ rejects\n\tthem. I’ve just had to get used to it.\n</ArticleFigure>\n\nCSS YouTuber Kevin Powell did a video showing off games that were created using HTML and CSS alone. Powell keeps saying “and they say CSS isn’t a programming language.” He also says “I don’t want people being pedantic in the comments.” Fair enough, I’ll just be pedantic here. CSS is _not_ a programming language, and I do think the distinction matters.\n\nJust what constitutes a programming language is hard to pin down. Most categories tend to fuzz around the edges. But CSS is lacking most of what we would consider necessary in a programming language.\n\nCSS lacks:\n\n- Variables.\n- Flow-of-control structures (conditionals, for-loops)\n- Any means of defining a function\n- Any means of accepting _input_\n- Any means of producing _output_.\n- You do not “run” CSS.\n\nYes, CSS has a mechanism people insist on calling “variables.” These do not behave like variables at all. They do behave like CSS properties, however: the value is dependent on where it’s used in the cascade. This confused the heck out of me when I first started using them, as it has everyone else I’ve seen work with them. It doesn’t help, of course, that they are referenced with a function named `var()`.\n\nCSS might seem like it produces output, because it is all about how things look and -- in some rare cases -- you can present actual text to people. Unlike Javascript, which you can run independently of the browser, CSS relies on both HTML and the browser to have any meaning at all.\n\nYou don’t even run CSS, because to “run” implies a sequential order of operations, something that has a defined beginning and end point. CSS is interpreted, then applied to HTML by the browser. This is why there’s no flow-of-control operations in CSS. In order to have looping, you must first have something to loop.\n\n## Why does this matter?\n\nI like to make the distinction because approaching CSS like a programming language is the wrong mindset. When back-end programmers or full-stack programmers work with CSS, one of their first impulses is to correct the fundamental flaw they perceive in CSS: the fact that the values of properties “bleed” into other areas. This is the “cascade,” and it is so fundamental to how CSS works that the language is called “Cascading Style Sheets.”\n\nFrom a programming perspective CSS has too many side effects, too many global variables and no graceful way of scoping things. Thus, SASS, LESS, and CSS-in-JS solutions like Styled Components. Most of these programmers become so frustrated with the language that, like Peter Griffin fighting the blinds, they fall back on the old horrible practice of [programming by coincidence](https://www.informit.com/articles/article.aspx?p=31538). Unable to cope with CSS violating all of their expectations about how programming is supposed to work, they are reduced to making more and more precise selectors and throwing style rules into them to see what works.\n\n## CSS is a powerful language. It’s just not programming\n\nI think one of the reasons those of us on the front end might _want_ CSS to be a programming language, or at least recognized as one, is that it’s the programming languages that get all the glory. HTML and CSS are all “lesser” somehow, at least in prestige and often in pay.\n\nThis mindset reminds me a lot of what I saw in college curriculums where academic and cultural studies felt the need to glue on a veneer of science-ness to their studies, even if science is a poor tool to use to talk about people and art. STEM is where the money was (is), so STEM is what English degrees should be. We can also see the same mindset in Evangelical Christians, who manufacture concepts like [Creation Science](https://en.wikipedia.org/wiki/Creation_science) or [Intelligent Design](https://en.wikipedia.org/wiki/Intelligent_design).\n\nWhen things that are not science start to ape science, you know science has gained cultural primacy. But aping science cost the humanities and religion much, discarding their unique viewpoints in favor of a tool that has a lot more cultural capital but is much less suited to the task. This is my same concern with the desire to force CSS into a programming language model.\n\nProgramming languages are about change, processing, and manipulation of information. CSS describes what that information looks like — in many different states. But CSS itself changes the state of precious little.\n\nEven though it is not programming, CSS is a meticulous and analytical technical skill in its own right. It deserves respect as such. Any programmer who sneers at CSS _probably isn’t good at writing it_ and doesn’t enjoy the kind of work CSS is. Why they feel like they should belittle it I don’t know, but many programmers — not a majority, I hope, at least in web development — don’t see the value of design or UX efforts either. CSS is complicated because design is complicated. People who are impatient with design requirements are going to be impatient with CSS as well.\n\nAs for those games Kevin Powell was talking about: as near as I can tell from watching his video, these games rely on the interactive tools provided by HTML form elements. They also seem to require a vast amount of CSS, I suspect generated as the output of something like SASS. One example has over a megabyte of CSS, and one does not simply write a megabyte of CSS.\n\nThat’s not to say these demos aren’t impressive! They are! It’s fun to watch people push CSS in directions that it isn’t intended to go. I am so interested in it that I’ve signed up for Kevin Powell’s [CSS Games Workshop](https://courses.kevinpowell.co/css-games-workshop). No doubt I will learn a few more tricks.\n\nBut when I want to write a game, I will [reach for Godot instead](https://godotengine.org/).","src/content/posts/2024/04/css-programming/index.mdx","5ec67969b858f347","2024/04/looms",{id:700,data:702,body:716,filePath:717,assetImports:718,digest:720,rendered:721},{title:703,description:704,date:705,cover:706},"AI, computers, and looms","We seem to be very selective about whose jobs deserve to be automated.",["Date","2024-04-19T12:02:38.000Z"],{src:707,alt:708,description:709,attribution:710},"__ASTRO_IMAGE_./jacquard-loom.jpg","A closeup photo of a Jacquard loom, a large wooden contraption with many threads attached and a thick stack of punch cards.","A Jacquard loom. Note the punch cards on the right. This 1801 loom was arguably the first programmed industrial equipment.",{name:711,link:712,license:713},"Stephen C. Dickson / Wikimedia","https://commons.wikimedia.org/wiki/File:A_Jacquard_loom_showing_information_punchcards,_National_Museum_of_Scotland.jpg",{name:714,link:715},"CC Attribution-Share Alike International License 4.0","https://creativecommons.org/licenses/by-sa/4.0/deed.en","Much of the conversation about AI is about computing replacing entire swathes of workers. I think this concern is overblown and is a side-effect of the mindset I call “everyone else’s job is easy.” I say this as a front-end developer, which means my job is squarely in the sights of many people who would like to replace us temperamental, picky people with a more compliant computer.\n\nThe history of technology is often the history of taking slow, skilled labor away from artisans and putting it in the hands of less skilled workers so it can be done, as the techbros say, “at scale.” In economics this is called [deskilling](https://www.futureofworkhub.info/explainers/2021/4/28/deskilling-what-are-the-historical-societal-and-legal-implications) and it can be devastating to people’s livelihoods.\n\nOne of the earliest examples of this is the 1801 Jacquard loom, an earliest — if not _the_ earliest — example of a programmable machine that did real, economic work. Using an early form of punch card, the loom could reproduce very intricate woven fabrics with minimal skill from the operator. This put many people out of work, especially young children. But I’ll come back to that.\n\n## Mechanization bad, maybe good, it depends how quaint the job is\n\nIn the 1990s we saw a rapid decrease in industrial jobs in the US, but it was a trend that had been building for a really long time. It was in this atmosphere of job loss and factory closings that Priscilla Herdman, Anne Hills, and Cindy Mangsen recorded a folk album called _[Voices](https://tidal.com/browse/album/104069029?u)_. One track, “Silken Dreams,” is a reminiscence of the American silk industry.\n\n> This here loom is fifty years old. <br>\n> Me and Mary, we’re a little older. <br>\n> We’ve been here since 1918, <br>\n> Now the factory’s closing down. <br>\n>\n> ---\n>\n> And on a hot summer night <br>\n> You could hear these looms, <br>\n> They never shut them down. <br>\n> Weavin’ and spinnin’ the silken dreams <br>\n> Of the workers in Allentown\n\nI have to say, it’s very strange to hear a wistful song about round-the-clock labor and noise pollution. There’s a paper mill near where I grew up. Can you imagine the song? “On a hot summer night / you could smell those fumes / they spread for miles around…”\n\nIt’s worth pointing out that for at least part of its history the American silk industry and textiles in general relied on child labor. Prior to the Jacquard loom, children were necessary because they were small enough to climb through the loom and do the intricate arrangement of the horizontal weft threads. The Jacquard loom took this work over, did it better, and did it more quickly. Most of us (with the exception of some [Deep South Republicans](https://www.nola.com/news/politics/legislature/la-lawmakers-vote-to-remove-lunch-breaks-for-child-workers/article_ef234692-fd9e-11ee-99f5-771c7366107a.html)) consider child labor barbaric, so this might at first seem like a good thing. But it no doubt left many families in financial distress, with very little to fall back on.\n\nIn the early US silk industry, child labor was used because it was _cheap_ — maybe a quarter of what an adult was paid — and silk mills were only forced to stop hiring children through political pressure and legislation. Again: we consider this an improvement, but it reduced the earning potential in a family.\n\nThe silk industry in the US died not because of mechanization — it was already mechanized — but because America’s war with Japan cut off the supply of raw silk. And before it could come back, there was a whole suite of new synthetic materials.\n\nCoal miners _were_ badly hurt by mechanization. But Herdman, Hills & Mangsen take a less sentimental view. They have not one but _two_ songs on the album about the horrors of coal mining. There is “Black Burning Air:”\n\n> Day passed for night down in the mine<br>\n> The walls of the seam like the black water shine,<br>\n> It was rock by the ton, life by the day,<br>\n> Breathing the black burning air.<br>\n\nAnd “Redwing Blackbird:”\n\n> Oh, can you see that pretty little bird<br>\n> Singing with all his heart and soul?<br>\n> He’s got a blood red spot on his wing<br>\n> And all of the rest of him is black as coal.<br>\n> Of all the colors I ever did see,<br>\n> Red and black are the ones I dread.<br>\n> For when a man spills blood on coal<br>\n> They carry him out of the coal mines dead.<br>\n\nNo “silken dreams” there.\n\nThis makes a bit of sense, I suppose. Weaving (and spinning), once common professions, are now part of crafting culture — so people view the old industry, at least, a lot more favorably than they do coal mining. Coal mining is not a craft, and it’s viewed by many as an industry we’d be much better off without.\n\nThe American left’s hostility to coal power has often bled into disregard for the feelings of coal workers. Or patronizing paternalism — trying patiently to explain to coal employees that they are better off _without_ the jobs they have now, and (in many cases) the jobs their families have had for generations. And then placing them in poorly regulated and monitored retraining programs that [utterly fail to deliver](https://www.cbc.ca/news/world/mined-minds-retraining-appalachian-coal-miners-1.5145676).\n\nBut textile jobs, just like coal jobs, were _and are_ low-paying, low-status work and the focus of much labor organizing. Textile workers led [America’s first industrial strike](https://newenglandhistoricalsociety.com/1824-factory-strike-1824/), and the [1913 Paterson Silk Strike](https://www.pbs.org/wgbh/americanexperience/features/goldman-paterson-silk-strike-1913/) shut down hundreds of silk mills for almost half a year. And, of course, the [Triangle Shirtwaist Factory fire](https://www.smithsonianmag.com/history/uncovering-the-history-of-the-triangle-shirtwaist-fire-124701842/) in 1911 had such an impact on worker safety than I even learned about it in high school. The original Luddites were [actually textile workers](https://www.smithsonianmag.com/history/what-the-luddites-really-fought-against-264412/).\n\nSometimes the strikes were against machines; other times they were against abysmal working conditions and abusive hours. Very little romance there.\n\n## What we’re really talking about is who’s job is unimportant enough to be replaced\n\nI am thinking all of these things because relatively recently I saw a viral post on social media that said:\n\n> Okay, techbros. Look.\n>\n> I don’t want an AI assistant. I don’t want self-driving cars. I don’t want a Mars colony. I don’t want robots that create art, or help with coding, or deliver food, or determine the most efficient way to maximize destruction when bombing civili—I mean “legitimate military targets”.\n>\n> I just want a robot that CLEANS MY FUCKING BATHROOM FOR ME\n\nAs if there aren’t people who depend on cleaning bathrooms for a living, too. I mean, I know _you_ clean _your_ bathroom, but if the technology exists to automate cleaning a domestic bathroom it will almost certainly clean industrial and commercial bathrooms, too.\n\nI doubt the author really thought that, but that’s kind of the point. A lot of the jobs that have previously been replaced by automation and technology are low-status and invisible jobs. Janitorial services is certainly in that category. The author should understand that their acceptable anti-AI choices are to learn to clean their own bathroom or hire a cleaning service to do it instead.\n\n**Full disclosure:** My paternal grandfather worked in coal mining, and my maternal grandfather worked in a jeans factory, then later as a school janitor. I take the slights personally, only somewhat on their behalf.\n\n## When robots replace us, we deserve some of the benefit\n\nWhen we talk about AI taking the jobs of artists and programmers, it’s phrased like “robots will replace us,” but robots and computers have been replacing us for sixty years. Machines have been [replacing us for much longer](https://computerhistory.org/blog/relax-machines-already-took-our-jobs/).\n\nOverall, I think we’re better off without round-the-clock silk mills exploiting cheap labor. We’d be better off, as well, _without_ fossil-fuel extraction economy. Knitting was once a crucial household skill, now it’s something we can choose to do or not. In a certain sense, we’re a lot better off because of that.\n\nThe problem is not that machines are taking our jobs (and now they are taking your job and my job, too). The problem is that the bulk of the benefits of automation tend to get concentrated upwards. That is, into the hands of the rich people who own the machines and control the labor. _We_ should get the benefits of improved efficiency and automation, [but we’re not](https://www.epi.org/productivity-pay-gap/). Since 1979 productivity has increased by 67% while worker pay has only increased by 11%. The result is a second gilded age, where Tesla fights in court to give Elon Musk [$56 _billion_ in compensation](https://www.msn.com/en-us/money/companies/tesla-wants-shareholders-to-reinstate-55-billion-pay-package-for-musk-rejected-by-delaware-judge/ar-BB1lMexa) just days after laying off 10% of its workforce. The problem is living in an economic system where not having a job is a deadly threat that can cost you your health care, your means of transportation, and your home.\n\nPeople should be weavin’ and spinnin’ if they want to, but no one should feel forced to work a midnight shift at a silk mill just to feed and shelter their kids. This does not feel to me like a radical position to take, but too many people see it that way.\n\nIn the past, the way we clawed back a share of the benefits of industrialization was through political action and labor action. Banning technologies (or simply complaining loudly about it) has never worked particularly well, and robs the rich and the poor of the potential benefits a technology might provide. It is an economic fight that uses words that make people very uncomfortable, like “organizing” and “strike” — strategies that have been proven time and again to be very effective, whether it’s a silk mill, a coal mine, or [the Writer’s Guild of America](https://en.wikipedia.org/wiki/2023_Writers_Guild_of_America_strike).\n\nIt’s really hard to argue against technology in general. Sometimes the technology is unquestionably bad (DDT, Thalidomide). Sometimes it is very good (vaccines). Often it is mixed (computers). We are undoubtedly better off with refrigerators that chill themselves instead of an [ice collection and shipping industry](https://en.wikipedia.org/wiki/Ice_trade) which once employed 90,000 people, including small armies of physical laborers who “harvested” ice from frozen lakes in the winter. Freezin’ and shippin’ the chilly dreams of the workers, no doubt.\n\nWill AI ruin us? Will it create new opportunities for us? I do not know. But I save most of my ire for the captains of industry who _intend_ for AI to replace us but refuse to share the spoils. Which will _undoubtedly_ happen if we let it.\n\n---\n\n**Note:** no portion of this article was written with the assistance of large language models. This essay is 100% human-sourced and completely artisanal awkward phrasing and grammar errors. Also, the Herdman, Hills, Mangsen album _Voices_ is one of my favorites, and I know all of the lyrics by heart.","src/content/posts/2024/04/looms/index.md",[719],"./jacquard-loom.jpg","6358c937eec96e15",{html:722,metadata:723},"<p>Much of the conversation about AI is about computing replacing entire swathes of workers. I think this concern is overblown and is a side-effect of the mindset I call “everyone else’s job is easy.” I say this as a front-end developer, which means my job is squarely in the sights of many people who would like to replace us temperamental, picky people with a more compliant computer.</p>\n<p>The history of technology is often the history of taking slow, skilled labor away from artisans and putting it in the hands of less skilled workers so it can be done, as the techbros say, “at scale.” In economics this is called <a href=\"https://www.futureofworkhub.info/explainers/2021/4/28/deskilling-what-are-the-historical-societal-and-legal-implications\">deskilling</a> and it can be devastating to people’s livelihoods.</p>\n<p>One of the earliest examples of this is the 1801 Jacquard loom, an earliest — if not <em>the</em> earliest — example of a programmable machine that did real, economic work. Using an early form of punch card, the loom could reproduce very intricate woven fabrics with minimal skill from the operator. This put many people out of work, especially young children. But I’ll come back to that.</p>\n<h2 id=\"mechanization-bad-maybe-good-it-depends-how-quaint-the-job-is\">Mechanization bad, maybe good, it depends how quaint the job is</h2>\n<p>In the 1990s we saw a rapid decrease in industrial jobs in the US, but it was a trend that had been building for a really long time. It was in this atmosphere of job loss and factory closings that Priscilla Herdman, Anne Hills, and Cindy Mangsen recorded a folk album called <em><a href=\"https://tidal.com/browse/album/104069029?u\">Voices</a></em>. One track, “Silken Dreams,” is a reminiscence of the American silk industry.</p>\n<blockquote>\n<p>This here loom is fifty years old. <br>\nMe and Mary, we’re a little older. <br>\nWe’ve been here since 1918, <br>\nNow the factory’s closing down. <br></p>\n<hr>\n<p>And on a hot summer night <br>\nYou could hear these looms, <br>\nThey never shut them down. <br>\nWeavin’ and spinnin’ the silken dreams <br>\nOf the workers in Allentown</p>\n</blockquote>\n<p>I have to say, it’s very strange to hear a wistful song about round-the-clock labor and noise pollution. There’s a paper mill near where I grew up. Can you imagine the song? “On a hot summer night / you could smell those fumes / they spread for miles around…”</p>\n<p>It’s worth pointing out that for at least part of its history the American silk industry and textiles in general relied on child labor. Prior to the Jacquard loom, children were necessary because they were small enough to climb through the loom and do the intricate arrangement of the horizontal weft threads. The Jacquard loom took this work over, did it better, and did it more quickly. Most of us (with the exception of some <a href=\"https://www.nola.com/news/politics/legislature/la-lawmakers-vote-to-remove-lunch-breaks-for-child-workers/article_ef234692-fd9e-11ee-99f5-771c7366107a.html\">Deep South Republicans</a>) consider child labor barbaric, so this might at first seem like a good thing. But it no doubt left many families in financial distress, with very little to fall back on.</p>\n<p>In the early US silk industry, child labor was used because it was <em>cheap</em> — maybe a quarter of what an adult was paid — and silk mills were only forced to stop hiring children through political pressure and legislation. Again: we consider this an improvement, but it reduced the earning potential in a family.</p>\n<p>The silk industry in the US died not because of mechanization — it was already mechanized — but because America’s war with Japan cut off the supply of raw silk. And before it could come back, there was a whole suite of new synthetic materials.</p>\n<p>Coal miners <em>were</em> badly hurt by mechanization. But Herdman, Hills &#x26; Mangsen take a less sentimental view. They have not one but <em>two</em> songs on the album about the horrors of coal mining. There is “Black Burning Air:”</p>\n<blockquote>\n<p>Day passed for night down in the mine<br>\nThe walls of the seam like the black water shine,<br>\nIt was rock by the ton, life by the day,<br>\nBreathing the black burning air.<br></p>\n</blockquote>\n<p>And “Redwing Blackbird:”</p>\n<blockquote>\n<p>Oh, can you see that pretty little bird<br>\nSinging with all his heart and soul?<br>\nHe’s got a blood red spot on his wing<br>\nAnd all of the rest of him is black as coal.<br>\nOf all the colors I ever did see,<br>\nRed and black are the ones I dread.<br>\nFor when a man spills blood on coal<br>\nThey carry him out of the coal mines dead.<br></p>\n</blockquote>\n<p>No “silken dreams” there.</p>\n<p>This makes a bit of sense, I suppose. Weaving (and spinning), once common professions, are now part of crafting culture — so people view the old industry, at least, a lot more favorably than they do coal mining. Coal mining is not a craft, and it’s viewed by many as an industry we’d be much better off without.</p>\n<p>The American left’s hostility to coal power has often bled into disregard for the feelings of coal workers. Or patronizing paternalism — trying patiently to explain to coal employees that they are better off <em>without</em> the jobs they have now, and (in many cases) the jobs their families have had for generations. And then placing them in poorly regulated and monitored retraining programs that <a href=\"https://www.cbc.ca/news/world/mined-minds-retraining-appalachian-coal-miners-1.5145676\">utterly fail to deliver</a>.</p>\n<p>But textile jobs, just like coal jobs, were <em>and are</em> low-paying, low-status work and the focus of much labor organizing. Textile workers led <a href=\"https://newenglandhistoricalsociety.com/1824-factory-strike-1824/\">America’s first industrial strike</a>, and the <a href=\"https://www.pbs.org/wgbh/americanexperience/features/goldman-paterson-silk-strike-1913/\">1913 Paterson Silk Strike</a> shut down hundreds of silk mills for almost half a year. And, of course, the <a href=\"https://www.smithsonianmag.com/history/uncovering-the-history-of-the-triangle-shirtwaist-fire-124701842/\">Triangle Shirtwaist Factory fire</a> in 1911 had such an impact on worker safety than I even learned about it in high school. The original Luddites were <a href=\"https://www.smithsonianmag.com/history/what-the-luddites-really-fought-against-264412/\">actually textile workers</a>.</p>\n<p>Sometimes the strikes were against machines; other times they were against abysmal working conditions and abusive hours. Very little romance there.</p>\n<h2 id=\"what-were-really-talking-about-is-whos-job-is-unimportant-enough-to-be-replaced\">What we’re really talking about is who’s job is unimportant enough to be replaced</h2>\n<p>I am thinking all of these things because relatively recently I saw a viral post on social media that said:</p>\n<blockquote>\n<p>Okay, techbros. Look.</p>\n<p>I don’t want an AI assistant. I don’t want self-driving cars. I don’t want a Mars colony. I don’t want robots that create art, or help with coding, or deliver food, or determine the most efficient way to maximize destruction when bombing civili—I mean “legitimate military targets”.</p>\n<p>I just want a robot that CLEANS MY FUCKING BATHROOM FOR ME</p>\n</blockquote>\n<p>As if there aren’t people who depend on cleaning bathrooms for a living, too. I mean, I know <em>you</em> clean <em>your</em> bathroom, but if the technology exists to automate cleaning a domestic bathroom it will almost certainly clean industrial and commercial bathrooms, too.</p>\n<p>I doubt the author really thought that, but that’s kind of the point. A lot of the jobs that have previously been replaced by automation and technology are low-status and invisible jobs. Janitorial services is certainly in that category. The author should understand that their acceptable anti-AI choices are to learn to clean their own bathroom or hire a cleaning service to do it instead.</p>\n<p><strong>Full disclosure:</strong> My paternal grandfather worked in coal mining, and my maternal grandfather worked in a jeans factory, then later as a school janitor. I take the slights personally, only somewhat on their behalf.</p>\n<h2 id=\"when-robots-replace-us-we-deserve-some-of-the-benefit\">When robots replace us, we deserve some of the benefit</h2>\n<p>When we talk about AI taking the jobs of artists and programmers, it’s phrased like “robots will replace us,” but robots and computers have been replacing us for sixty years. Machines have been <a href=\"https://computerhistory.org/blog/relax-machines-already-took-our-jobs/\">replacing us for much longer</a>.</p>\n<p>Overall, I think we’re better off without round-the-clock silk mills exploiting cheap labor. We’d be better off, as well, <em>without</em> fossil-fuel extraction economy. Knitting was once a crucial household skill, now it’s something we can choose to do or not. In a certain sense, we’re a lot better off because of that.</p>\n<p>The problem is not that machines are taking our jobs (and now they are taking your job and my job, too). The problem is that the bulk of the benefits of automation tend to get concentrated upwards. That is, into the hands of the rich people who own the machines and control the labor. <em>We</em> should get the benefits of improved efficiency and automation, <a href=\"https://www.epi.org/productivity-pay-gap/\">but we’re not</a>. Since 1979 productivity has increased by 67% while worker pay has only increased by 11%. The result is a second gilded age, where Tesla fights in court to give Elon Musk <a href=\"https://www.msn.com/en-us/money/companies/tesla-wants-shareholders-to-reinstate-55-billion-pay-package-for-musk-rejected-by-delaware-judge/ar-BB1lMexa\">$56 <em>billion</em> in compensation</a> just days after laying off 10% of its workforce. The problem is living in an economic system where not having a job is a deadly threat that can cost you your health care, your means of transportation, and your home.</p>\n<p>People should be weavin’ and spinnin’ if they want to, but no one should feel forced to work a midnight shift at a silk mill just to feed and shelter their kids. This does not feel to me like a radical position to take, but too many people see it that way.</p>\n<p>In the past, the way we clawed back a share of the benefits of industrialization was through political action and labor action. Banning technologies (or simply complaining loudly about it) has never worked particularly well, and robs the rich and the poor of the potential benefits a technology might provide. It is an economic fight that uses words that make people very uncomfortable, like “organizing” and “strike” — strategies that have been proven time and again to be very effective, whether it’s a silk mill, a coal mine, or <a href=\"https://en.wikipedia.org/wiki/2023_Writers_Guild_of_America_strike\">the Writer’s Guild of America</a>.</p>\n<p>It’s really hard to argue against technology in general. Sometimes the technology is unquestionably bad (DDT, Thalidomide). Sometimes it is very good (vaccines). Often it is mixed (computers). We are undoubtedly better off with refrigerators that chill themselves instead of an <a href=\"https://en.wikipedia.org/wiki/Ice_trade\">ice collection and shipping industry</a> which once employed 90,000 people, including small armies of physical laborers who “harvested” ice from frozen lakes in the winter. Freezin’ and shippin’ the chilly dreams of the workers, no doubt.</p>\n<p>Will AI ruin us? Will it create new opportunities for us? I do not know. But I save most of my ire for the captains of industry who <em>intend</em> for AI to replace us but refuse to share the spoils. Which will <em>undoubtedly</em> happen if we let it.</p>\n<hr>\n<p><strong>Note:</strong> no portion of this article was written with the assistance of large language models. This essay is 100% human-sourced and completely artisanal awkward phrasing and grammar errors. Also, the Herdman, Hills, Mangsen album <em>Voices</em> is one of my favorites, and I know all of the lyrics by heart.</p>",{headings:724,localImagePaths:734,remoteImagePaths:735,frontmatter:736,imagePaths:742},[725,728,731],{depth:176,slug:726,text:727},"mechanization-bad-maybe-good-it-depends-how-quaint-the-job-is","Mechanization bad, maybe good, it depends how quaint the job is",{depth:176,slug:729,text:730},"what-were-really-talking-about-is-whos-job-is-unimportant-enough-to-be-replaced","What we’re really talking about is who’s job is unimportant enough to be replaced",{depth:176,slug:732,text:733},"when-robots-replace-us-we-deserve-some-of-the-benefit","When robots replace us, we deserve some of the benefit",[],[],{title:703,date:737,categories:738,tags:213,description:704,cover:739},["Date","2024-04-19T12:02:38.000Z"],[689],{src:719,alt:708,description:709,attribution:740},{name:711,link:712,license:741},{name:714,link:715},[],"2024/06/browser-testing",{id:743,data:745,body:753,filePath:754,assetImports:755,digest:757,deferredRender:20},{title:746,description:747,date:748,cover:749},"The Regrettable State of Cross-Browser Testing","Update-by-default has pushed the platform forward, but has also put browser testing out of reach for many",["Date","2024-06-26T09:51:34.000Z"],{src:750,alt:751,description:752},"__ASTRO_IMAGE_./guard.png","A very life-like sculpture of a security officer.","Marc Sijan's \"Security Officer,\" a resin sculpture installed at the Baird Center in Milwaukee. It took me a couple of days before I noticed this guy never moved.","import ArticleImage from \"@components/ContentItems/ArticleImage/index.astro\";\nimport ArticleFigure from \"@components/ContentItems/ArticleFigure/index.astro\";\nimport AlertCallout from \"@components/AlertCallout.astro\";\n\n<ArticleFigure\n\timage={import(\"./borked.png\")}\n\talt=\"The website layout for this site, with all page layout items in very narrow columns only a few characters wide.\"\n\tposition=\"right\"\n>\n\tThere's slightly broken, and then there's this.\n</ArticleFigure>\n\nMy last post about the perceived [\"slow\" adoption of new CSS](https://www.thudfactor.com/posts/2024/06/new-hotness/) sparked some great discussion. But I also got a few bug reports about my site design. I am not enormously concerned about supporting older or unusual browsers, but friends, the site looked bad.\n\n\"Best practice\" says I _should_ test the site in many browsers and many different versions. But I don't. Not this site, anyway, for two reasons:\n\n1. I have limited time and no one is paying me for any of this work.\n2. It is difficult and/or expensive to test multiple versions of each browser on each OS.\n\nIn my defense, though, the only way I was able to reproduce and diagnose the problem, then verify a fix, was to install an old version of Firefox through a Docker container. It's not something a casual cruise through typical browsers would have revealed.\n\nBy the way, _this_ is an excellent way to report that someone's website is borked (thank you!):\n\n> Heads up: On Firefox 115.12.0esr (Debian 12 system version) the page layout is broken (at all viewport widths)?\n\nThis will get you blocked:\n\n> Why do I get the impression you are either a chrome fan, into the newest, hottest shit, or one of those mobile-first people? :-P\n\n(If you are an indie web person and/or just getting started in web development and someone speaks to you this way, absolutely block, block, block. It's not you, it's them.)\n\nThis specific problem occurred because I was (and am still) using [native CSS nesting](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_nesting) instead of running my CSS through a pre-processor. However, I am using the _old_ syntax, which has been generally well-supported across all modern browsers for just shy of a year. Most people don't have any problem seeing this because browsers all push updates by default, the status quo for many, many years now. I am [loathe to add PostCSS back into my tool chain](http://localhost:4321/posts/2023/11/goodbye-postcss/) but also really like working with nested CSS, which has been my practice for ten years at least.\n\nThe folks having problems with this design were all running the [Firefox Extended Support Release](https://www.mozilla.org/en-US/firefox/enterprise/), locked at the time to version 115 — two releases behind the native CSS nesting support. Of course, Mozilla doesn't make it easy to determine what version ESR is running. A Mastodonian helpfully linked to a third-party site explaining the update schedule for the ESR releases.\n\nThird party!\n\nThere is no incentive for browser makers to allow you to install old versions side-by-side, and every incentive for them to force updates.\n\n## Options for browser testing\n\nIf you develop on a Mac, you can easily test using:\n\n- Firefox\n- Safari\n- Chrome\n- Chromium-based Microsoft Edge (Yes, really!)\n- Android with the Android SDK\n- iOS Safari with Xcode\n\nIf you develop on Windows you can test using:\n\n- Firefox\n- Chrome\n- Chromium-based Microsoft Edge\n- Android with the Android SDK\n\nCross-browser testing is not easy. Or cheap.\n\nOnce upon a time you could run multiple versions of a web browser on your own machine, with no need for Docker, but I don't think it's worked that way for any of them for many years now.\n\nI have been told that you can do live browser testing using [Playwright](https://playwright.dev/). I haven't tried that out yet, but neither had the person who suggested this to me. My experience with Playwright tells me the setup is not beginner-friendly.\n\nI was able to lean on my experience with Docker to pull and run a virtual machine locally with Firefox 115 on it to verify my \"fix\" worked. That is also not a trivial task for someone unfamiliar with Docker, and it was (at least) frustrating for me.\n\nSo in order to do a handful of minutes of testing I now have an Android developer toolkit, the full Xcode application, and Docker Firefox image all installed on my machine. The only reason I have to open any of these tools is to test web sites, _which is nuts._\n\nOr there's BrowserStack, an expensive solution at US$39.00/month. Out of reach for many independent hobby-level developers. Certainly more than I want to pay for the tiny amount of time I need it. I tried a competitor, but once I'd signed up for the free tier I discovered that live testing was limited to three-minutes. On the plus side, I was subjected to the full-court press of commercial sales efforts and got to exercise my unsubscribing finger.\n\n## The Indie Web is going to have rough edges\n\nI suppose I spent most of a Saturday morning isolating the cause of this issue, implementing a rough \"fix\" (not really a fix, just a very simple fallback), and then verifying that the change worked. In my professional environment, I have the support of a team and access to paid, professional tools. This task goes much quicker. But on my personal work, it's just me responsible for the design, the implementation, the testing, the dev ops, the writing, and most of the photography. I like doing this stuff, but I feel pretty stretched and the things I know I _should_ do is larger than the things I have _time_ to do by several orders of magnitude.\n\nThat has to be even more difficult for beginners or folks dabbling in making websites. The surface level of web development is easy to get hold of, but the attack surface for critique is massive. Is the HTML semantic? Is the site accessible? Did you choose tooling (Wordpress, NextJS, Tailwind, Substack) that people have a technical or political beef with? Did you use vanilla CSS and JavaScript? Did you use _any_ JavaScript? Did you use versions of it that were old enough? Is your site contributing too much to greenhouse emissions because your images aren't properly compressed? Are you stealing everyone's art by using an AI image somewhere?\n\nIt's real easy to see how people might decide that making their own web site is not worth the scrutiny. We need to be sensitive to that if we want independent creators writing stuff, especially without the expectation of it being monetized or a side hustle.\n\nAs far as browser testing goes, the _typical_ user experience is having one of the Big Three browsers installed and on something relatively close to the most recent version. This works for most web site visitors, except those who have not upgraded -- either because they can't or because they won't.\n\nThe solution is _not_ to limit ourselves to markup, layouts, and CSS features available circa 2007 (a suggestion I actually got). For all the device compatibility the old stuff has, it was also _much_ more difficult to make accessible. Oh, and required much more extensive browser testing. (Anyone who thinks float-based layouts are \"bulletproof\" has never had to support IE 6, I assume.)\n\n<AlertCallout>\n\tIE 6 was released in 2001, superseded by IE 7 in 2006. In practice I ended up supporting it for\n\tfifteen years. \"This browser is now old enough to go to high school,\" I remember telling my\n\tproject manager.\n</AlertCallout>\n\nI don't even know what the solution is for website backwards compatibility, at least for the indie web producer. If it's live cross-browser, cross-version testing, it will need to be something at least as easy to use as BrowserStack but much less expensive.\n\nIn the meantime, some patience and tolerance will go a long way. On the indie web, people do what they can with the time and resources they have, and what they give us is usually a gift.\n\nThis _by no means_ is to say you shouldn't raise an issue if you can provide enough context. But please don't respond to that gift with a sneer or a scowl because of technical decisions _you_ have made. Remember to keep your bug reports concise, include the browser type and version, and the OS. And don't be surprised to find out there's very little they are equipped to do.","src/content/posts/2024/06/browser-testing/index.mdx",[756],"./guard.png","d26e60356dd1f3c0","2024/10/colocation",{id:758,data:760,body:769,filePath:770,assetImports:771,digest:773,deferredRender:20},{title:761,description:762,date:763,cover:764},"Agile’s insistence on co-location is disabling","Does “face to face” communication require our bodies to be in the same space, too?",["Date","2024-10-07T11:56:25.000Z"],{src:765,alt:766,description:767,attribution:768},"__ASTRO_IMAGE_coffee.jpg","Closeup of a Mochamaster coffee pot with coffee and condensation in it","The best argument for an office is the free coffee… at least until the austerity measures kick in.",{name:32},"import ArticleFigure from \"@components/ContentItems/ArticleFigure/index.astro\";\nimport Pullquote from \"@components/ContentItems/Pullquote/index.astro\";\nimport Blockquote from \"@components/ContentItems/Blockquote.astro\";\n\nRecently my remote company held a few days of in-person social and work events. It was nice to be able to see people, but I wish I had been able to hear people, too. Because I am hearing impaired[^1] the switch to remote work during the pandemic has made a huge difference in how I feel about work. It’s a difference that wasn’t really apparent to me until this week of events. That week was the week I discovered the hearing aids I'd been using for three years were totally inadequate for group events.\n\nI mean, I couldn't _hear_ anyone. This didn't just limit my participation, though. The experience left me feeling isolated, exhausted, and very self-conscious.\n\n<Pullquote position=\"left\">I don't have this problem with video conferencing.</Pullquote>\n\n[^1]: Some people object to the phrase “hearing impaired” and prefer the alternative phrasing “hard-of-hearing.” [The National Association for the Deaf](https://www.nad.org/resources/american-sign-language/community-and-culture-frequently-asked-questions/) says \"hearing impaired\" suggests that the person is incomplete or broken, while \"hard-of-hearing\" does not. For my part, I can’t see a dime’s worth of difference between the two.\n\nI don't have this problem with video conferencing. I can carry on conversations, participate in meetings, even run meetings effectively. All critical activities for a Scrum master. But if I am running the meetings in-person I rely on the acoustics of the space I am in.\n\nThe situation has improved somewhat since I bought new hearing aids, but it's always going to be a problem. The acoustics of conference rooms are often designed to absorb noise, which does me no favors. And trendy office designs often magnify and reflect sounds, which also present very challenging environments for hearing aids.\n\nI think about this often when I read about Return to Office mandates from companies like Amazon, Apple, or Zoom. But other Scrum practitioners also bemoan our now-remote lifestyle. \"Things were so much better in person,\" they say. Not for me, they're not. In fact, not for a lot of people, and not just for those of us who have trouble with our ears.\n\nBut it's hard getting around the fact that co-location is a part of capital-A Agile orthodoxy. My CSM instructor emphasized many times that a scrum team was _both_ \"cross-functional\" and \"co-located.\" When I suggested that video conferencing tools like Zoom had made it really easy to get many of the benefits of co-location without actually requiring everyone to be in the same office, he became visibly upset.\n\n\"It's not the same thing,\" he insisted, making the arguments we've all become familiar with from corporate Return-to-Office initiatives: better communication, better collaboration, an increase in \"synchronicity,\" and improved transparency and observability.\n\nLarge Scale Scrum (LeSS) even insists on everyone working in the same office space:\n\n<Blockquote note=\"LeSS Teams\" link=\"https://less.works/less/structure/teams\">\n\tEach team is co-located in the same room. This might sound unreasonable. Wouldn’t you, in today’s\n\tglobalized world, want to use the best skilled people in the place where they are? No. We want the\n\tbest teams that can take a shared responsibility for the outcome of the Team, and learns from each\n\tother. Shared responsibility requires trust. Humans build up trust quickest by close cooperation\n\tand face-to-face communication. Co-location also promotes team learning—the essence of continuous\n\timprovement.\n</Blockquote>\n\nAll humans? Or just certain ones? And even if this were true, is it true _all_ the time? Do we need to be face-to-face all the time? Why isn't video-conferencing face-to-face? What makes you think people have to be physically close to collaborate closely?\n\nThese are the questions any Agile practitioner needs to have good answers for before they insist everyone working together in one big room is the best way to go, because open offices exclude many people by default.\n\n## Are our office spaces really accessible?\n\nOne of the last offices I worked in before going fully remote had a split-level design. A short staircase separated the work space from the common areas. There was an elevator that could be used between floors, but it was slow. Using it required entering and exiting a stairwell through two heavy, non-automatic fire doors.\n\nMost of us could jog down these handfuls of steps without thinking about it. But when my colleague was recovering from knee surgery, every visit to the restroom, main conference room, or kitchen became an elaborate dance with crutches.\n\nThen, the elevator was out of service for several days…\n\n“Old buildings have a lot of problems,” you might be thinking.  But this office space was new construction, and we were the first tenants.\n\nBuildings are not often designed with accessibility in mind. Federal requirements improve this somewhat, but those boil down mostly to a list of checkboxes, with little thought given about the interplay between elements or the complete user experience of any particular space.\n\nSmall and large organizations alike continue to manufacture new accessibility problems in the physical space. For example, in 2017 Virginia Tech built a staircase up a short hill but did not include a ramp, forcing people who can’t use stairs to use a much longer, circuitous route:\n\n<Blockquote note=\"'Sit out' at Tech opposes set of stairs\" link=\"https://aging.networkofcare.org/riverside/CommunityResources/News/Article?articleId=82329\">\n\nAshley Shew, a professor of science and technology in society at Tech and co-founder of the caucus, said there are several problems with getting around the campus. When she has to teach classes anywhere but the Upper Quad, there are challenges to getting up and down the hill that take her on winding paths around buildings.\n\n\"If I get tenure, I'll spend decades walking around every building on this campus,\" said Shew, who is an amputee and has hearing loss. \"You feel like a second class citizen when you have to take the long way.\"\n\n</Blockquote>\n\nA spokesperson for Virginia Tech defended the choice in a way that was both patronizing and dismissive:\n\n<Blockquote>\n\n\"We are not in Kansas,\" [Mark] Owczarski said. \"This is not a flat place.\"\n\n</Blockquote>\n\nAgain, the staircase was new construction. And it should not have come as a surprise to any construction planner that Blacksburg is not flat or that some people struggle with stairs.\n\nDesigning for disabilities is hard, especially since there are a lot of different ways people can be disabled. One example that demonstrates how many things we take for granted actually present a barrier for common disabilities is the design of Gallaudet University in Washington DC. Gallaudet is a school for the deaf and hard-of-hearing, so the physical spaces are quite different from the typical space. There are sliding doors so that people communicating with sign language don't have to stop their conversation to walk through a door. Hallways are broad so people signing can stand further apart and read each others sign language. Corners in the hallways are round, not sharp, because deaf people cannot hear someone coming from the other direction. Round corners mean you can see someone before you smack into them. (<cite>[99% Invisible: DeafSpace](https://99percentinvisible.org/episode/episode-50-deafspace/transcript)</cite>)\n\nMost office buildings don't take accessibility to this extreme, of course, but even if the building has typical accommodations, the office layout doesn't. Open offices of the kind advocated by LeSS are especially bad. Often the spaces are cramped, which means there's not much room for people to navigate with a wheelchair, cane, or other support devices. Hip, trendy office spaces that either are or look like converted industrial space with lots of concrete and exposed pipes create horrible, echoing environments bad for both the hard-of-hearing and people with noise sensitivities.\n\n<ArticleFigure\n\timage={import(\"./concrete-jungle.jpg\")}\n\talt=\"Cavernous office space with long desks, concrete floors, and exposed pipes in the ceiling\"\n>\n\tThe concrete aesthetic looks great, but my best memory of this space is of people in the\n\tconference rooms constantly asking the rest of us to keep the noise down.\n</ArticleFigure>\n\nThe hustle and bustle of those open spaces also present obstacles to neurodiverse people. Since these spaces are designed to be noisy and push people together into spontaneous conversations, you could argue neurodiversity is excluded by design.\n\n## Disabled people vs. disabling situations\n\nThe traditional way to think about disability is that there are normal people, and then there are people who are physically or mentally lacking in some way that makes it impossible for them to do things \"normal\" things. Joan is disabled because she cannot walk. I am disabled because I cannot hear without assistance.\n\nA different way of looking at disability is sociological and circumstantial. That is, spaces and processes create disability when they are designed for a narrow band of capabilities. Joan, who relies on a wheelchair, is not disabled until the elevator is out of service. As I write this, I am not disabled because I don't need to hear anything.\n\n<Pullquote>Disability is sociological and circumstantial.</Pullquote>\n\nYou can get a sense of how this works if you wear glasses or contact lenses. If you could not wear them, how well could you operate? Drive? Read your email? Decipher someone's scrawl on a whiteboard?\n\nMost people wear either contact lenses or glasses, at least sometimes. This was not the case for much of history, and not just because lenses were hard to come by or expensive. If you have simple vision problems or a weak single-vision lens prescription, chances are you wouldn't even notice you were vision impaired three hundred years ago. But now most of our society is organized in a way that requires precision vision at any distance. It's not so much \"your bad eyes\" as it is \"we have to read a lot of shit.\"\n\nAs far as hearing is concerned, I am not disabled when I am working remotely because I have multiple strategies for coping, just like people who wear glasses have a means of coping with bad eyesight. I also have hearing aids, but they are also breathtakingly expensive at least in the United States. I have the financial value of a Macbook Pro in each ear… and not the baseline models, either.\n\nEven so, the hearing aids do not restore normal hearing and I have to spend a fair amount of time with an iPhone app that works a little like a primitive mixing board to tune the hearing aids to different listening situations.\n\n<Pullquote>Open office spaces are designed for a narrow band of human capability.</Pullquote>\n\nWhen I am in an office space I cannot generally hear the surrounding people. Since I ask people to repeat themselves often, or misunderstand things people say, some people assume I am stupid.\n\nI often don't respond when someone out of my eyeline asks me a question, and if people don't know I have bad hearing that's easily misconstrued as unfriendliness. Even if I tell people directly they often don't understand that I mean it. (\"I didn't realize you really were deaf,\" a colleague told me once. \"I thought you were just stuck up.\")\n\nI can do my job in a well-designed, traditional office. Even with top-line hearing aids, I have a lot of trouble in an open office space. It is not that I am incapable, it is that open office spaces are designed for a narrow band of human capability.\n\nToo narrow, perhaps, because open offices work for almost no one.\n\n## Open offices don't do what they claim to do\n\nThere’s a growing body of evidence that open offices actually [lead to worse outcomes](https://hbr.org/2019/11/the-truth-about-open-offices). The claimed[^2] value of open offices is that they increase conversations, but they have so many distractions people have become adept at avoiding those.\n\n[^2]: Another advantage of open offices is that they improve surveillance of employees, making it easy to see who is present and busy. This is not usually the advertised purpose, but many people suspect it's one of the real reasons the C-Suite pushes Return to Office mandates. [Spotify acknowledged this recently](https://www.msn.com/en-us/money/companies/spotify-s-hr-chief-says-remote-staff-aren-t-children-as-company-reaffirms-work-from-anywhere-policy/ar-AA1rT08K) when they reaffirmed a commitment to remote work, saying \"our employees are not children.\"\n\n<Blockquote note=\"Harvard Business Review: The Truth About Open Offices\" link=\"https://hbr.org/2019/11/the-truth-about-open-offices\">\n\nEven in open spaces with colleagues in close proximity, people who want to eschew interactions have an amazing capacity to do so. They avoid eye contact, discover an immediate need to use the bathroom or take a walk, or become so engrossed in their tasks that they are selectively deaf (perhaps with the help of headphones). Ironically, the proliferation of ways to interact makes it easier not to respond: For example, workers can simply ignore a digital message.\n\n</Blockquote>\n\nImagine being so committed to constant communication that employees being \"engrossed in their tasks\" is a bad thing.\n\n<ArticleFigure\n\timage={import(\"./stop-doing-offices.jpg\")}\n\talt=\"Stop doing offices meme: Work was not supposed to take 90 minutes by car to get to | Years of urbanization yet no real-world use found for going to a different building to use the same internet | Wanted to do that anyway for a laugh? We had a tool for that, it was called Coffee Shops | Can you wrap this call, we have this room booked & how do we get office parking reimbursed: statements dreamt up by the utterly deranged | Hello I would like to hear half of your zoom call | They have played us for absolute fools\"\n\tposition=\"right\"\n>\n\tDespite what many RTO advocates think, I really have no need to be informed of every conversation\n\tin the building.\n</ArticleFigure>\n\nLeft to their own devices, developers will often choose to work individually for solid stretches of time. For me, the attraction of programming is how easily I can become engrossed. This opportunity to enter a state of mind Mihaly Csikszentmihalyi calls \"flow\" and Cal Newport calls \"deep work,\" but open offices and agile practices prioritize constant availability and communication, which work directly against flow. This even extends to tools like email and group chats.\n\nThat CSM instructor I mentioned earlier was very opposed asynchronous communication. If you have a question you need an answer to, he explained, you should go _talk_ to that person immediately. If you couldn't see them in person, then you should pick up the phone and call. As a Scrum master, he said, I should encourage developers to do this — and if they didn't, immediately walk them to that person’s space or pick up the phone. \"The best way to communicate is face-to-face\" is Scrum orthodoxy, but is it really?\n\n<Pullquote>More often than not, asynchronous communication is just fine.</Pullquote>\n\nEven if you do pick up the phone or walk down the hall, you often still end up leaving a message. If our target is away from their desk, or in a meeting, there's not much else you can do. If you do manage to catch them, however, it's no doubt you are an interruption. You've placed yourself and your priorities above whatever it is the target is doing at the time. Sometimes that's warranted, but often it really isn't.\n\nThis insistence on getting answers immediately is strange for a project execution framework that tightly controls when new work can enter the workstream and what the team's attention is supposed to be on. The\n\"best way to communicate\" should take into account the needs of the person you are talking to as well, and sometimes that need is _waiting a moment._ This \"focus for me but not for thee\" attitude is a part of Scrum I've actively discouraged in my own practice. More often than not, asynchronous communication is just fine.\n\nOf course, the whole theory of co-location is that you are immediately available to anyone walking by, as well as (presumably) alert to all conversations happening around you. This attitude is hostile to concentration, whether you're neurodivergent or not.\n\nMost people in an office are fighting distraction most of the day because the space is designed to maximize availability at the expense of concentration. These workspaces require a super-human capability to regain lost focus, tolerate intentional interruption, and resist distraction.\n\nI do not argue that ADHD is entirely sociologically constructed. But these highly distracting environments disable many people and induce a state of mind similar to the experience of ADHD. Often, these folks assume their inability to work is a personal failing rather than an entirely predictable consequence -- if not actually the purposeful result -- of the designed space. If you are unable to concentrate, most of the work you do will be shallow, uncreative, and slow -- because of, not despite, all the busyness that surrounds you.\n\n## Did we misunderstand the value of synchronicity at work?\n\nIn _Deep Work_, Cal Newport describes the office spaces where concentration and synchronicity were both supported as following a \"hub and spoke\" design. The spokes are areas of quiet, small (even sound-proofed!) individual or small-group offices. The hubs large common areas — hallways, lounges, cafeterias — where people from different disciplines would naturally be mixed together. The open office which is all hub, with occasional small focus rooms or [work pods](https://myofficepods.com/office-pods/hushfree-s-phone-booth/) for people to go on the off-chance they need to think about something.\n\nThe important detail here is that these hub-and-spoke workplace designs are multimodal. They start from the assumption that people need focus in order to work, but encourage mixing in the spaces between. Open offices assume that the bulk of the work gets done in the common area with private spaces are limited to occasional use. That is, assuming they are available at all. It is a unimodal approach to work, and everyone is expected to perform in the same environment, working the same way.\n\nFully remote work combined with regular and easily-accessible video-conferencing mimics much of the hub-and-spoke workspace design. In some cases ways it works even better. Video conferences can handle arbitrarily small or large groups of participants without any conference room conflicts. For those of us with other needs -- with ADHD, anxiety disorders, hearing or vision loss, or mobility issues -- we are more free to create the kinds of workspaces we need without impinging on other people's work styles or space.\n\n<ArticleFigure\n\timage={import(\"./cramped-space.jpg\")}\n\talt=\"A brightly-lit but cramped office space, again with long desks but pushed close together.\"\n>\n\tThis was the last space I worked in before going fully remote in January of 2020. If the office\n\twas full, it would probably have been difficult to get everyone to a fire exit.\n</ArticleFigure>\n\nWhat the hub-and-spoke or fully remote office designs are _incapable_ of reproducing is the performance of busyness which many mistake for work. A manager of an open work space can see and hear whether people are at their desks coding, or standing at white boards collaborating. This is much more difficult if people have individual offices, cubical, or work from home. Managers must instead rely on the quality of the work product, which is an uncomfortable position for managers who are time-and-efficiency focused or assume their subordinates will slack off if not supervised.\n\nScrum actively discourages measuring busyness and insists the work product is the only true measure of effectiveness. It is a [common failure mode of Scrum](https://www.scrum.org/resources/blog/myth-velocity-productivity). Why, then, prioritize working in an environment that has such negative impacts on productivity and encourages the performance and measurement of busyness?\n\nPerhaps the greatest evidence that open offices fail workers is that workers have been resisting return-to-office mandates created by C-suite executives that would never allow themselves to be chained to their desk.\n\n<Blockquote>\n\tThe new world of work has no time for technological holdouts and leaders who let the digital\n\ttransformation pass them by now grapple with the realities of being out of touch. “The reason they\n\twant to have people back in the office is ‘fill in the blank,’ but usually it’s about how they\n\tfeel like they don’t have their finger on the pulse of the organization,” says Slack SVP Brian\n\tElliott.\n\t<cite slot=\"quote-note\">\n\t\t<a href=\"https://www.awarehq.com/blog/return-to-office-resistance-top-companies-bridge-disconnect\">\n\t\t\tThe Truth About Return to Office Resistance and How Top Companies Bridge the Disconnect\n\t\t</a>\n\t</cite>\n</Blockquote>\n\nIn fact, RTO policies so often drive people away that companies have deployed them [as an alternative to layoffs](https://www.msn.com/en-us/money/companies/a-leading-remote-work-expert-says-amazon-s-rto-order-is-about-backdoor-layoffs/ar-AA1rwhki). The folks most likely to leave are the senior employees and high performers, which are also (coincidentally?) the ones who are most likely to be expensive troublemakers. Employees who quit don't get severance. When you get to the point where you are forcing people into poor working conditions _because you want a third of them gone_ it's hard to take any of the arguments about the supremacy of the open office seriously.\n\n## So how should teams work, then?\n\nThere's a lot of emphasis in Scrum on having self-organizing teams. We usually parse this as to the teams figuring out on their own how to balance, organize, and analyze work. But I can think of no more important part of self-organization than also letting the team decide where they work. Perhaps it is in the same room. Maybe it is remote. Maybe some team members like to sit together in a small office while others feel more comfortable and effective when they can control the surrounding activity. Almost by definition, agile teams should not be funneled into a single mode of working.\n\n<Pullquote>Workplaces that look busy but keep folks distracted are hostile. </Pullquote>\n\nWe should also remember that our office spaces are often hostile to neurodivergent and\ndisabled people in ways that are not immediately obvious. Companies and managers need to be sensitive\nto these problems.\n\nIf you do require everyone to be in the office, look around. Does your floorplan automatically exclude anyone in a wheelchair? Do you have amplification in large conference rooms? If so, are people skilled enough to use it and do they use it consistently? Are there sufficient quiet spaces for people who _need_ quiet to work?\n\nWorkplaces that claim they are committed to diversity and insist they are trying to provide the best workspace possible need to take into account not only the needs of the workforce they have at the moment, but also the needs of employees they have yet to hire. And these workspaces need to support employee productivity -- which might require different strategies for different employees in different situations. Workplaces that look busy but keep employees distracted don't support careful thought, concentration, or deep work. They are frustrating, disabling, and hostile to most human beings -- which is why Return to Office is deployed as a back-door layoff.\n\nAgile practitioners, for their part, need to recognize that open workspaces and co-location often work against the goal of a highly productive team working at a sustainable pace. This kind of work can and does happen remotely, sometimes more effectively than it did in person. And working from home offers opportunities to a much more diverse workforce comprised of people who might otherwise be entirely excluded from the traditional office space.","src/content/posts/2024/10/colocation/index.mdx",[772],"coffee.jpg","0ec7aa833d045de8","2024/07/domain-shift",{id:774,data:776,body:786,filePath:787,assetImports:788,digest:790,deferredRender:20},{title:777,description:778,date:779,cover:780},"Don’t drive screws with a hammer","Sometimes developers will solve problems with the handy tool, not the right tool, just because it seems like less work. It's probably not.",["Date","2024-07-02T11:32:09.000Z"],{src:781,alt:782,description:783,attribution:784},"__ASTRO_IMAGE_not-easy.jpg","Banner that reads We do this not because it is easy, but because we thought it would be easy.","This is secretly the entire thought process behind many technical decisions.",{name:785},"Meme / Unknown source","You should go read Frank Taylor's [Rant on Front-End Development](https://blog.frankmtaylor.com/2024/06/20/a-rant-about-front-end-development/). I don't agree with everything, but he makes good points where we differ and I'll just have to sit with those for a bit and decide if Frank is right. It is a sweary rant, though. He says:\n\n> Ask your scrummaster if 8 points of profanity is too much to handle today.\n\nAs your scrum master, I have to say that only _you_ know if it's too much to handle. Consider the risks of being wrong, and if those are tolerable to you then press on ahead. Maybe it's worth a conversation in the retro.\n\nLike Frank, I find it really confusing when people use JavaScript -- or worse, JavaScript frameworks -- to solve problems the long way that have already been solved by other areas of the platform. For example, I have never found a situation where using Gatsby or NextJS was superior to using a server-side language like PHP, Ruby, or ASP to do the same thing. Generally speaking, React Server Side Rendering might have some use-cases, but I bet most of the places it's used more out of (perceived) developer convenience than anything else.\n\n\"I already know React, and PHP sucks.\"\n\nI call this \"domain shifting,\" and it happens when you move a problem from one area you are unfamiliar with (CSS) to another you are more familiar with (JS) without regard for what gets lost along the way.\n\nNow, I _will never argue_ that CSS in JS is always wrong. Sometimes it is the right thing to do, either for a project architecture or because the CSS actually needs to be rendered more dynamically. CSS-in-JS solutions are _best_ wielded by people who already know CSS pretty well; they can choose how and what to leave to vanilla CSS and what needs the JavaScript touch. But all too often -- as Frank points out -- it's just a way for developers to domain-shift their way out of learning a new skill.\n\nAnother reason teams might choose to use an unsuitable tool is because there's a misguided effort to keep the toolset small. For example, in my day job we have one application that absolutely needs a JavaScript framework because it's a full-fledged web app. Another uses a JavaScript framework and clients-side rendering when something more along the lines of [Eleventy](https://11ty.dev) would be more appropriate.I suspect the latter, newer project inherited the framework from the older out of a desire to keep the development stacks as similar as possible.\n\n\"But John,\" I hear you saying, \"Surely we can't have people choosing tools willy-nilly.\" Of course not, and also get out of my house. It makes perfect sense to say \"We are a PHP shop\" and avoid ASP; the tools are similar, they do similar things, and they fill a similar role. It's tricker when it comes to frameworks. People say \"when all you have is a hammer, everything looks like a nail.\" But \"we only use React\" is like saying \"let's only use nails.\" Using React for a small, static, content-heavy website is like using a nail-gun to hang pictures on your wall: the task calls for finesse, not raw power. Likewise, if you have a web application that requires a lot of interactivity and complex state management, you will _really_ wish you had used a framework to manage that… or you will end up writing your own.\n\n[Rules are powerful](/posts/2024/05/about-rules/) and you should deploy them sparingly. You should also deploy them for better reasons than \"I don't want to learn something new.\" For better or worse, the web platform is made up of many different languages. Effectively building on it requires us to be multi-lingual and multidisciplinary. You can't domain-shift your way out of that. Not without serious consequences.","src/content/posts/2024/07/domain-shift/index.mdx",[789],"not-easy.jpg","ae1d1746ebcd3059","2024/06/vim-2",{id:791,data:793,body:803,filePath:804,assetImports:805,digest:807,deferredRender:20},{title:794,subtitle:795,description:796,date:797,cover:798},"Adventures in VIM part 2","Why am I doing this, anyway?","The continuing story of migrating my brain from VSCode to vim",["Date","2024-05-29T11:13:33.000Z"],{src:799,alt:800,description:801,attribution:802},"__ASTRO_IMAGE_./reflections.png","A sunny day at Pandapas pond, with the bright blue sky and scattered clouds reflected perfectly in the water.","All of us need a quiet place to think and reflect sometimes, but that's getting increasingly more difficult to do.",{name:32},"Today I have some more thoughts on moving from VSCode to Neovim. If you want to read from the beginning, [here is the first post](https://thudfactor.com/posts/2024/05/vim-1/).\n\nIt didn't take me too long to realize that trying to switch entirely from VSCode to Neovim was risky both to my effectiveness and my mental health, so I am continuing to use Neovim inside VSCode. I am focusing on the few keystrokes I've learned before moving on.\n\nFortunately it's my day job to write code, so I have plenty of opportunity to practice. I appreciate being able to delete whole words at a time without having to do much more than move the cursor in place and hit two keys. I don't know if that makes me faster, but I certainly feel faster.\n\nI've been asking myself, though: why am I putting in all of this effort? Hasn't VSCode been good enough for me until now? Is it just boredom that's driving me to learn an obscure skill? (It wouldn't be the first time for sure.) But I think I understand now.\n\n## We are in silly season for commercial products\n\nThe AI fad is entirely out of control despite increasing evidence that AI replaces the labor of creation with the labor of revision. A lot of us feel like AI is being forced on us, but — to be fair — a lot of businesses have bought into the hype that they better board the LLM train or be the last ones standing on the platform.\n\nThe silliness is not just AI, however. It has become common for businesses to \"innovate\" new features which they then market after-the-fact, trying to push them on unwilling users. The more dominant the product, the more likely it is that you will have features forced on you whether you are interested or not.\n\nOften it feels like these features are there to serve the business more than you.\n\nOne example I can think of here is the use of digital car dashboards. There's very little benefit to drivers, for making this change, but it seems like everyone's decided to do this anyway — without considerations for safety. Those digital displays certainly do make it easy to change all sorts of stuff around on you with an over-the-air update. What your car does tomorrow might not be the same thing your car does today.\n\nWe are also seeing paying customers being sold for market data to other companies. I am not only thinking here of Reddit licensing its archives to AI engines. Automakers have started using the connected, digital interfaces to the cars to collect and sell information about the drivers to [marketers and insurance companies](https://theconversation.com/cars-are-a-privacy-nightmare-on-wheels-heres-how-they-get-away-with-collecting-and-sharing-your-data-214386) while _at the same time_ turning things like [heated seats and keyless fobs](https://www.theverge.com/2022/7/13/23206999/car-subscription-nightmare-heated-seats-remote-start) into features that require a monthly subscription. It’s one thing to have the free Facebook track you and sell your data, it’s quite another to pay upwards of $50,000 for a car and have all that data sold anyway.\n\nBoth of my cars are too old for this sort of nonsense, but I can easily imagine a feature where every time you start up your car you have to dismiss a chat bubble or watch an ad for these subscription services before you can hit the road.\n\nWhile I was thinking about writing this update, [Adobe changed their terms of service](https://9to5mac.com/2024/06/06/change-to-adobe-terms-amp-conditions/), implying that they could see, and use, anything you created with their software. The backlash was loud and immediate, so now Adobe is [“clarifying” the terms](https://9to5mac.com/2024/06/07/adobe-terms-clarified/), although I don't think anyone can be blamed for thinking they were trying to pull a fast one on us.\n\n## The open-source hope\n\nWhen looking for an alternative text editor, it was _absolutely_ in the back of my mind that Microsoft was beginning to leverage VSCode and Github's market dominance to monetize their users through multiple vectors, while at the same time trying to [force an AI-centered developer experience](https://github.blog/2024-04-29-github-copilot-workspace/) that, at best, is simply not ready for us. AI-based development as it stands now is absolutely a way to take the coding we can all do for free and convert it into a token-based, per-instruction sales model… and I don't like it.\n\nThat's setting aside the fact that so-called \"natural language\" is not, and never will be, precise enough to write non-trivial software.\n\nVSCode’s core is open source to be sure, but it's open source the same way Chrome or Safari is open-source: the code is mostly open, but the projects are tied very tightly to corporate interests. So Google can leverage Chrome to [shut down ad blockers](https://arstechnica.com/gadgets/2023/11/google-chrome-will-limit-ad-blockers-starting-june-2024/) that threaten their main product (your eyeballs). What will happen to VSCode? Microsoft certainly does not have a stellar reputation for centering customer interests over advertising at them.\n\nConcerns about being constantly marketed at is what led me to dismiss [Zed](https://zed.dev/) as an editor. It is nominally open-source, but the creators have expressed an intention to make subscription-based features a significant part of the product. When your income depends on customers converting from a free tier to a subscription, it is impossible to resist incessantly prodding them.\n\nMy developer tools are too important to me on a daily basis for them to become subject to the kind of nonsense-squishing I have to do on _practically every website I visit_. And I can't afford to have writing code subject to token-based fees. I also don’t want to open my editor and be forced to take a tour of features I won't use, or having all of my work broadcast to a central location for AI training and marketing analysis. I want a peaceful place where I can do my work _and_ enjoy my hobby without feeling like I am both a target of and tool for advertising.\n\nThis is a change for me. Once upon a time my argument for paying for products when open source versions were readily available was that paid products were higher quality and that developers ought to be compensated for their work. Since customers are now also products, the first is no longer true. The second is a thing that seems to be happening considerably less. Already profitable businesses are now [regularly laying off](https://www.calcalistech.com/ctechnews/article/wffo5u4am) the people who made them profitable. I feel like the trust between customer and vendor has been breached, and it will take a lot of effort to restore that. Companies don't seem too bothered by it, though.\n\nAnd so Vim / Neovim, with their decades of developer-centered development and a large community of enthusiasts, seems like a much better choice. It is more aligned with my values and needs, and (I hope) developer-driven instead of investor-driven.\n\nStepping into Neovim proper, as unfamiliar and clumsy with it as I am, just _feels_ better. It feels like a respite.","src/content/posts/2024/06/vim-2/index.mdx",[806],"./reflections.png","911b6bfa170c9181","2024/06/new-hotness",{id:808,data:810,body:819,filePath:820,assetImports:821,digest:823,deferredRender:20},{title:811,description:812,date:813,cover:814},"Uptake of the new CSS seems slow. Why?","There’s so much great new stuff in CSS, some of it with extraordinary support. Why aren’t people leaping on it?",["Date","2024-06-19T09:51:34.000Z"],{src:815,alt:816,description:817,attribution:818},"__ASTRO_IMAGE_./fortune.png","A fortune from a fortune cookie, which reads Be content with your lot, one cannot be first in everything.","I don't know about you, but the last thing I want from a fortune cookie is to be faced with hard truths.",{name:32},"import ArticleFigure from \"@components/ContentItems/ArticleFigure/index.astro\";\n\nOver on Mastodon, [Piccalilli asks](https://front-end.social/@piccalilli/112642936601407699):\n\n> There's a lot of chatter about the slow adoption of CSS features.\n> We're working on a theory that folks are finding it hard to work out where the new features can be helpful in real world projects, but what's actually going on?\n\nThere are many reasons for this, I think. It's frustrating when people don't leap on new features after all of the hard work (sometimes years!) in the standards mines. I am confident that grid layouts and container queries will eventually get the kind of use they deserve, but it's going to take awhile. Probably longer than a lot of people would like.\n\nMost of the reasons, I think, can be boiled down to either a lack of knowledge or a lack of opportunity. The lack of opportunity is probably the most difficult to address, but addressing the lack of knowledge is more difficult than you might think -- and understanding the lack of opportunity might help inform how we address the lack of knowledge.\n\nBefore we get started, I'm basing the following on what I've observed over twenty-eight years of professional web development working for digital agencies, publishers, government, and (most recently) B2B SAAS development. It's not grounded in statistics, surveys, or a review of literature — all of which are possibly more constructive than this top-of-the-head stuff I am about to do.\n\nAlso in those 28 years I have never been a rock-star developer. I enjoy the work, like to try to keep up, and have a passion for it. I also like to take breaks now and then to play Assassin's Creed.\n\nWith that out of the way, let's start with opportunity.\n\n## Lack of Opportunity, or \"easier said than done.\"\n\nAlthough \"privilege\" is mostly used in political and civil rights contexts, it's a useful lens for looking at professional activity as well. When I work at digital agencies, I have a significant amount of freedom and latitude to make technical decisions. When I am attached to an established project with a large team I have a lot less opportunity to do so.\n\nDeveloper with privilege, developer without privilege.\n\n### The best project is a new project\n\nThe ideal profile of a project for these new technologies is a _new_ project that has an empowered front-end development team. This describes small digital agencies rather well, and I think most of the people who push CSS forward fall into this category or something adjacent. When this is you, you can swoop in and drop a lot of knowledge. Then you grab your brolly and float off into the sky when the wind changes.\n\n<ArticleFigure\n\timage={import(\"./poppins.jpg\")}\n\talt=\"Mary Poppins flying away. Text says Screw this, I am done. So done.\"\n\tposition=\"right\"\n/>\n\nThis used to be me. When I worked at a digital agency, I could count on starting a brand new project every three to six months. I also rarely coordinated with other front-end engineers, so I did not have to explain myself or justify the decision. Once the work left my hands, though, it would often be integrated into a lot of systems, turned into policy, gain a governing board, etc.\n\nPerhaps we can call this \"the originator’s privilege.\" Part of what makes new projects so much fun is this wide range of latitude. Every successful project becomes legacy code, though, and people still need to work in it.\n\n### Don't we eschew frameworks and libraries so we _don't have to replace everything constantly_?\n\nLast week I saw someone arguing against frameworks (in general, which is a pet peeve of mine, about which more later also) by saying that HTML and CSS would not get out-of-date, whereas frameworks often did. Fair point.\n\nOver yonder is someone wondering why so many websites still don't use grid.\n\nIt is not true that HTML and CSS don't get out of date. The consequences of being out of date are less severe, unless you're relying on `<blink>` I guess, but no one wants to see an old table-based layout turn up.\n\n### Frameworks are the rule, not the exception\n\nLast week I spent trivial amount of time converting our (poorly) z-indexed popover info box into a more modern one that used the new `popover` API. I then spent a non-trivial amount of time convincing React and Styled Components to let me use native HTML, please.\n\nPossibly a little voice in your head went \"ugh, React.\" Maybe it even said \"this is why you shouldn't use frameworks.\"\n\nYes. But.\n\nReact exists because it solved a problem that native HTML could not solve before, and still cannot solve completely. The code I am working in uses React because the project was started over ten years ago. It was a ground-up rewrite of the same application in Flash. (\"Ugh, Flash.\") But that hardly matters.\n\nAny large, non-trivial code base shared among developers will have one or more of the following:\n\n1. A well-tested, public framework built on native HTML, CSS, and JavaScript. React, Angular, Vue, Bootstrap, Tailwind.\n2. A custom-built, internal framework purposely designed for the specific problem space (but not nearly so well-tested). _This includes custom component libraries and style guides_.\n3. A tangle of native, bare-metal JavaScript and CSS, written in multiple styles and idioms, spread out across several generations of CSS and ECMAScript. (HTML and SVG are not riding the New Feature Train yet).\n\nThat list is ordered from what would make me most happy to most sad to find. If the project uses something like React or Angular, I may not like the framework, or it may have many flaws, but it will most likely be reasonably documented and have a library of conversations online about how to do certain things. Custom-built frameworks, not so much.\n\n### Project parameters are a limiting factor\n\n\"This feature is supported by all modern browsers.\"\n\nI hear that a lot. I've used it a lot. Sometimes though, it doesn't matter. At the last digital agency I worked for, we supported IE 11 long after it was reasonable to do so because most of our clients insisted on IE 11 support in their RFPs. What are you going to do? Most digital agencies like to look cash-rich but it's a difficult business, and the profit margins can be quite thin. The client says they need IE 11 support, well, we're going to give them IE 11 support.\n\nWe did eventually drop support, though. Then I changed jobs to a SAAS company with several very large corporate clients. They also demanded IE 11 support. Monitoring the analytics, we could see a very much non-trivial amount of their traffic was still on IE 11 -- because that's what they used in the office. We could not drop support until _they_ dropped support. Which meant (as a for-instance) that much of `grid` was off-limits. CSS custom properties were _right out_.\n\nYou can do fallbacks, progressive enhancement, polyfills, client education… lots of ways to stay current while supporting the old stuff. It's expensive to do, hard to maintain, and very confusing to the juniors.\n\nDid I mention I am _nine years_ behind on Assassin's Creed games?\n\nSpeaking of juniors…\n\n## Lack of knowledge, or \"you don't know what you don't know\"\n\nOK, so as I said I've been working on the web platform almost the entire time it has been in existence. I absolutely try to keep up. Nevertheless I learned about the web browser \"Interop\" effort in late 2023 when I paid for [a class by Manuel Matuzović](https://smashingconf.com/online-workshops/workshops/modern-css-manuel-matuzovic/) that I paid for out of my own pocket. None of my peers seemed to be aware of the project, either. Interop has been a going concern since 2021.\n\n### It's an insular crowd\n\nThis is particularly true of CSS practitioners. There aren't a lot of people who eat, sleep, and breathe CSS. CSS is _my_ favorite part of the web platform, but my duties at work are split using all **three** parts of the web platform (HTML, CSS, JS), as well as handling mentorship duties and working as a Scrum Master. Right now there's only one big CSS-specific conference that I know of, and that's CSS Day in Amsterdam. I hope to make it someday, but that's a haul from the mountains of Virginia. Of course we watch the stream, but there's a force multiplier to being able to go out for drinks after the talks.\n\n\"Oh, you should start a CSS users group!\" Friend, my list of \"shoulds\" far outstrips my capacity for \"can,\" and starting a local developer user group isn't even\n\nA lot of the folks who _do_ commit themselves to CSS are most comfortable on Mastodon. [I'm there](https://hachyderm.io/@thudfactor), so I get to see what they all say. Sometimes I even get answers to my questions or feedback on the more ill-considered of my posts. (Thank you, by the way.) But Mastodon is not where most people are. \"Where do you learn this stuff?\" people ask me. \"Mastodon,\" I say. \"You should join.\" And then they don't join. It's easy to think of the Mastodon crowd as being \"the community\" but most web developers are not there.\n\nAlso, I love you but y'all ain't precisely the friendliest crowd. Much of \"the discourse\" borders on snobbery, and occasionally someone will strip all the way down to their skivvies and leap right into the deep-end of elitism. Just this morning I watched a snarky, sarcastic exchange over utility-based CSS. It's a strategy! It's not even a framework! You can do utility CSS with _vanilla_ CSS! What's your beef?\n\nMastodon is also where people take absolutist opinions against single page apps, or JavaScript in general, or even — believe it or not! — CSS! There's a contingent of small web / indie-web types who treat _no CSS_ as the _ideal_.\n\n\"I don't count anyone who uses GitHub as being part of the indie web.\" Yikes!\n\nI have unfollowed folks on Mastodon who are contributing great things to the web platform because they spend three-quarters of the time running other people down for using tools they don't approve of. Sans context. React? Always bad. Next!\n\nIf only we could fight the rise of global fascism with the kind of enthusiasm and authority with which some people rail against single page apps.\n\n### New talent has to start somewhere.\n\nWeb development is a hard skill to learn. I had the significant advantage of getting to spend thirty years learning this stuff as it developed at a sustainable pace, whereas a newcomer to the industry has to get their hands on it somewhere. That \"somewhere\" is likely to be React, Tailwind, Bootstrap, because those are all tools that help people make something useful fast.\n\nI would _like_ for everyone to understand the JavaScript and CSS underneath it. I'd _like_ everyone to learn the value of semantic HTML. That's why I try to approach people where they are. Imagine a new person, someone who has just learned Tailwind and are proud of what they can now do. They are excited by their new skill. They go tell someone about it, and that person sneers at them. \"Yuck, Tailwind, you should just use CSS.\" It's the rare person who will not get either defensive or discouraged by this, especially if the person sneering at the work is doing it from on stage.\n\nI know someone who applied for an entry-level web developer job and basically failed the interview because she said she used Tailwind on a project. _Entry level_. She doesn't think the interviewer even bothered to look at her portfolio.\n\nIntentional or not, snobbery is a form of gatekeeping. _If_ the web development intelligentsia responsible for evangelizing new tech are _also_ snobby, guess what that gate is around. Personally I really like web components, for example, but anyone I direct that way is going to run into a lot of intense anti-React, anti-framework, anti-JavaScript, anti-application rhetoric because those seem to go hand-in-hand. Which is weird, because the best use cases I can think of for web components are web apps and style guides.\n\n### Evangelism takes a bit\n\nFinally, the new stuff is going to take a while to get uptake. The Last Great Evangelism I saw in web development was [Ethan Marcotte leading us all to responsive web design](https://alistapart.com/article/responsive-web-design/). He explained the what, the how, and the why very well. That was a web-developer generational effort on a par with discarding tables for layout. It required a lot of time, effort and cooperation from a lot of other people. My project manager had to persuade _me_. I had to persuade UX folks and designers. Everyone had to persuade people with purse strings.\n\nI was probably making the case for responsive design about as late as 2018. I think I had my last conversation about \"why we don't just use tables for design\" in 2015. I don't think I've had my last conversation about content being \"above the fold\" yet.\n\nGrid and container queries, specifically, are things design teams as well as developer teams are going to need to wrap their heads around, and unfortunately most designers work at a remove from the browser. Their tools have to catch up before they can catch up, and it's not work we developers can do for them. You want to start a fight with a designer? Say \"you know, you might be interested in learning how to write a little CSS.\"\n\n## Let me sum up\n\nIf you've read this far, thank you and I'm sorry. I got a bit ranty there towards the end, and might have lost the thread a bit. I'll try to recap.\n\n1. Not everyone is in a position to update old code. Frameworks, business practices, and contractual arrangements interfere.\n2. Updating legacy code is expensive, both in money and labor terms.\n3. It's not just a developer education problem, it's designers, project managers, and other stakeholders.\n4. There's something about web developer culture at the moment that feels very insular and gate-keepery, which makes getting the word out hard.\n5. Also, new web paradigms, [like love](https://youtu.be/FkDpwF6-QiA?si=abWbTT8GFXttHrba), take time.\n\nFinally, if you want to show people a better way it rarely helps to shit all over their work.","src/content/posts/2024/06/new-hotness/index.mdx",[822],"./fortune.png","078c0dce4ede5185","pages",["Map",826,827,834,835,842,843,850,851],"about",{id:826,data:828,body:831,filePath:832,digest:833,deferredRender:20},{title:829,description:830},"About Me","A little bit about the proprietor.","import ArticleFigure from \"@components/ContentItems/ArticleFigure/index.astro\";\nimport ThudBro from \"./_sorta-selfie.png\";\n\nHi!\n\n## I am not a composer\n\n<ArticleFigure image={ThudBro} alt=\"An AI artist’s concept of the author\" position=\"right\">\n\tI fed Midjourney an image I took of myself, asked it to describe the image, then fed the image\n\tback. This is what I got. Except for the silly t-shirt, it’s not a significant resemblance.\n</ArticleFigure>\n\nMy name is John Williams, but I am not a composer or a conductor. Sorry about that — it disappoints a lot of people.\n\nFunny story. For as far back as I can remember people have made jokes about me writing the music for _Star Wars_. Occasionally people mix it up and say _Harry Potter_ or _Jurassic Park_. But a few months ago I went through a Dunkin’ Donuts drive-through to pick up an order. The app only puts part of my name on the order sheet — “JOHN W” or some nonsense. The guy at the window says “hey, what’s your name again?”\n\n“John Williams,” I say, and think _here it comes again_. He laughs and says says “I was hoping it was John Wick!”\n\nIt’s always nice to hear a new one.\n\n## From Typesetting to Web Development\n\nAnyway, I am John Williams the famous _web developer_. I’ve been making web sites [almost from the start](/posts/2023/11/goodbye-postcss/). I am so old my earliest sites pre-date CSS. Heck, they pre-date `<table>`. — I remember the earliest debates about table layout. “Tables are for data,” said one side. “But how else can we get a sidebar?” said the other, and that side persevered until better options were available.\n\nBecause there _was_ no typical path towards web development, I came to the industry sideways through typesetting. I worked summers at my hometown newspaper using QuarkXPress to reproduce ad layouts. We’d print those on a very high-resolution printer, then I’d take a razor blade and [adhesive wax machine](https://www.forgottenartsupplies.com/?what=artifacts&image_id=46&cat=53), cut the ad out, and stick it to a broadsheet. From there it went to the camera room, and then the press. It was an odd mix of technologies, but it worked pretty well.\n\nThe web became commercially relevant just as I was graduating from college, so the newspaper hired me to make and run their first web site. This I built with the aid of [BBEdit](https://www.barebones.com/products/bbedit/) and [UserLand Frontier](https://en.wikipedia.org/wiki/UserLand_Software). I used Frontier on my local computer to build the site anew each morning, and pushing the resulting HTML up through a 9600 baud modem.\n\n## Evolving with the Web\n\nThe web has changed a lot since then. It’s become professional and specialized. For most of my career I’ve stayed in front-end publishing, but in the last few years I’ve slid over to the UI Engineering side of things.\n\nIt has always been a struggle to keep up, but here in the 2020’s things are really hopping. It’s the most exciting time since the birth of the Web, and I am thrilled to still be here learning new things every day and sharing them as much as I can with the small circle of people around me.\n\nNow you are in that circle! 🎉\n\n## Embracing Agile Development\n\nI’m also dedicated to agile development processes, serving as my team’s Scrum master. I get to add letters after my name in some contexts. Those letters are [“A-CSM” and “CSPO.”](https://www.scrumalliance.org/community/profile/jwilliams194)\n\nWhat the technology industry calls “agile” a lot of other people call “making stuff.” I came out of the humanities, not traditional computer science education, so when everyone started buzzing about this “agile” stuff I took a look at it and it seemed real dang familiar. I [wrote about that elsewhere](https://www.elfinjohn.com/2019/05/what-studying-the-humanities-taught-me-about-software-development/), if you’re interested. But long story short, most agile frameworks are just the typical creative process scaled up for teams with some process guardrails and a thick buzzword frosting. I will likely discuss that from time to time.\n\n## Me, elsewhere\n\n- [ElfinJohn](https://elfinjohn.com) is my portfolio site. It’s not been updated in awhile, really, because it covers a lot of my “working at an agency” life. I now live the “B2B SAAS” life, which makes for a lot fewer pretty pictures.\n- [FilmHydra](https://www.filmhydra.com) is my movie blog. Remember, I said I came from the humanities? Every so often I feel the need to write something about a movie, and that’s the place. My recent favorites are [this review on _Carnival of Souls_](https://www.filmhydra.com/movies/1960/carnival-of-souls/) and [_Dracula vs Frankenstein_](https://www.filmhydra.com/movies/1970/dracula-vs-frankenstein/)\n- You can also follow me on [Letterboxd](https://letterboxd.com/thudfactor/), a movie-focused social media site, but [Mastodon](https://hachyderm.io/@thudfactor) is my social media of choice.\n- Like that very first newspaper website, _Thudfactor_ is built using a scripting toolkit with only static pages pushed up to the web host. You can read more about that on my [Using page](/using). For a more up-to-date sense of what’s going through my head, you can check out the [Now page](/now).\n\nThanks for sticking around. As the YouTubers say, be sure to Like and Subscribe. Well, it’s kinda hard to “like” something here, but if you have an RSS reader you [can certainly subscribe](/feed.xml).","src/pages/about/index.mdx","15af7ba62123ad9c","blogroll",{id:834,data:836,body:839,filePath:840,digest:841,deferredRender:20},{title:837,description:838},"Blogroll","Some of my favorite reads (and friends)","## Cohort\n\nFriends in blog places.\n\n[Infyo](https://infyo.me/)\n: …isn’t a blog _per se_, but if you are interested in modern YoYo (and who isn’t), there’s a lot of good beginner information here.\n\n[Sarah Wilkes](https://sarahwilkesdev.com/)\n: …who made the Infyo site above, started a blog a bit ago with [a recipe for beer-cheese soup](https://sarahwilkesdev.com/blog/beer-cheese-soup/)\n\n[Film Optimist](https://filmoptimist.blog/)\n: C. Glen Williams’s media commentary is fun; this blog is the companion to their YouTube channel, which tends to do _extremely_ deep dives on, for example, [Captain America](https://www.youtube.com/playlist?list=PL0KNo7dSX9klzj-indE4KC8bUm__GQYMl).\n\n[Pelanne.com](https://pelanne.com/)\n: Interesting technical links with the absolute minimum of commentary. (None.)\n\n[Tom Yancey](https://thomasyancey.com/)\n: …his projects are always entertaining. For example, see his [Altered Chromatic](https://thomasyancey.com/#/projects/alteredchromatic) keyboard.\n\n[Jordan Seiler](https://jordanseiler.xyz/)\n: …wrote something quite useful about [Array.flatMap()](https://jordanseiler.xyz/posts/2023-04-30-flat-map/).\n\n[Toby Hagan](https://tobyhagan.com/)\n: …tackles some more difficult topics, like [how to build a scalable naming system](https://tobyhagan.com/blog/create-a-scalable-naming-system) in large infrastructure projects.\n\n[Solonor’s Inkwell](https://www.solonor.com)\n: …has been blogging for a very long time, although posts have dropped off in recent years (as they have for everyone).\n\n## Me, Elsewhere\n\n[Film Hydra](https://www.filmhydra.com/)\n: my movie blog.\n\n[Elfin John](https://www.elfinjohn.com/)\n: my older portfolio blog.","src/pages/blogroll/index.mdx","4d7d1738ac63b064","links",{id:842,data:844,body:847,filePath:848,digest:849,deferredRender:20},{title:845,description:846},"Useful Webdev Links","Some of my favorite tools for web development, including reference material on new web standards.","## Generators and Tools\n\n[SVGOMG](https://jakearchibald.github.io/svgomg/)\n: SVG tool for cleaning up, compressing, and simplifying SVGs. I often use this after exporting an SVG from a tool like Figma.\n\n[Josh Comeau's Shadow Palette Generator](https://www.joshwcomeau.com/shadow-palette/)\n: Generate nice looking, naturalistic drop shadows in CSS.\n\n[Wakamai Fondue (font analysis)](https://wakamaifondue.com/)\n: Web app that can analyze a font file and tell you lots of stuff about it, including the color palettes (if any) and what axes are available.\n\n[Flexbox Labs](https://flexboxlabs.netlify.app/)\n: A great way to try out different flexbox properties and see what they do; familiar iconography might help make the dubiously-inuitive property names stick in your head a little better.\n\n[Anchoreum](https://anchoreum.com/)\n: Similar to above; an interactive playground for anchor-based positioning. (Browser support is chrome-only at the moment, but on the roadmap for Firefox and Safari.)\n\n## References\n\n[Design Beyond Barriers](https://designbeyondbarriers.com/)\n: Lots of good tips here on how to design for accessibility.\n\n[Every Layout](https://every-layout.dev)\n: Heydon Pickering & Andy Bell's composable styles for common layout problems, with a lot of explanation for the thought behind the styles. The layouts themselves are a paid product, but the introductory material is both valuable and free.\n\n[Ahmad Shadeed's Interactive Guide to CSS Container Queries](https://ishadeed.com/article/css-container-query-guide/)\n: Not just the what, but the why.\n\n[CUBE CSS](https://cube.fyi/)\n: Andy Bell's CSS organization strategy based partly on BEM but less opinionated on naming conventions.\n\n[Navigating the Web Platform](https://patrickbrosset.com/lab/navigating-the-web-platform/)\n: A collection of links on how to keep up with changes to the web platform & how to participate in its development.\n\n## Videos\n\n[CSS Popover + Anchor Positioning is Magical](https://www.youtube.com/watch?v=DNXEORSk4GU)\n: Kevin Powell explains both the basics of popovers and anchor positioning in about 20 minutes.","src/pages/links/index.mdx","32c4e13939b5613d","endmark",{id:850,data:852,body:855,filePath:856,digest:857,deferredRender:20},{title:853,description:854},"About the Endmark","Details about the graphical element that appears at the bottom of each page.","import EndMark from \"@components/PageItems/EndMark.astro\";\n\nThe graphic element at the bottom of each page is the phrase \"No Silver Bullet,\" translated into Tengwar using the handy tool at [Tecendil](https://www.tecendil.com/). The typeface is [Annatar](https://www.fontspace.com/tengwar-annatar-font-f2244) by Johan Winge. Tengwar is a constructed alphabet initially created by JRR Tolkien for _Lord of the Rings_.\n\nThe phrase is a reference to Frederick Brooks’s paper [No Silver Bullet: Essence and Accidents of Software Engineering](https://www.cs.dartmouth.edu/~cs50/Reading/NoSilverBullet.pdf) (PDF link). If you do software development or manage software developers, I encourage you to give this paper a good, careful read. Although originally published in 1986, it remains relevant — especially today, when large language models popularly called \"AI\" are being pitched as a way to dramatically improve the efficiency of software development.\n\nAt the risk of oversimplifying things, Brooks’s observation is that the hard part of software engineering is understanding what needs to be written, not the actual writing itself, and that any tool that targets the _writing_ of code will have only marginal returns. The real efficiency gains are in the specification stage. Unfortunately, that's a much harder problem… and probably a human one.\n\nLLM code-generation is pretty firmly a \"make writing code faster\" tool, leaving specifications very much up to the person requesting the code. The resulting code, therefore, is only as good as the ability to describe what it is you are looking for.","src/pages/endmark/index.mdx","52a8bbabc3eb84b6","books",["Map",860,861,887,888,913,914,938,939,963,964],"coils-labyrinth",{id:860,data:862,body:872,filePath:873,digest:874,rendered:875},{title:863,authors:864,genres:866,draft:868,drunk:868,date:869,published:870,openlibrary:871},"In the Coils of the Labyrinth",[865],"David Annandale",[867],"Cosmic Horror",false,["Date","2025-05-26T12:55:51.000Z"],"2022","OL27172834W","This RPG tie-in book about a sanitarium secretly run as a generator for occult rituals is far better than it has any right to be.","src/content/books/coils-labyrinth.md","538768ad7aa61d13",{html:876,metadata:877},"<p>This RPG tie-in book about a sanitarium secretly run as a generator for occult rituals is far better than it has any right to be.</p>",{headings:878,localImagePaths:879,remoteImagePaths:880,frontmatter:881,imagePaths:886},[],[],[],{title:863,authors:882,genres:883,draft:868,drunk:868,date:884,published:885,openlibrary:871},[865],[867],["Date","2025-05-26T12:55:51.000Z"],2022,[],"john-dies",{id:887,data:889,body:898,filePath:899,digest:900,rendered:901},{title:890,authors:891,genres:893,draft:868,drunk:20,date:895,published:896,openlibrary:897},"John Dies at the End",[892],"David Wong / Jason Pargin",[894],"Cosmic Horror, Comedy",["Date","2025-05-26T12:55:51.000Z"],"2009","OL8378245W","John and Dave take the wrong drug at a party and begin to see things… everywhere. One of few horror novels to scare me, despite the satirical overtones.","src/content/books/john-dies.md","5db91a013b6a4b47",{html:902,metadata:903},"<p>John and Dave take the wrong drug at a party and begin to see things… everywhere. One of few horror novels to scare me, despite the satirical overtones.</p>",{headings:904,localImagePaths:905,remoteImagePaths:906,frontmatter:907,imagePaths:912},[],[],[],{title:890,authors:908,genres:909,draft:868,drunk:20,date:910,published:911,openlibrary:897},[892],[894],["Date","2025-05-26T12:55:51.000Z"],2009,[],"the-cipher",{id:913,data:915,body:923,filePath:924,digest:925,rendered:926},{title:916,authors:917,genres:919,draft:868,drunk:20,date:920,published:921,openlibrary:922},"The Cipher",[918],"Kathe Koja",[867],["Date","2025-05-26T12:55:51.000Z"],"1991","OL21243717W","When a mysterious hole appears in the floor of the storage room of Nicolas and Nakota's apartment building, the \"Funhole\" becomes their entire purpose in a story that's a bit like Lord of the Flies but it's starving artists.","src/content/books/the-cipher.md","c590353646cfc0df",{html:927,metadata:928},"<p>When a mysterious hole appears in the floor of the storage room of Nicolas and Nakota’s apartment building, the “Funhole” becomes their entire purpose in a story that’s a bit like Lord of the Flies but it’s starving artists.</p>",{headings:929,localImagePaths:930,remoteImagePaths:931,frontmatter:932,imagePaths:937},[],[],[],{title:916,authors:933,genres:934,draft:868,drunk:20,date:935,published:936,openlibrary:922},[918],[867],["Date","2025-05-26T12:55:51.000Z"],1991,[],"skin",{id:938,data:940,body:948,filePath:949,digest:950,rendered:951},{title:941,authors:942,genres:943,draft:868,drunk:20,date:945,published:946,openlibrary:947},"Skin",[918],[944],"Dark Fiction",["Date","2025-05-26T12:55:51.000Z"],"1993","OL1886002W","Artists Tess, Bibi, and the Surgeons of the Demolition struggle to maintain authenticity and sanity in the outlaw art scene in this bleak and deeply disturbing novel exploring the self-destructive power of both fame _and_ self-isolation.","src/content/books/skin.md","2a7c243154e840fa",{html:952,metadata:953},"<p>Artists Tess, Bibi, and the Surgeons of the Demolition struggle to maintain authenticity and sanity in the outlaw art scene in this bleak and deeply disturbing novel exploring the self-destructive power of both fame <em>and</em> self-isolation.</p>",{headings:954,localImagePaths:955,remoteImagePaths:956,frontmatter:957,imagePaths:962},[],[],[],{title:941,authors:958,genres:959,draft:868,drunk:20,date:960,published:961,openlibrary:947},[918],[944],["Date","2025-05-26T12:55:51.000Z"],1993,[],"the-lesser-dead",{id:963,data:965,body:974,filePath:975,digest:976,rendered:977},{title:966,authors:967,genres:969,draft:868,drunk:20,date:971,published:972,openlibrary:973},"The Lesser Dead",[968],"Christopher Buehlman",[970],"Vampire Horror",["Date","2025-05-26T12:55:51.000Z"],"2014","OL20294727W","Vampires Joey and Margaret have a cozy vampire colony in the sewers of 1970s New York City up until they take in a group of child-vampires who don't seem to understand How Not To Be Seen.","src/content/books/the-lesser-dead.md","cd7b213b9c13477a",{html:978,metadata:979},"<p>Vampires Joey and Margaret have a cozy vampire colony in the sewers of 1970s New York City up until they take in a group of child-vampires who don’t seem to understand How Not To Be Seen.</p>",{headings:980,localImagePaths:981,remoteImagePaths:982,frontmatter:983,imagePaths:988},[],[],[],{title:966,authors:984,genres:985,draft:868,drunk:20,date:986,published:987,openlibrary:973},[968],[970],["Date","2025-05-26T12:55:51.000Z"],2014,[]];

export { _astro_dataLayerContent as default };
