let c=3,h=3;class p{tabletop;playground;scoreboard;score;gameIsOver;levelIsOver;spaces;generateBoard;constructor(e,t){if(console.log("ZombieGame Initializing",e),this.generateBoard=t,this.tabletop=e.tabletop,this.playground=e.playground,this.scoreboard=e.scoreboard,!this.tabletop||!this.playground||!this.scoreboard)throw new Error("Missing critical infrastructure");this.score=0,this.gameIsOver=!1,this.levelIsOver=!1,this.spaces=this.generateBoard(20,20)}}class u extends HTMLElement{Game;constructor(){super();const e={tabletop:this.querySelector("#canvas"),playground:this.querySelector("#board"),scoreboard:this.querySelector("#scoreField")};this.Game=new p(e,this.generateBoard),this.querySelector("#LastStand")?.addEventListener("click",this.lastStand.bind(this)),this.querySelector("#Teleport")?.addEventListener("click",this.teleport.bind(this)),this.querySelector("#Disintegrator")?.addEventListener("click",this.disintegrate.bind(this)),this.querySelector("#Reset")?.addEventListener("click",this.reset.bind(this)),this.initialize(),globalThis.addEventListener("keydown",this.keyhandler.bind(this))}connectedCallback=()=>{console.log("Connected Callback")};removeZombiesNear([e,t]){[[e-1,t-1],[e,t-1],[e+1,t-1],[e-1,t],[e+1,t],[e-1,t+1],[e,t+1],[e+1,t+1]].forEach(i=>{this.removeZombiesAt(i)})}keyhandler(e){if(!e.repeat&&["l","t","d","r"].includes(e.key))switch(e.key){case"l":this.lastStand();break;case"t":this.teleport();break;case"d":this.disintegrate();break;case"r":this.reset();break}}teleport(){if(h<=0||this.Game.gameIsOver||this.Game.levelIsOver)return;const e=this.randomPosition(this.Game),t=this.getPlayer();this.setPosition(t,e),this.processTurn(e),h--,h===0&&this.querySelector("#Teleport")?.setAttribute("disabled","true")}lastStand(){if(this.Game.gameIsOver||this.Game.levelIsOver)return;const e=this.getPlayer(),{position:t}=this.getPosition(e);this.processTurn(t);const s=setInterval(()=>{this.Game.gameIsOver?clearInterval(s):this.processTurn(t)},300)}disintegrate(){if(c<=0||this.Game.gameIsOver||this.Game.levelIsOver)return;const{position:e}=this.getPosition(this.getPlayer());this.removeZombiesNear(e),this.processTurn(e),c--,c===0&&this.querySelector("#Disintegrator")?.setAttribute("disabled","true")}reset(){this.Game.playground.replaceChildren(),this.Game.score=0,this.Game.gameIsOver=!1,this.Game.levelIsOver=!1,this.Game.scoreboard.value="0",c=3,h=3,this.querySelector("#Teleport")?.removeAttribute("disabled"),this.querySelector("#Disintegrator")?.removeAttribute("disabled"),this.initialize()}initialize(){this.placePlayer(),this.placeZombies(),this.updateUI()}placePlayer(){const[e,t]=this.randomPosition(this.Game),s=this.cloneId("#player-template"),i=this.Game.playground.appendChild(s);i.addEventListener("click",this.navigationHandler.bind(this)),this.setPosition(i,[e,t])}createRubbleAt(e){const t=this.cloneId("#rubble-template");this.Game.playground.appendChild(t),this.setPosition(t,e)}getActor(e){return this.querySelectorAll(`[data-position]:has(.${e})`)}getPlayer(){const e=this.getActor("player").item(0);if(!(e instanceof HTMLElement))throw new Error("Player not found or is not an HTML Element");return e}placeZombies(){for(let e=0;e<10;e++){const t=this.cloneId("#zombie-template"),s=this.randomPosition(this.Game);this.Game.playground.appendChild(t),this.setPosition(t,s)}}setPosition(e,t){e.dataset.position=this.posToString(t);const[s,i]=t;e.style.setProperty("left",`${s+.5}rem`),e.style.setProperty("top",`${i+.5}rem`)}getCollisions(){const e=this.getOccupiedSpaces(this.Game),t=[];return e.forEach(i=>{if(!(i instanceof HTMLElement))return;const{position:[o,r]}=this.getPosition(i),a=this.getType(i),n=t.find(({position:[l,m]})=>l===o&&m===r);if(!n)t.push({position:[o,r],zombie:a==="zombie"?1:0,player:a==="player",rubble:a==="rubble",total:1});else switch(n.total+=1,a){case"player":n.player=!0;break;case"rubble":n.rubble=!0;break;case"zombie":n.zombie+=1;break;default:throw new Error("Collision with unknown sprite type")}}),t.filter(i=>i.total>1)}movePlayerTo(e){this.setPosition(this.getPlayer(),e)}processTurn(e){this.movePlayerTo(e),this.moveZombies(e),setTimeout(()=>{const t=this.getCollisions();let s=0,i=!1;t.forEach(r=>{if(s+=r.zombie,r.player){i=!0;const a=this.getPlayer();a.dataset.dead="true"}else r.zombie>0&&(!r.rubble&&!r.player&&this.createRubbleAt(r.position),this.removeZombiesAt(r.position))}),this.Game.score+=s;const o=this.getActor("zombie").length;if(!(this.Game.scoreboard instanceof HTMLInputElement))throw new Error("Scorefield is not an input");this.Game.scoreboard.value=`${this.Game.score}`,this.Game.levelIsOver=o<1,this.Game.gameIsOver=i,this.updateUI()},500)}navigationHandler(e){const t=e.target;if(!t||!(t instanceof HTMLElement)||!t.matches("button"))return;const s=t.closest("[data-position]");if(!s||!(s instanceof HTMLElement))throw console.log(s),new Error("Attempted navigation from an element that is not positioned");const{position:i}=this.getPosition(s),o=this.getNextPlayerPosition(i);this.processTurn(o)}removeZombiesAt(e){this.getOccupiedSpaces(this.Game).forEach(s=>{s instanceof HTMLElement&&s.dataset.position===this.posToString(e)&&s.matches(":has(.zombie)")&&this.Game.playground.removeChild(s)})}getNextPlayerPosition([e,t]){const s=this.getPlayer(),{position:[i,o]}=this.getPosition(s);return[e+i,t+o]}moveZombies(e){const[t,s]=e;this.getActor("zombie").forEach(o=>{if(!(o instanceof HTMLElement))return;const{position:[r,a]}=this.getPosition(o);let n=t-r,l=s-a;n!==0&&(n=n>0?1:-1),l!==0&&(l=l>0?1:-1);const m=[n+r,l+a];this.setPosition(o,m)})}updateUI(){this.Game.gameIsOver?(this.Game.scoreboard.innerText=`${this.Game.score}`,this.Game.tabletop.classList.add("game-over")):this.Game.levelIsOver?this.Game.tabletop.classList.add("game-won"):(this.Game.tabletop.classList.remove("game-over"),this.Game.tabletop.classList.remove("game-won"))}generateBoard(e,t){const s=[];for(let i=0;i<e;i++)for(let o=0;o<t;o++)s.push([o,i]);return s}filterBoardByPositions(e,t){return e.filter(i=>!t.some(o=>o[0]===i[0]&&o[1]===i[1]))}getGameElementBySelector(e,t=this){console.log("hi");const s=t.querySelector(e);if(!s)return null;if(!(s instanceof HTMLElement))throw new Error(`Node selected by ${e} is not an HTMLElement`);return s}getPositionString(e){if(!e.dataset.position)throw console.error(e),new Error("Sprite has no position information");return e.dataset.position}getPosition(e){const t=this.getPositionString(e),s=this.stringToPos(t);return{positionString:t,position:s}}stringToPos(e){const[t,s]=e.split(",").map(i=>+i);return[t,s]}posToString([e,t]){return`${e},${t}`}getOccupiedSpaces(e){return e.playground.querySelectorAll("[data-position]")}getOccupiedPositions(e){const t=this.getOccupiedSpaces(e),s=[];return t.forEach(i=>{!(i instanceof HTMLElement)||!i.dataset.position||s.push(this.stringToPos(i.dataset.position))}),s}getType(e){return e.matches(":has(.zombie)")?"zombie":e.matches(":has(.rubble)")?"rubble":e.matches(":has(.player)")?"player":null}freeSpots(e){return this.filterBoardByPositions(e.spaces,this.getOccupiedPositions(e))}randomPosition(e){const t=this.freeSpots(e),s=Math.floor(Math.random()*t.length);return t[s]}cloneId(e){const t=this.getGameElementBySelector(e);if(!t)throw new Error(`Missing template ${e}`);if(!(t instanceof HTMLTemplateElement))throw new Error("Passed result is not a template");const s=t.content.cloneNode(!0);if(!(s instanceof DocumentFragment))throw new Error(`Resulting element ${e} is not an HTMLElement`);if(!(s.firstElementChild instanceof HTMLElement))throw new Error(`Resulting element child of ${e} is not an HTMLElement`);return s.firstElementChild}}customElements.define("zombie-dodge",u);
